var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AtLeastOneRequiredValidatorOptions.html",[0,0.079,1,4.034]],["body/interfaces/AtLeastOneRequiredValidatorOptions.html",[0,0.09,1,6.76,2,0.841,3,0.068,4,0.046,5,0.052,6,5.589,7,3.475,8,5,9,5.589,10,0.13,11,0.188,12,0.858,13,8.877,14,7.797,15,2.994,16,0.162,17,0.006,18,6.367,19,0.22,20,5.997,21,3.347,22,6.336,23,4.323,24,5.589,25,5.589,26,2.899,27,0.068,28,1.391,29,1.088,30,6.564,31,4.092,32,0.781,33,6.564,34,1.609,35,4.293,36,2.082,37,1.99,38,2.577,39,2.976,40,4.092,41,2.634,42,2.833,43,5,44,2.216,45,5,46,7.328,47,1.667,48,3.475,49,2.025,50,3.347,51,5.587,52,5.589,53,5.589,54,2.522,55,2.082,56,5.589,57,2.419,58,5.589,59,5.589,60,5.589,61,1.71,62,5.589,63,5.589,64,4.905,65,5.589,66,2.469,67,4.613,68,2.43,69,7.336,70,4.903,71,5.589,72,3.357,73,2.64,74,1.881,75,3.735,76,3.297,77,8.19,78,5.589,79,5.589,80,5.589,81,1.851,82,5.372,83,3.31,84,5,85,5.589,86,5.372,87,5.589,88,0.004,89,0.004]],["title/classes/BaseFormAccessor.html",[90,0.461,91,3.781]],["body/classes/BaseFormAccessor.html",[3,0.072,4,0.064,5,0.072,17,0.005,27,0.072,74,2.604,88,0.005,89,0.005,90,0.846,91,6.94,92,4.793,93,7.736,94,6.922,95,7.736,96,0.97,97,3.731,98,4.356,99,4.489,100,6.385,101,3.819,102,3.819,103,6.922,104,6.922,105,4.793,106,2.129,107,5.665,108,7.736,109,1.182]],["title/interfaces/BaseStore.html",[0,0.079,110,3.579]],["body/interfaces/BaseStore.html",[0,0.148,2,0.964,3,0.06,4,0.053,5,0.06,10,0.149,11,0.206,16,0.202,17,0.006,19,0.235,27,0.085,28,1.735,29,1.461,68,3.182,88,0.004,89,0.004,98,3.607,110,5.863,111,4.956,112,4.956,113,5.67,114,3.39,115,5.67,116,7.287,117,4.956,118,3.97,119,6.421,120,4.282,121,6.295,122,3.342,123,4.961,124,3.411,125,4.956,126,5.352,127,3.838,128,2.831,129,5.863,130,3.607,131,3.411,132,5.863,133,3.717,134,3.97,135,2.055,136,2.615,137,1.316,138,5.481,139,2.666,140,4.282,141,4.282,142,4.282,143,4.282]],["title/interfaces/BaseStoreActions.html",[0,0.079,129,3.579]],["body/interfaces/BaseStoreActions.html",[0,0.147,2,0.95,3,0.059,4,0.052,5,0.059,10,0.147,11,0.204,12,0.735,16,0.214,17,0.006,19,0.233,27,0.085,28,1.197,29,1.35,68,3.17,88,0.004,89,0.004,98,3.552,110,4.62,111,4.881,112,4.881,113,3.909,114,3.374,115,4.914,116,6.71,117,4.881,118,3.909,119,6.798,120,4.217,121,6.267,122,3.33,123,4.914,124,3.359,125,4.881,126,6.267,127,3.779,128,2.788,129,6.351,130,3.552,131,3.359,132,5.807,133,3.661,134,3.909,135,2.024,136,2.575,137,1.541,138,5.451,139,3.786,140,4.217,141,4.217,142,4.217,143,4.217,144,4.223]],["title/interfaces/BaseStoreAssets.html",[0,0.079,127,2.928]],["body/interfaces/BaseStoreAssets.html",[0,0.149,2,0.974,3,0.06,4,0.053,5,0.06,10,0.151,11,0.207,16,0.194,17,0.006,19,0.236,27,0.086,28,1.227,29,1.362,68,2.906,88,0.004,89,0.004,98,3.643,110,4.738,111,5.006,112,5.006,113,4.009,114,2.899,115,4.992,116,6.788,117,5.006,118,4.009,119,6.437,120,4.325,121,6.313,122,3.351,123,5.69,124,3.445,125,5.006,126,5.385,127,4.826,128,4.058,129,6.724,130,5.17,131,4.889,132,6.724,133,3.754,134,4.009,135,2.075,136,2.641,137,1.324,138,5.5,139,2.692,140,4.325,141,4.325,142,4.325,143,4.325]],["title/interfaces/BaseStoreAssetsGeneratorOptions.html",[0,0.079,145,3.579]],["body/interfaces/BaseStoreAssetsGeneratorOptions.html",[0,0.142,2,1.117,3,0.069,4,0.061,5,0.069,10,0.173,11,0.225,12,0.811,16,0.193,17,0.005,19,0.2,27,0.082,88,0.005,89,0.005,115,5.96,145,6.411,146,5.741,147,4.959,148,4.178,149,6.64,150,8.781,151,6.08,152,1.303,153,6.773,154,4.959,155,5.434,156,4.598]],["title/interfaces/BaseStoreSelectors.html",[0,0.079,132,3.579]],["body/interfaces/BaseStoreSelectors.html",[0,0.148,2,0.964,3,0.06,4,0.053,5,0.06,10,0.149,11,0.206,16,0.202,17,0.006,19,0.235,27,0.085,28,1.215,29,1.357,68,2.893,88,0.004,89,0.004,98,5.152,110,4.691,111,4.956,112,4.956,113,3.97,114,2.882,115,4.961,116,6.757,117,4.956,118,3.97,119,6.421,120,4.282,121,6.786,122,3.342,123,4.961,124,3.411,125,4.956,126,5.352,127,3.838,128,2.831,129,5.863,130,3.607,131,3.411,132,6.396,133,3.717,134,3.97,135,2.055,136,2.615,137,1.316,138,5.481,139,2.666,140,4.282,141,6.115,142,6.115,143,6.115]],["title/interfaces/BasicEntityAdapterReducerActions.html",[0,0.079,157,4.034]],["body/interfaces/BasicEntityAdapterReducerActions.html",[0,0.139,2,1.08,3,0.067,4,0.059,5,0.067,10,0.167,11,0.22,16,0.218,17,0.006,19,0.193,27,0.08,29,1.273,49,1.568,68,2.376,88,0.005,89,0.005,113,4.446,114,2.582,124,3.82,128,3.17,135,3.052,137,1.564,154,4.795,157,7.083,158,5.254,159,5.254,160,6.42,161,6.358,162,3.959,163,7.678,164,4.795,165,6.42,166,6.42,167,5.922,168,6.42,169,5.922,170,5.007,171,1.684,172,6.42,173,4.61]],["title/interfaces/BasicEntityState.html",[0,0.079,170,3.411]],["body/interfaces/BasicEntityState.html",[0,0.14,2,1.095,3,0.068,4,0.06,5,0.068,10,0.169,11,0.222,16,0.216,17,0.006,19,0.196,27,0.081,29,1.284,49,1.591,68,2.41,88,0.005,89,0.005,113,4.51,114,2.619,124,3.875,128,3.216,135,2.334,137,1.196,144,4.608,154,4.864,157,6.007,158,5.329,159,5.329,160,6.512,161,4.864,162,3.028,163,8.265,164,4.864,165,6.512,166,6.512,167,6.007,168,6.512,169,6.007,170,6.04,171,2.031,172,8.553,173,4.676]],["title/pipes/BtwPipe.html",[174,1.473,175,4.373]],["body/pipes/BtwPipe.html",[3,0.058,4,0.051,5,0.058,10,0.184,12,0.58,16,0.138,17,0.006,19,0.168,27,0.058,32,1.414,34,1.801,42,1.829,44,2.129,47,1.606,49,1.724,66,2.765,88,0.004,89,0.004,90,0.59,96,0.784,152,1.341,174,2.377,175,8.118,176,3.246,177,3.748,178,6.257,179,1.722,180,1.4,181,9.073,182,2.7,183,1.137,184,1.241,185,4.317,186,5.273,187,0.772,188,6.257,189,7.89,190,3.054,191,4.092,192,6.849,193,1.533,194,2.452,195,6.327,196,1.137,197,6.257,198,6.257,199,6.257,200,3.748,201,6.257,202,6.257,203,2.46,204,4.317,205,0.478,206,1.857,207,5.165,208,6.257,209,3.748,210,6.257,211,4.582,212,7.89,213,6.257,214,6.257,215,5.599,216,6.257,217,6.257,218,4.841,219,5.599,220,6.257,221,6.257,222,7.89,223,5.165,224,6.257,225,6.257]],["title/interfaces/ComponentTypeWrapper.html",[0,0.079,226,4.373]],["body/interfaces/ComponentTypeWrapper.html",[0,0.153,2,0.968,3,0.06,4,0.053,5,0.06,7,3.407,17,0.006,19,0.236,21,3.854,27,0.06,34,1.852,42,1.88,44,1.51,47,1.635,49,1.913,61,1.969,70,4.3,88,0.004,89,0.004,90,0.825,91,6.211,96,0.807,100,5.311,109,1.506,203,3.157,205,0.492,226,7.831,227,6.434,228,6.434,229,6.434,230,6.627,231,5.879,232,8.029,233,4.275,234,4.658,235,7.184,236,5.879,237,3.476,238,3.044,239,7.184,240,5.603,241,7.784,242,9.165,243,8.029,244,7.184,245,1.554,246,5.757,247,5.311,248,6.434,249,4.49,250,4.3,251,7.184,252,6.434,253,6.408,254,7.224,255,3.714,256,6.408,257,7.184,258,6.434]],["title/injectables/EffectsService.html",[259,1.407,260,4.034]],["body/injectables/EffectsService.html",[3,0.065,4,0.057,5,0.065,10,0.162,12,0.779,16,0.186,17,0.006,19,0.253,27,0.065,29,1.343,44,2.124,88,0.005,89,0.005,90,0.655,147,4.641,152,1.227,180,1.363,183,1.529,184,1.541,187,1.039,193,2.061,196,1.529,205,0.531,259,2.422,260,6.946,261,2.947,262,6.945,263,6.946,264,6.946,265,8.415,266,6.945,267,8.415,268,2.996,269,8.415,270,6.945,271,1.829,272,1.701,273,2.193,274,3.202,275,6.945,276,6.945,277,6.945,278,6.945,279,6.945,280,6.945,281,6.945]],["title/interfaces/EntityStoreActions.html",[0,0.079,282,3.781]],["body/interfaces/EntityStoreActions.html",[0,0.135,2,0.878,3,0.054,4,0.048,5,0.054,10,0.136,11,0.194,12,0.699,16,0.218,17,0.006,19,0.225,27,0.078,29,1.119,68,2.927,88,0.004,89,0.004,114,3.181,115,5.672,119,6.913,120,3.898,121,6.118,122,3.491,123,4.674,124,3.105,126,6.118,128,2.577,130,4.247,131,3.105,135,2.936,137,1.504,138,5.903,139,3.678,140,3.898,141,3.898,142,3.898,143,3.898,144,4.016,158,4.27,159,4.27,161,6.118,162,3.809,170,4.07,274,2.689,282,6.468,283,4.512,284,4.814,285,4.27,286,3.614,287,5.835,288,4.814,289,4.814,290,4.814,291,4.814]],["title/interfaces/EntityStoreAssets.html",[0,0.079,286,3.028]],["body/interfaces/EntityStoreAssets.html",[0,0.138,2,0.919,3,0.057,4,0.05,5,0.057,10,0.142,11,0.2,16,0.189,17,0.006,19,0.23,27,0.08,29,1.152,68,2.022,88,0.004,89,0.004,114,2.197,115,5.753,119,6.715,120,4.081,121,6.205,122,3.537,123,5.572,124,3.251,126,5.192,128,3.974,130,5.228,131,4.788,135,2.492,137,1.277,138,5.948,139,2.541,140,4.081,141,4.081,142,4.081,143,4.081,158,4.471,159,4.471,161,5.192,162,3.232,170,4.261,274,2.815,282,6.956,283,4.724,284,5.04,285,4.471,286,4.813,287,6.956,288,5.04,289,5.04,290,5.04,291,5.04]],["title/interfaces/EntityStoreAssetsGeneratorOptions.html",[0,0.079,155,3.579]],["body/interfaces/EntityStoreAssetsGeneratorOptions.html",[0,0.14,2,1.101,3,0.068,4,0.06,5,0.068,10,0.17,11,0.223,12,0.887,16,0.204,17,0.006,19,0.197,27,0.081,88,0.005,89,0.005,115,5.932,145,5.355,146,5.658,147,4.888,148,4.118,149,6.544,150,8.747,151,6.057,152,1.297,153,7.407,154,4.888,155,6.356,156,5.932]],["title/interfaces/EntityStoreSelectors.html",[0,0.079,287,3.781]],["body/interfaces/EntityStoreSelectors.html",[0,0.138,2,0.915,3,0.057,4,0.05,5,0.057,10,0.142,11,0.199,16,0.198,17,0.006,19,0.229,27,0.08,29,1.149,68,2.014,88,0.004,89,0.004,114,2.188,115,5.746,119,6.711,120,4.064,121,6.742,122,3.51,123,4.801,124,3.238,126,5.178,128,2.687,130,4.363,131,3.238,135,2.485,137,1.273,138,5.945,139,2.53,140,4.064,141,6.001,142,6.001,143,6.001,158,4.453,159,4.453,161,5.178,162,3.224,170,4.244,274,2.804,282,5.994,283,4.705,284,5.02,285,4.453,286,3.768,287,6.597,288,7.411,289,5.02,290,5.02,291,5.02]],["title/directives/FocusClickDirective.html",[292,0.725,293,2.304]],["body/directives/FocusClickDirective.html",[3,0.05,4,0.044,5,0.05,10,0.124,11,0.183,12,0.493,15,2.901,16,0.157,17,0.006,19,0.143,27,0.05,32,1.117,47,1.628,66,3.534,76,3.033,81,2.354,88,0.004,89,0.004,90,0.502,135,2.279,137,0.875,177,3.191,179,1.466,180,0.863,182,2.432,183,1.292,184,1.55,187,1.152,193,1.305,196,1.292,200,3.191,203,2.094,205,0.407,292,1.406,293,4.19,294,1.286,295,9.484,296,9.484,297,5.327,298,2.109,299,8.89,300,1.592,301,6.203,302,7.107,303,8.533,304,2.244,305,4.001,306,6.329,307,7.107,308,1.183,309,7.107,310,3.9,311,3.178,312,7.107,313,7.107,314,7.107,315,3.509,316,7.107,317,1.551,318,7.107,319,4.64,320,4.503,321,5.327,322,7.156,323,5.345,324,3.144,325,6.248,326,7.998,327,7.998,328,4.955,329,7.635,330,3.609,331,6.359,332,4.376,333,3.889,334,3.628,335,2.354,336,5.327,337,5.327,338,3.091,339,5.204,340,3.191,341,1.63,342,4.766,343,3.509,344,3.3,345,3.091,346,3.717,347,2.569,348,5.327,349,2.999,350,2.216,351,2.999,352,4.397,353,7.107,354,6.359,355,5.327,356,5.327,357,3.9,358,3.3,359,5.327,360,5.327]],["title/directives/FormAccessorContainer.html",[292,0.725,361,2.304]],["body/directives/FormAccessorContainer.html",[2,0.604,3,0.037,4,0.033,5,0.037,10,0.093,11,0.15,12,0.699,15,1.637,16,0.166,17,0.006,19,0.225,21,2.403,26,2.081,27,0.037,32,1.205,34,2.484,35,4.883,42,1.172,49,1.274,57,3.469,61,1.785,66,1.773,73,1.444,83,1.81,88,0.003,89,0.003,90,0.378,91,4.511,94,3.589,96,0.946,99,5.67,100,4.813,101,1.98,103,3.589,106,2.433,109,1.417,122,3.075,180,1.222,183,1.06,184,1.475,187,1.065,193,1.848,196,1.456,203,2.965,205,0.307,206,1.73,250,2.681,251,3.589,272,0.983,292,0.865,294,0.969,300,1.455,304,2.791,308,1.036,317,1.685,335,1.773,347,4.031,350,3.138,361,2.749,362,8.839,363,8.652,364,8.839,365,4.012,366,3.036,367,3.239,368,3.864,369,1.732,370,5.832,371,5.832,372,5.832,373,3.333,374,6.871,375,5.832,376,4.012,377,4.257,378,6.871,379,1.59,380,5.263,381,5.832,382,7.12,383,5.041,384,5.835,385,6.9,386,8.839,387,5.315,388,5.832,389,7.556,390,7.556,391,4.012,392,2.881,393,7.543,394,5.832,395,5.315,396,5.832,397,4.012,398,4.012,399,3.897,400,4.012,401,4.012,402,3.613,403,5.832,404,4.511,405,5.832,406,5.832,407,4.012,408,2.689,409,5.832,410,5.832,411,5.218,412,2.605,413,4.012,414,4.012,415,4.012,416,5.832,417,4.012,418,5.832,419,6.871,420,4.012,421,7.543,422,4.012,423,4.012,424,2.328,425,2.578,426,3.191,427,4.012,428,2.578,429,4.012,430,4.012,431,2.136,432,2.259,433,4.012,434,4.012]],["title/interfaces/FormStateOptionsEntity.html",[0,0.079,390,4.034]],["body/interfaces/FormStateOptionsEntity.html",[0,0.123,2,1.145,3,0.071,4,0.062,5,0.071,10,0.177,11,0.228,12,0.898,16,0.196,17,0.005,27,0.071,29,1.483,88,0.005,89,0.005,390,7.332,392,2.479,435,7.607,436,7.607,437,8.676,438,9.697]],["title/pipes/HasObserversPipe.html",[174,1.473,439,4.373]],["body/pipes/HasObserversPipe.html",[3,0.064,4,0.056,5,0.064,12,0.635,16,0.151,17,0.006,19,0.184,27,0.078,29,1.238,44,1.958,47,1.832,66,3.027,73,2.465,88,0.004,89,0.004,90,0.787,109,1.275,136,2.796,174,2.515,176,3.553,177,4.103,179,1.886,180,1.458,182,2.856,183,1.245,184,1.416,185,3.749,187,0.845,193,1.678,196,1.245,200,5.391,203,2.693,204,4.566,205,0.524,206,2.033,298,2.033,320,5.067,439,8.381,440,8.346,441,7.467,442,6.13,443,9.367,444,7.467,445,8.845,446,6.851,447,6.851,448,8.346,449,4.578,450,6.851,451,6.851,452,6.851,453,4.578,454,6.13,455,6.851]],["title/pipes/IbanPipe.html",[174,1.473,456,4.373]],["body/pipes/IbanPipe.html",[3,0.063,4,0.056,5,0.063,12,0.627,15,2.763,16,0.149,17,0.006,19,0.182,27,0.063,32,1.25,44,1.944,47,1.687,88,0.004,89,0.004,90,0.638,152,1.264,174,2.496,176,3.511,177,4.055,179,1.863,180,1.45,182,2.835,183,1.23,184,1.303,185,3.704,186,5.537,187,0.835,190,2.279,192,6.066,193,1.658,196,1.23,200,4.962,203,2.661,204,4.533,205,0.517,206,2.009,223,5.587,308,0.876,456,8.347,457,6.769,458,9.329,459,6.769,460,6.769,461,6.769,462,6.769,463,6.769,464,6.769,465,6.769,466,6.769,467,3.811,468,6.769,469,9.329,470,6.769,471,6.409,472,6.057,473,6.769,474,7.413,475,6.769,476,2.242,477,6.769]],["title/components/MockTourHolderComponent.html",[109,0.747,478,2.357]],["body/components/MockTourHolderComponent.html",[3,0.044,4,0.039,5,0.044,10,0.111,11,0.169,17,0.006,19,0.219,27,0.044,28,1.621,32,1.053,47,1.339,49,1.039,61,2.013,88,0.004,89,0.004,90,0.448,106,1.308,109,1.152,179,1.308,180,1.64,182,2.251,183,1.195,184,1.391,187,1.005,196,0.864,205,0.363,272,1.164,292,0.705,293,2.241,294,1.148,298,3.105,300,1.632,308,0.976,317,0.864,361,2.241,369,2.229,478,3.925,479,2.586,480,1.74,481,1.835,482,7.646,483,4.754,484,4.474,485,3.556,486,6.749,487,7.543,488,5.523,489,8.14,490,4.754,491,6.578,492,5.429,493,6.578,494,5.885,495,4.754,496,6.578,497,5.885,498,4.754,499,4.816,500,4.754,501,1.27,502,2.347,503,6.578,504,4.253,505,3.677,506,2.192,507,4.354,508,4.754,509,1.525,510,4.754,511,3.317,512,1.682,513,2.241,514,2.347,515,3.033,516,1.611,517,4.018,518,2.347,519,2.347,520,2.292,521,2.058,522,2.347,523,2.292,524,3.174,525,2.347,526,2.292,527,2.347,528,3.247,529,2.347,530,3.172,531,3.247,532,2.292,533,2.1,534,2.292,535,3.524,536,2.347,537,4.018,538,2.292,539,2.241,540,2.292,541,2.145,542,2.347,543,2.241,544,2.241,545,2.347,546,2.292,547,2.241,548,2.145,549,2.347,550,2.292,551,1.94,552,2.347,553,2.292,554,2.347,555,2.292,556,3.247,557,2.292,558,2.292,559,2.347,560,2.292,561,2.347,562,2.292,563,1.94,564,2.347,565,2.347,566,2.347,567,2.1,568,1.574,569,2.192,570,2.192,571,2.347,572,2.241,573,2.347,574,2.347,575,2.347,576,2.241,577,2.347,578,2.192,579,2.241,580,2.347,581,2.017,582,2.192,583,2.347,584,2.347,585,2.145,586,2.241,587,2.347,588,2.241,589,2.347,590,2.241,591,2.347,592,2.192,593,2.192,594,2.241,595,2.347,596,2.241,597,2.347,598,2.241,599,2.347,600,1.802,601,2.241,602,2.192,603,2.241,604,2.192,605,2.192,606,2.192,607,1.904,608,1.94,609,1.94,610,2.192,611,2.347,612,2.1,613,2.347,614,2.241,615,2.347,616,2.058,617,2.192,618,2.347,619,2.192,620,2.347,621,2.241,622,2.347,623,2.347]],["title/components/MockTourStepComponent.html",[109,0.747,520,2.357]],["body/components/MockTourStepComponent.html",[3,0.035,4,0.031,5,0.035,10,0.153,11,0.142,12,0.513,16,0.161,17,0.005,19,0.149,27,0.035,28,1.643,32,1.087,47,1.717,49,0.816,55,1.391,72,3.004,88,0.003,89,0.003,90,0.796,106,1.028,109,1.323,137,0.909,152,0.75,171,1.298,179,1.028,180,1.6,182,1.893,183,1.006,184,1.575,187,1.226,194,1.72,196,1.198,203,2.176,205,0.286,245,0.902,271,1.736,292,0.554,293,1.761,294,0.902,298,3.075,300,1.7,304,1.747,305,3.116,308,1.007,315,2.732,317,1.198,319,2.167,320,2.103,357,4.052,361,1.761,367,2.608,369,1.395,478,1.801,479,2.176,480,1.367,481,1.442,482,3.342,484,3.842,485,3.846,488,4.052,499,2.735,507,3.842,509,1.198,511,6.045,512,2.883,514,1.844,515,2.551,516,1.996,517,3.598,518,1.844,519,1.844,520,3.515,521,4.245,522,1.844,523,1.801,524,3.095,525,1.844,526,1.801,527,1.844,528,2.732,529,1.844,530,2.668,531,2.732,532,1.801,533,1.65,534,1.801,535,3.155,536,1.844,537,3.598,538,1.801,539,1.761,540,1.801,541,1.685,542,1.844,543,1.761,544,1.761,545,1.844,546,1.801,547,1.761,548,1.685,549,1.844,550,1.801,551,1.524,552,1.844,553,1.801,554,1.844,555,1.801,556,2.732,557,1.801,558,1.801,559,1.844,560,1.801,561,1.844,562,1.801,563,1.524,564,1.844,565,1.844,566,1.844,567,1.65,568,1.237,569,1.722,570,1.722,571,1.844,572,1.761,573,1.844,574,1.844,575,1.844,576,1.761,577,1.844,578,1.722,579,1.761,580,1.844,581,1.585,582,1.722,583,1.844,584,1.844,585,1.685,586,1.761,587,1.844,588,1.761,589,1.844,590,1.761,591,1.844,592,1.722,593,1.722,594,1.761,595,1.844,596,1.761,597,1.844,598,1.761,599,1.844,600,1.416,601,1.761,602,1.722,603,1.761,604,1.722,605,1.722,606,1.722,607,1.496,608,1.524,609,1.524,610,1.722,611,1.844,612,1.65,613,1.844,614,1.761,615,1.844,616,4.343,617,1.722,618,1.844,619,1.722,620,1.844,621,1.761,622,1.844,623,1.844,624,3.735,625,6.522,626,6.522,627,5.086,628,4.951,629,2.797,630,4.951,631,5.337,632,4.951,633,4.951,634,3.825,635,4.405,636,5.099,637,4.281,638,5.099,639,5.594,640,5.534,641,4.951,642,2.551,643,4.951,644,5.534,645,5.534,646,5.534,647,5.534,648,3.116,649,5.534,650,2.732,651,5.534,652,5.534,653,5.534,654,2.176,655,4.281,656,3.735,657,3.735,658,2.889,659,3.735,660,2.044,661,2.496,662,3.342,663,1.889,664,3.735,665,3.083,666,3.342,667,3.735,668,3.342,669,2.606,670,1.937,671,3.735,672,1.801,673,2.044,674,3.735]],["title/directives/NgxAbstractTableCellDirective.html",[292,0.725,567,2.16]],["body/directives/NgxAbstractTableCellDirective.html",[3,0.039,4,0.034,5,0.039,10,0.097,11,0.154,12,0.652,16,0.193,17,0.006,19,0.189,27,0.039,32,1.185,34,1.205,38,3.245,47,1.433,48,3.708,49,1.681,54,1.889,72,1.616,81,2.894,88,0.003,89,0.003,90,0.664,96,0.525,106,1.655,137,1.537,152,0.815,179,1.152,180,1.246,182,2.057,183,1.093,184,1.615,187,1.207,193,1.025,196,1.279,205,0.32,231,3.064,234,2.428,237,3.046,292,0.892,294,1.01,298,1.784,300,1.646,304,1.898,306,3.863,308,1.178,311,2.257,317,1.541,319,4.083,320,3.962,333,3.85,341,1.84,345,3.489,346,4.196,349,2.356,379,1.418,512,2.49,524,1.959,535,3.783,567,2.657,568,1.991,660,3.29,663,2.117,675,4.185,676,5.794,677,5.153,678,5.153,679,6.422,680,5.966,681,5.745,682,5.153,683,4.911,684,5.45,685,6.922,686,5.966,687,5.951,688,5.951,689,4.651,690,6.013,691,4.911,692,6.013,693,3.962,694,4.521,695,4.911,696,5.444,697,5.444,698,5.444,699,5.444,700,3.175,701,6.013,702,1.962,703,6.013,704,4.185,705,3.863,706,5.615,707,4.185,708,4.403,709,4.366,710,3.601,711,4.651,712,5.45,713,4.185,714,2.968,715,2.717,716,4.185,717,4.314,718,4.185,719,4.185,720,4.196,721,4.185,722,4.185,723,4.185,724,1.812,725,3.745,726,3.745,727,3.238,728,3.064,729,1.301,730,6.013,731,6.296,732,2.689,733,4.185,734,4.185,735,8.148,736,4.185,737,4.185,738,4.185,739,4.185]],["title/directives/NgxAccessibleAbstractDragAndDropItemDirective.html",[292,0.725,569,2.254]],["body/directives/NgxAccessibleAbstractDragAndDropItemDirective.html",[3,0.051,4,0.045,5,0.051,10,0.128,11,0.186,12,0.831,15,2.237,16,0.19,17,0.006,19,0.195,27,0.051,29,0.813,32,1.012,81,1.815,88,0.004,89,0.004,90,0.765,96,0.908,122,2.822,137,1.19,171,1.699,180,0.888,183,1.316,184,1.573,187,1.221,193,1.343,196,1.709,205,0.419,239,6.48,271,1.907,292,1.074,294,1.323,300,1.261,305,4.078,308,0.937,315,3.576,317,1.755,325,4.013,330,4.049,367,3.414,379,1.01,385,5.978,476,2.399,501,1.465,516,1.774,568,3.198,569,3.339,593,4.587,639,5.49,670,4.208,702,1.268,724,1.651,740,6.696,741,6.275,742,6.275,743,4.904,744,5.978,745,7.243,746,7.243,747,7.243,748,8.112,749,3.591,750,6.161,751,7.721,752,5.303,753,7.258,754,7.258,755,6.275,756,5.421,757,5.303,758,7.243,759,6.676,760,7.243,761,5.481,762,2.905,763,5.767,764,4.488,765,5.481,766,4.013,767,5.481,768,5.481,769,5.481,770,4.013,771,4.013,772,5.481,773,5.603,774,7.243,775,5.481,776,5.481,777,5.481]],["title/classes/NgxAccessibleDragAndDropAbstractService.html",[90,0.461,778,4.034]],["body/classes/NgxAccessibleDragAndDropAbstractService.html",[3,0.036,4,0.031,5,0.036,10,0.089,11,0.145,12,0.683,16,0.2,17,0.006,19,0.229,26,1.986,27,0.036,28,1.069,32,0.535,34,1.926,41,2.657,42,2.298,44,1.93,48,2.392,49,2.051,68,1.867,73,2.028,88,0.003,89,0.003,90,0.361,92,2.373,96,1.223,99,3.27,106,2.264,137,1.292,152,1.259,162,2.345,174,1.698,177,3.376,180,0.913,183,1.024,184,1.401,187,1.015,193,1.381,196,1.495,205,0.293,238,1.452,249,5.148,268,2.768,271,2.166,272,0.938,300,1.164,308,1.017,311,1.228,334,3.011,345,3.27,350,2.345,369,1.86,377,3.492,379,1.449,426,4.037,453,4.47,467,4.427,479,2.216,501,1.023,516,1.926,568,2.443,650,4.06,672,1.847,714,2.783,724,2.223,729,1.19,740,7.018,741,6.578,742,7.187,762,2.251,764,2.373,778,6.49,779,3.829,780,2.61,781,4.571,782,7.668,783,4.037,784,5.637,785,5.637,786,6.689,787,6.689,788,5.637,789,5.637,790,5.174,791,6.689,792,2.629,793,3.829,794,5.707,795,3.933,796,3.001,797,6.689,798,5.637,799,3.829,800,3.706,801,7.035,802,5.637,803,3.153,804,3.829,805,4.127,806,5.637,807,4.36,808,2.373,809,4.652,810,5.637,811,5.707,812,3.829,813,4.599,814,2.962,815,3.829,816,5.637,817,5.496,818,3.829,819,3.829,820,3.829,821,2.294,822,3.66,823,3.469,824,1.692,825,2.559,826,4.144,827,5.637,828,2.804,829,3.829,830,3.084,831,3.084,832,7.035,833,3.766,834,4.298,835,3.084,836,5.637,837,2.672,838,2.962,839,3.829,840,5.463,841,3.829,842,2.46,843,3.829,844,2.962,845,2.962,846,3.829,847,6.689,848,6.689,849,6.689,850,2.962,851,3.829,852,5.637,853,5.637,854,3.829,855,5.637,856,2.962,857,3.829,858,3.829,859,3.829,860,3.829,861,3.829,862,3.829,863,2.701,864,3.829,865,2.294,866,3.829,867,3.829,868,2.804,869,3.829,870,3.829,871,2.095,872,3.161,873,3.829,874,3.829]],["title/interfaces/NgxAccessibleDragAndDropBaseMessage.html",[0,0.079,875,3.781]],["body/interfaces/NgxAccessibleDragAndDropBaseMessage.html",[0,0.146,2,1.044,3,0.065,4,0.057,5,0.065,10,0.161,11,0.216,16,0.222,17,0.006,18,6.625,27,0.088,28,1.784,88,0.005,89,0.005,96,0.869,152,1.226,190,3.166,273,2.856,762,2.334,764,4.296,811,5.364,828,5.078,844,5.364,845,5.364,850,6.504,856,6.504,865,4.153,875,7.276,876,5.724,877,5.724,878,7.468,879,5.724,880,5.724,881,5.724,882,5.724,883,5.724,884,5.724,885,7.468,886,5.724,887,5.364,888,5.724,889,5.724,890,5.724,891,5.724]],["title/directives/NgxAccessibleDragAndDropContainerDirective.html",[292,0.725,570,2.254]],["body/directives/NgxAccessibleDragAndDropContainerDirective.html",[3,0.061,4,0.053,5,0.061,10,0.224,11,0.208,12,0.748,17,0.006,19,0.175,27,0.061,32,1.128,47,1.645,57,3.497,88,0.004,89,0.004,90,0.613,96,0.815,106,2.224,179,1.789,182,2.764,184,1.517,187,0.997,205,0.497,292,1.43,294,1.569,298,2.397,300,1.679,308,1.045,311,2.591,341,1.989,570,3.725,663,4.086,741,6.801,742,7.563,782,7.591,783,4.42,794,6.25,865,4.839,892,7.866,893,6.499,894,7.228,895,7.228,896,6.668,897,7.228,898,9.197,899,7.228,900,4.67,901,7.591,902,8.079,903,6.499,904,6.25,905,8.079,906,6.499]],["title/directives/NgxAccessibleDragAndDropHostDirective.html",[292,0.725,572,2.304]],["body/directives/NgxAccessibleDragAndDropHostDirective.html",[3,0.044,4,0.039,5,0.044,10,0.214,11,0.167,12,0.788,16,0.179,17,0.006,19,0.202,27,0.044,32,1.188,34,1.876,44,1.1,47,1.648,49,1.025,50,5.094,57,2.821,75,4.355,88,0.004,89,0.004,90,0.442,96,1.172,135,1.504,152,1.015,179,1.291,180,1.213,182,2.23,183,1.184,184,1.583,187,1.154,190,2.521,193,1.834,196,1.6,205,0.359,206,1.934,245,1.132,271,2.131,292,1.305,294,1.132,298,1.934,300,1.68,308,1.1,317,1.6,334,2.66,341,1.435,369,1.888,379,1.201,408,3.731,501,1.253,513,2.211,569,3.731,570,3.453,572,3.072,634,4.695,693,2.64,715,2.516,741,7.323,742,7.857,749,3.367,751,5.831,762,2.963,778,3.871,782,8.12,783,3.566,792,1.964,865,4.847,892,8.47,894,5.831,895,5.831,896,5.379,897,5.831,899,5.831,901,5.379,904,5.041,907,4.69,908,4.486,909,8.093,910,8.504,911,7.489,912,6.517,913,6.517,914,6.517,915,4.69,916,6.517,917,4.69,918,3.669,919,3.38,920,4.69,921,6.517,922,4.69,923,6.517,924,6.517,925,4.69,926,6.517,927,4.69,928,6.517,929,5.379,930,6.517,931,4.69,932,5.379,933,4.69,934,4.69,935,4.196,936,4.69,937,4.69,938,4.69,939,4.69,940,4.69,941,4.69,942,4.69,943,4.69]],["title/interfaces/NgxAccessibleDragAndDropMessageRecord.html",[0,0.079,828,3.579]],["body/interfaces/NgxAccessibleDragAndDropMessageRecord.html",[0,0.141,2,0.964,3,0.06,4,0.053,5,0.06,10,0.149,11,0.206,16,0.227,17,0.006,18,4.691,27,0.085,28,1.215,88,0.004,89,0.004,96,1.147,144,5.116,152,1.346,190,3.08,273,2.023,509,3.082,762,3.08,764,5.67,811,4.956,828,5.863,844,7.079,845,7.079,850,7.287,856,7.287,865,5.481,875,6.757,876,5.288,877,5.288,878,8.045,879,5.288,880,5.288,881,5.288,882,5.288,883,5.288,884,5.288,885,7.21,886,5.288,887,4.956,888,5.288,889,5.288,890,5.288,891,5.288]],["title/interfaces/NgxAccessibleDragAndDropMoveEvent.html",[0,0.079,887,3.781]],["body/interfaces/NgxAccessibleDragAndDropMoveEvent.html",[0,0.145,2,1.022,3,0.063,4,0.056,5,0.063,10,0.158,11,0.213,16,0.22,17,0.006,18,4.972,27,0.087,28,1.288,88,0.004,89,0.004,96,0.851,152,1.215,190,3.429,273,2.144,762,2.285,764,4.207,811,5.252,828,4.972,844,5.252,845,5.252,850,6.421,856,6.421,865,4.067,875,6.935,876,5.604,877,5.604,878,7.399,879,5.604,880,5.604,881,5.604,882,5.604,883,5.604,884,5.604,885,7.399,886,5.604,887,6.421,888,7.708,889,7.708,890,7.708,891,7.708]],["title/components/NgxAccordionComponent.html",[109,0.747,523,2.357]],["body/components/NgxAccordionComponent.html",[3,0.031,4,0.027,5,0.031,10,0.203,11,0.13,12,0.568,16,0.184,17,0.006,19,0.185,27,0.031,28,0.958,32,0.856,34,1.974,42,2.004,44,1.185,49,1.825,50,5.229,57,2.187,61,2.098,66,2.232,74,1.114,75,4.583,88,0.003,89,0.003,90,0.476,96,0.86,109,0.936,152,0.83,179,0.911,180,1.593,183,0.918,184,1.494,187,1.077,193,1.501,196,1.246,203,1.301,205,0.253,206,1.499,236,2.423,271,2.133,272,0.81,292,0.491,293,1.56,294,0.799,298,3.058,304,1.595,308,0.793,311,2.199,317,1.472,330,2.279,334,2.062,341,1.546,361,1.56,366,2.708,368,3.307,369,1.963,373,3.03,392,1.646,408,2.329,412,3.456,426,1.81,476,1.096,478,1.595,479,1.986,480,1.211,481,1.277,484,2.494,485,2.102,507,3.67,509,1.62,514,1.633,515,2.329,516,1.237,517,3.385,518,1.633,519,1.633,520,1.595,521,1.432,522,1.633,523,3.307,524,3.054,525,1.633,526,4.21,527,4.785,528,2.494,529,1.633,530,2.436,531,2.494,532,1.595,533,1.462,534,1.595,535,2.969,536,1.633,537,3.385,538,1.595,539,1.56,540,1.595,541,1.493,542,1.633,543,1.56,544,1.56,545,1.633,546,1.595,547,1.56,548,1.493,549,1.633,550,1.595,551,1.35,552,1.633,553,1.595,554,1.633,555,1.595,556,2.494,557,1.595,558,1.595,559,1.633,560,1.595,561,1.633,562,1.595,563,1.35,564,1.633,565,1.633,566,1.633,567,1.462,568,1.096,569,1.525,570,1.525,571,1.633,572,1.56,573,1.633,574,1.633,575,1.633,576,1.56,577,1.633,578,1.525,579,1.56,580,1.633,581,1.404,582,1.525,583,1.633,584,1.633,585,1.493,586,1.56,587,1.633,588,1.56,589,1.633,590,1.56,591,1.633,592,1.525,593,1.525,594,1.56,595,1.633,596,1.56,597,1.633,598,1.56,599,1.633,600,1.255,601,1.56,602,1.525,603,1.56,604,1.525,605,1.525,606,1.525,607,1.325,608,1.35,609,1.35,610,1.525,611,1.633,612,1.462,613,1.633,614,1.56,615,1.633,616,1.432,617,1.525,618,1.633,619,1.525,620,1.633,621,1.56,622,1.633,623,1.633,709,3.768,724,1.522,729,1.028,762,3.177,801,2.96,823,1.716,824,2.232,830,1.525,831,1.525,838,2.559,865,4.107,944,3.309,945,4.169,946,3.699,947,2.844,948,3.908,949,4.52,950,3.246,951,3.699,952,5.482,953,6.127,954,5.759,955,5.051,956,5.051,957,3.376,958,2.409,959,6.127,960,3.385,961,5.051,962,3.937,963,5.66,964,4.699,965,5.714,966,3.309,967,3.908,968,5.482,969,3.309,970,5.051,971,3.309,972,2.931,973,5.051,974,3.309,975,3.376,976,3.309,977,4.249,978,3.309,979,3.908,980,3.309,981,2.423,982,3.246,983,3.309,984,3.309,985,3.309,986,1.762,987,3.309,988,3.309,989,3.908,990,1.863,991,2.211,992,3.309,993,3.309,994,3.309,995,3.309,996,3.309,997,3.309,998,3.309,999,3.309,1000,3.309,1001,3.309,1002,4.169,1003,1.078,1004,3.309,1005,3.309,1006,3.309,1007,2.62,1008,2.309,1009,3.699,1010,5.051,1011,3.309,1012,3.309,1013,1.92,1014,3.309,1015,2.96,1016,3.309,1017,3.309]],["title/components/NgxAccordionItemComponent.html",[109,0.747,526,2.357]],["body/components/NgxAccordionItemComponent.html",[3,0.024,4,0.021,5,0.024,7,3.101,10,0.059,11,0.105,12,0.601,15,1.031,16,0.182,17,0.006,19,0.159,27,0.024,28,0.775,29,1.029,32,1.175,34,1.176,36,1.522,39,2.739,42,0.738,44,1.207,49,1.597,81,1.353,88,0.002,89,0.002,90,0.385,96,0.645,109,0.786,122,2.646,137,0.971,152,0.553,162,1.051,179,0.695,180,1.55,183,0.742,184,1.551,187,1.177,193,1.589,196,1.5,205,0.193,206,1.212,231,1.85,271,1.709,292,0.375,293,1.191,294,0.61,298,3.011,300,1.66,301,5.76,304,1.29,305,2.3,306,1.623,308,1.122,310,2.991,311,2.927,315,2.917,317,1.63,330,4.266,334,1.667,340,1.513,341,0.773,345,2.37,346,1.763,354,2.26,361,1.191,366,2.273,368,1.97,369,2.215,373,2.611,379,0.753,392,2.479,402,3.187,426,1.382,449,2.73,453,5.084,476,1.353,478,1.218,479,1.606,480,0.925,481,0.975,484,2.017,485,1.7,501,0.675,507,3.272,509,2.081,512,1.445,514,1.247,515,2.724,516,1.7,517,2.917,518,1.247,519,1.247,520,1.218,521,1.094,522,1.247,523,2.849,524,2.895,525,1.247,526,2.849,527,4.847,528,2.017,529,1.247,530,1.97,531,2.017,532,1.218,533,1.116,534,1.218,535,2.558,536,1.247,537,2.917,538,1.218,539,1.191,540,1.218,541,1.14,542,1.247,543,1.191,544,1.191,545,1.247,546,1.218,547,1.191,548,1.14,549,1.247,550,1.218,551,1.031,552,1.247,553,1.218,554,1.247,555,1.218,556,2.017,557,1.218,558,1.218,559,1.247,560,1.218,561,1.247,562,1.218,563,1.031,564,1.247,565,1.247,566,1.247,567,1.116,568,0.837,569,1.165,570,1.165,571,1.247,572,1.191,573,1.247,574,1.247,575,1.247,576,1.191,577,1.247,578,1.165,579,1.191,580,1.247,581,1.072,582,1.165,583,1.247,584,1.247,585,1.14,586,1.191,587,1.247,588,1.191,589,1.247,590,1.191,591,1.247,592,1.165,593,1.165,594,1.191,595,1.247,596,1.191,597,1.247,598,1.191,599,1.247,600,0.958,601,1.191,602,1.165,603,1.191,604,1.165,605,1.165,606,1.165,607,1.012,608,1.031,609,1.031,610,1.165,611,1.247,612,1.116,613,1.247,614,1.191,615,1.247,616,1.094,617,1.165,618,1.247,619,1.165,620,1.247,621,1.191,622,1.247,623,1.247,634,3.428,635,3.949,669,4.528,670,1.31,683,3.589,702,1.818,714,1.247,717,1.247,724,2.292,749,1.051,750,4.336,752,2.991,756,2.73,762,3.337,763,2.73,766,2.991,825,1.688,826,3.661,830,1.165,831,1.165,908,3.081,945,3.372,946,2.991,947,2.3,948,3.16,949,3.655,950,2.625,951,2.991,954,4.02,962,1.623,963,2.085,964,3.428,965,4.571,967,6.508,972,2.37,981,1.85,1018,9.572,1019,2.26,1020,3.589,1021,2.3,1022,4.245,1023,3.655,1024,3.372,1025,4.085,1026,2.984,1027,4.602,1028,5.909,1029,5.287,1030,4.245,1031,5.144,1032,4.085,1033,4.085,1034,4.123,1035,5.909,1036,4.085,1037,3.655,1038,3.655,1039,4.602,1040,4.602,1041,4.085,1042,2.526,1043,4.085,1044,2.526,1045,4.085,1046,2.668,1047,4.085,1048,4.085,1049,4.085,1050,3.655,1051,4.085,1052,3.655,1053,3.655,1054,2.526,1055,5.909,1056,2.526,1057,4.245,1058,3.655,1059,2.526,1060,2.896,1061,5.355,1062,2.526,1063,2.526,1064,3.372,1065,2.526,1066,4.085,1067,2.526,1068,4.085,1069,3.655,1070,2.984,1071,2.37,1072,2.526,1073,3.655,1074,2.526,1075,4.085,1076,2.526,1077,4.571,1078,2.526,1079,4.085,1080,2.526,1081,2.119,1082,2.526,1083,2.526,1084,4.085,1085,2.526,1086,4.245,1087,3.372,1088,2.526,1089,4.085,1090,2.526,1091,1.345,1092,1.763,1093,1.763,1094,2.526,1095,5.287,1096,5.144,1097,5.144,1098,5.909,1099,2.526,1100,2.526,1101,2.085,1102,1.345,1103,1.565,1104,2.526,1105,2.526,1106,2.526,1107,2.26,1108,2.526,1109,2.526,1110,1.466,1111,1.623,1112,1.382,1113,4.085,1114,2.26,1115,2.526,1116,2.526,1117,2.526,1118,1.688,1119,1.954]],["title/pipes/NgxAriaSortPipe.html",[174,1.473,1120,4.034]],["body/pipes/NgxAriaSortPipe.html",[3,0.065,4,0.057,5,0.065,12,0.64,16,0.199,17,0.006,19,0.243,27,0.065,32,1.172,42,2.021,44,1.969,47,1.708,88,0.005,89,0.005,90,0.652,144,4.468,174,2.529,176,3.586,179,1.903,180,1.463,182,2.871,183,1.256,185,3.783,186,5.608,187,0.853,193,1.693,196,1.256,204,4.592,205,0.528,206,2.051,479,2.718,567,3.708,676,5.412,728,6.145,729,2.149,1120,6.926,1121,8.392,1122,8.392,1123,6.913,1124,8.392,1125,6.913,1126,5.598,1127,8.085,1128,8.085,1129,6.186,1130,6.913,1131,6.913]],["title/injectables/NgxAuthenticatedHttpClient.html",[259,1.407,1132,3.781]],["body/injectables/NgxAuthenticatedHttpClient.html",[3,0.027,4,0.024,5,0.027,10,0.067,11,0.117,12,0.909,16,0.195,17,0.006,19,0.198,22,6.175,23,2.233,27,0.027,29,1.377,32,1.076,34,2.803,40,7.344,42,0.844,44,1.873,47,1.954,49,0.631,54,1.303,88,0.002,89,0.002,90,0.272,96,1.001,101,2.775,118,1.788,137,1.432,152,1.31,161,4.634,174,0.87,180,1.248,183,0.826,184,1.46,187,1.037,193,2.135,194,2.885,196,1.4,205,0.221,259,1.308,261,1.225,268,2.747,272,0.707,273,2.189,300,0.978,308,1.209,324,3.426,369,2.07,379,1.606,501,0.771,702,2.016,729,0.897,781,2.816,805,3.327,808,5.477,822,1.579,958,2.21,1132,3.515,1133,8.572,1134,9.508,1135,8.572,1136,2.887,1137,4.544,1138,2.486,1139,5.392,1140,2.486,1141,3.751,1142,4.544,1143,5.981,1144,4.544,1145,4.066,1146,4.639,1147,5.62,1148,4.544,1149,5.723,1150,6.203,1151,5.077,1152,4.544,1153,2.887,1154,9.794,1155,9.794,1156,9.82,1157,2.887,1158,8.715,1159,6.374,1160,7.682,1161,6.942,1162,8.306,1163,6.742,1164,6.742,1165,2.887,1166,2.887,1167,4.544,1168,4.544,1169,2.887,1170,2.887,1171,4.544,1172,2.887,1173,2.887,1174,7.807,1175,2.887,1176,2.887,1177,2.887,1178,2.887,1179,2.887,1180,4.066,1181,2.887,1182,4.544,1183,2.887,1184,1.303,1185,2.233,1186,1.497,1187,1.039,1188,5.62,1189,2.887,1190,2.887,1191,2.887,1192,7.363,1193,2.887,1194,7.363,1195,5.62,1196,2.887,1197,2.887,1198,5.62,1199,2.887,1200,2.583,1201,2.383,1202,2.887,1203,2.887,1204,2.887,1205,2.887,1206,2.887,1207,2.887,1208,5.62,1209,2.887,1210,2.887]],["title/interfaces/NgxAuthenticatedHttpClientConfiguration.html",[0,0.079,1185,3.781]],["body/interfaces/NgxAuthenticatedHttpClientConfiguration.html",[0,0.129,2,0.955,3,0.059,4,0.052,5,0.059,10,0.148,11,0.204,12,0.931,15,3.912,16,0.207,17,0.006,19,0.234,27,0.074,37,2.158,88,0.004,89,0.004,101,3.929,106,2.394,118,3.931,137,1.043,148,4.481,152,0.86,205,0.485,245,1.532,255,2.692,338,4.618,379,1.603,408,3.669,431,4.237,780,2.245,947,3.572,1132,7.266,1139,5.828,1143,5.319,1146,7.526,1159,6.554,1160,6.157,1161,5.554,1164,7.054,1185,6.727,1211,5.677,1212,5.677,1213,8.159,1214,8.575,1215,4.355,1216,4.355,1217,4.481,1218,8.159,1219,7.178,1220,4.767,1221,4.646,1222,5.677,1223,5.237,1224,4.24,1225,5.677]],["title/interfaces/NgxAuthenticatedRoute.html",[0,0.079,1226,4.373]],["body/interfaces/NgxAuthenticatedRoute.html",[0,0.143,2,0.994,3,0.062,4,0.054,5,0.062,7,2.802,10,0.154,11,0.227,12,0.756,16,0.204,17,0.006,19,0.178,27,0.076,28,1.754,29,1.313,47,1.661,76,2.503,88,0.004,89,0.004,96,0.828,106,2.246,144,4.344,152,1.105,171,1.914,173,4.242,308,1.055,324,2.596,358,4.091,379,1.504,702,2.048,1143,4.412,1220,4.887,1226,7.922,1227,6.602,1228,6.602,1229,8.159,1230,3.681,1231,6.734,1232,5.917,1233,4.242,1234,6.734,1235,8.159,1236,4.607,1237,6.734,1238,5.449,1239,6.734,1240,8.159,1241,4.834,1242,6.734,1243,5.449,1244,6.602,1245,5.907,1246,6.602,1247,7.3,1248,5.907,1249,3.955,1250,5.907,1251,5.907,1252,4.834,1253,6.602]],["title/classes/NgxAuthenticationAbstractService.html",[90,0.461,1220,2.928]],["body/classes/NgxAuthenticationAbstractService.html",[3,0.025,4,0.022,5,0.025,10,0.063,11,0.111,12,0.794,16,0.201,17,0.006,19,0.145,27,0.025,28,1.597,29,1.062,32,1.049,34,2.374,42,1.261,44,2.115,47,1.588,49,1.873,55,2.906,61,2.387,64,3.225,72,3.541,88,0.002,89,0.002,90,0.255,92,1.676,96,1.008,99,2.504,106,1.692,137,1.01,179,2.068,180,1.264,183,0.979,184,1.496,187,1.132,193,1.911,195,1.98,196,1.701,203,1.697,233,2.298,268,2.991,272,0.663,274,3.464,294,1.042,300,1.553,308,1.089,317,1.301,324,3.915,367,4.04,369,2.161,379,0.796,392,2.793,408,1.99,412,2.714,432,4.392,476,0.896,479,1.697,502,3.97,509,1.971,568,2.663,702,2.085,714,2.131,729,0.841,780,1.527,781,1.676,808,2.674,821,1.62,822,3.917,824,1.907,837,4.289,947,2.43,975,2.884,1003,0.881,1057,3.562,1069,5.499,1143,6.08,1163,5.538,1164,3.339,1200,8.207,1201,2.232,1220,2.585,1221,6.717,1234,7.571,1238,5.544,1239,6.637,1243,5.544,1248,3.862,1254,2.705,1255,2.034,1256,4.316,1257,5.385,1258,5.385,1259,5.385,1260,5.385,1261,5.499,1262,6.147,1263,6.716,1264,5.073,1265,5.073,1266,5.385,1267,4.316,1268,5.385,1269,4.316,1270,5.385,1271,4.316,1272,5.893,1273,3.339,1274,2.705,1275,4.316,1276,2.705,1277,3.862,1278,2.705,1279,3.188,1280,2.034,1281,3.862,1282,6.147,1283,5.213,1284,6.147,1285,4.755,1286,3.562,1287,2.705,1288,3.862,1289,6.147,1290,2.705,1291,2.705,1292,2.705,1293,3.339,1294,2.705,1295,7.512,1296,2.705,1297,5.385,1298,2.705,1299,2.705,1300,5.385,1301,2.705,1302,2.705,1303,3.225,1304,3.339,1305,4.316,1306,7.801,1307,2.705,1308,6.147,1309,6.147,1310,6.716,1311,9.014,1312,2.705,1313,2.705,1314,4.316,1315,8.702,1316,2.705,1317,4.196,1318,5.385,1319,2.705,1320,2.705,1321,4.316,1322,7.512,1323,2.705,1324,2.705,1325,2.705,1326,2.705,1327,2.705,1328,2.705,1329,4.316,1330,2.42,1331,1.738,1332,2.092,1333,2.705,1334,4.316,1335,2.705,1336,2.705,1337,2.705,1338,5.385,1339,2.705,1340,2.705,1341,2.705,1342,4.316,1343,2.705,1344,2.705,1345,2.705,1346,2.705,1347,2.705,1348,4.316,1349,2.705,1350,2.705,1351,2.705,1352,2.42,1353,1.98,1354,2.232,1355,1.98,1356,2.705,1357,4.316,1358,2.705,1359,2.705,1360,2.705,1361,2.705,1362,2.705,1363,2.705,1364,2.705,1365,4.316,1366,2.705,1367,2.705,1368,2.705,1369,1.569,1370,2.232,1371,2.705]],["title/interfaces/NgxAuthenticationConfiguration.html",[0,0.079,1223,4.034]],["body/interfaces/NgxAuthenticationConfiguration.html",[0,0.131,2,0.984,3,0.061,4,0.054,5,0.061,10,0.152,11,0.208,12,0.894,15,2.668,16,0.213,17,0.006,19,0.237,27,0.076,37,2.499,88,0.004,89,0.004,96,0.819,101,3.227,106,2.426,118,4.05,137,1.332,148,3.68,152,0.885,205,0.5,245,1.578,255,3.44,338,3.792,379,1.625,408,3.013,431,3.48,780,3.26,947,4.565,1132,7.129,1139,4.786,1143,4.368,1146,5.395,1159,6.15,1160,5.056,1161,4.561,1164,6.272,1185,7.129,1211,5.848,1212,5.848,1213,5.848,1214,7.254,1215,3.576,1216,3.576,1217,3.68,1218,7.254,1219,7.275,1220,5.279,1221,5.937,1222,7.254,1223,6.692,1224,5.418,1225,8.245]],["title/injectables/NgxBroadcastChannelService.html",[259,1.407,1372,4.373]],["body/injectables/NgxBroadcastChannelService.html",[3,0.037,4,0.032,5,0.037,10,0.092,11,0.148,12,0.736,16,0.198,17,0.006,19,0.183,27,0.037,32,0.803,34,2.391,41,2.711,42,1.15,44,2.012,49,0.86,61,2.079,64,4.07,86,2.882,88,0.003,89,0.003,90,0.371,96,1.041,98,3.238,102,2.839,138,3.444,152,1.266,161,2.63,180,1.571,183,1.045,184,1.507,187,1.058,193,2.154,196,1.559,205,0.301,209,4.477,246,5.145,259,1.655,261,1.67,268,2.978,272,0.964,300,1.183,308,0.744,310,4.211,311,2.82,317,1.509,335,2.541,350,3.792,369,2.094,454,6.688,501,1.052,715,2.22,764,5.723,780,2.034,792,2.252,794,5.257,796,3.062,813,4.586,833,4.208,947,3.238,958,2.261,1140,4.09,1150,3.521,1160,4.449,1162,5.145,1186,2.041,1187,1.416,1215,2.153,1255,1.855,1288,6.688,1372,5.145,1373,8.792,1374,8.792,1375,3.935,1376,5.751,1377,9.747,1378,8.116,1379,5.145,1380,5.751,1381,3.943,1382,8.304,1383,8.304,1384,8.304,1385,8.576,1386,8.576,1387,5.751,1388,3.935,1389,5.145,1390,4.61,1391,9.341,1392,9.114,1393,5.751,1394,6.795,1395,3.935,1396,5.145,1397,5.751,1398,8.304,1399,3.935,1400,5.751,1401,4.211,1402,3.935,1403,3.935,1404,7.951,1405,5.751,1406,7.475,1407,3.935,1408,3.935,1409,5.751,1410,3.935,1411,4.449,1412,5.751,1413,3.444,1414,3.935,1415,2.153,1416,2.041,1417,5.145,1418,3.935,1419,1.814,1420,2.882,1421,6.688,1422,3.935,1423,8.792,1424,3.935,1425,7.475,1426,3.935,1427,3.935,1428,4.742,1429,3.044,1430,3.935,1431,5.751,1432,3.935]],["title/interfaces/NgxButtonConfiguration.html",[0,0.079,1433,4.034]],["body/interfaces/NgxButtonConfiguration.html",[0,0.098,2,0.915,3,0.057,4,0.05,5,0.057,10,0.142,11,0.199,12,0.944,16,0.224,17,0.006,19,0.209,27,0.084,37,2.102,88,0.004,89,0.004,96,0.762,106,2.61,109,1.372,114,3.51,152,1.155,205,0.465,230,6.396,245,1.468,308,1.284,339,7.055,392,2.525,515,3.573,516,1.898,581,2.581,629,3.619,863,2.226,900,3.825,1433,6.396,1434,6.082,1435,8.289,1436,8.483,1437,3.548,1438,9.481,1439,6.933,1440,8.034,1441,4.705,1442,5.441,1443,5.441,1444,5.441,1445,5.441,1446,6.082,1447,5.441,1448,5.441,1449,5.441,1450,6.082,1451,2.687]],["title/directives/NgxButtonDirective.html",[292,0.725,576,2.304]],["body/directives/NgxButtonDirective.html",[3,0.029,4,0.026,5,0.029,10,0.112,11,0.124,12,0.795,16,0.206,17,0.006,19,0.179,27,0.029,28,1.258,32,1.199,37,2.279,42,0.908,44,1.129,47,0.98,49,2.04,55,1.793,61,1.473,66,1.373,73,1.732,74,1.046,81,1.594,83,2.994,88,0.003,89,0.003,90,0.293,92,2.982,96,0.39,101,1.534,109,1.415,114,3.5,135,2.54,137,0.968,179,0.855,183,0.875,184,1.479,187,1.174,194,1.831,196,1.071,205,0.238,206,1.428,230,2.565,233,2.563,234,2.793,237,1.345,238,2.516,245,0.75,254,3.973,292,0.984,294,0.75,298,1.428,300,1.545,304,1.52,308,1.198,317,1.305,334,1.268,339,7.247,341,2.197,346,2.168,367,2.777,369,2.469,379,1.086,380,2.168,392,1.013,467,1.75,476,1.951,501,1.575,516,1.86,524,2.93,576,2.269,581,1.319,629,2.043,635,4.434,670,3.056,702,1.893,724,0.936,729,0.966,749,3.572,803,2.269,805,5.56,863,2.429,900,1.534,960,4.574,975,4.434,1003,1.92,1020,4.111,1030,5.925,1086,4.863,1087,3.973,1184,1.402,1293,2.404,1304,2.404,1390,3.84,1433,4.863,1435,8.28,1436,5.272,1437,3.159,1439,4.307,1440,2.78,1441,6.126,1442,2.78,1443,5.937,1444,4.307,1445,4.307,1447,2.78,1448,6.423,1449,4.307,1451,1.373,1452,3.107,1453,4.814,1454,4.814,1455,4.814,1456,6.635,1457,5.892,1458,5.892,1459,5.892,1460,5.892,1461,6.423,1462,4.448,1463,6.635,1464,6.635,1465,4.814,1466,3.317,1467,3.419,1468,4.814,1469,2.777,1470,4.814,1471,3.107,1472,3.107,1473,3.107,1474,4.314,1475,6.635,1476,4.814,1477,4.814,1478,4.814,1479,4.814,1480,6.635,1481,7.178,1482,3.107,1483,3.525,1484,4.814,1485,3.107,1486,3.724,1487,4.814,1488,3.107,1489,3.107,1490,5.553,1491,3.107,1492,5.937,1493,3.107,1494,4.814,1495,3.107,1496,2.982,1497,4.307,1498,3.107,1499,4.814,1500,3.107,1501,3.107,1502,2.717,1503,2.982,1504,3.107,1505,3.107,1506,3.107,1507,3.107,1508,3.107,1509,3.107,1510,3.107,1511,3.107,1512,4.814,1513,3.107,1514,2.565,1515,3.107,1516,3.107,1517,5.892,1518,3.107,1519,3.107,1520,3.107,1521,4.814,1522,3.107,1523,3.107,1524,3.107,1525,7.593,1526,6.635,1527,4.814,1528,3.107,1529,3.107,1530,2.565,1531,3.107,1532,3.107,1533,2.78,1534,5.892,1535,3.107,1536,3.107,1537,3.107,1538,3.107,1539,3.107]],["title/components/NgxConfigurableLayoutItemComponent.html",[109,0.747,532,2.357]],["body/components/NgxConfigurableLayoutItemComponent.html",[3,0.041,4,0.036,5,0.041,10,0.102,11,0.16,12,0.668,17,0.006,19,0.118,27,0.041,28,1.178,32,0.612,47,1.469,50,3.719,51,3.99,72,1.69,74,2.09,76,3.539,84,5.556,88,0.003,89,0.003,90,0.413,96,0.549,97,3.786,106,1.986,109,1.353,179,1.205,180,1.627,182,2.125,184,1.448,187,1.023,205,0.335,292,0.649,293,2.064,294,1.057,298,3.096,300,1.602,304,1.96,308,0.566,341,2.403,361,2.064,379,1.587,383,4.15,449,4.15,478,2.111,479,2.441,480,1.603,481,1.69,484,3.066,485,2.584,507,4.059,509,2.762,514,2.162,515,2.863,516,1.521,517,3.876,518,2.162,519,2.162,520,2.111,521,1.895,522,2.162,523,2.111,524,3.174,525,2.162,526,2.111,527,2.162,528,3.066,529,2.162,530,4.152,531,3.066,532,3.786,533,4.478,534,2.111,535,3.399,536,2.162,537,3.876,538,2.111,539,2.064,540,2.111,541,1.976,542,2.162,543,2.064,544,2.064,545,2.162,546,2.111,547,2.064,548,1.976,549,2.162,550,2.111,551,1.787,552,2.162,553,2.111,554,2.162,555,2.111,556,3.066,557,2.111,558,2.111,559,2.162,560,2.111,561,2.162,562,2.111,563,1.787,564,2.162,565,2.162,566,2.162,567,1.935,568,1.45,569,2.019,570,2.019,571,2.162,572,2.064,573,2.162,574,2.162,575,2.162,576,2.064,577,2.162,578,2.019,579,2.064,580,2.162,581,1.858,582,2.019,583,2.162,584,2.162,585,1.976,586,2.064,587,2.162,588,2.064,589,2.162,590,2.064,591,2.162,592,2.019,593,2.019,594,2.064,595,2.162,596,2.064,597,2.162,598,2.064,599,2.162,600,1.66,601,2.064,602,2.019,603,2.064,604,2.019,605,2.019,606,2.019,607,1.754,608,1.787,609,1.787,610,2.019,611,2.162,612,1.935,613,2.162,614,2.064,615,2.162,616,1.895,617,2.019,618,2.162,619,2.019,620,2.162,621,2.064,622,2.162,623,2.162,663,2.215,717,2.162,762,3.141,773,5.582,865,4.703,900,4.467,1019,3.918,1023,5.556,1092,3.055,1540,8.611,1541,8.611,1542,6.21,1543,3.62,1544,4.804,1545,4.804,1546,6.21,1547,6.21,1548,5.956,1549,7.216,1550,6.21,1551,4.378,1552,3.398]],["title/interfaces/NgxConfigurableLayoutItemDropEvent.html",[0,0.079,1553,4.034]],["body/interfaces/NgxConfigurableLayoutItemDropEvent.html",[0,0.136,2,1.039,3,0.064,4,0.057,5,0.064,10,0.161,11,0.215,16,0.221,17,0.006,27,0.09,29,1.427,76,2.617,88,0.005,89,0.005,152,0.935,190,3.039,301,4.817,512,2.442,516,2.3,681,4.435,706,5.802,1553,6.92,1554,6.176,1555,6.176,1556,8.403,1557,8.403,1558,7.752,1559,8.403,1560,8.403,1561,7.444,1562,8.079,1563,5.698,1564,5.698,1565,5.698,1566,5.698,1567,6.176,1568,4.817,1569,5.698]],["title/interfaces/NgxConfigurableLayoutItemEntity.html",[0,0.079,1561,3.781]],["body/interfaces/NgxConfigurableLayoutItemEntity.html",[0,0.138,2,1.065,3,0.066,4,0.058,5,0.066,10,0.165,11,0.219,12,0.788,16,0.217,17,0.006,27,0.09,29,1.476,76,3.591,88,0.005,89,0.005,152,1.236,190,2.381,301,6.608,512,2.503,516,1.733,681,4.546,706,4.546,1553,5.839,1554,6.33,1555,6.33,1556,6.33,1557,6.33,1558,5.839,1559,6.33,1560,7.614,1561,7.326,1562,6.33,1563,5.839,1564,5.839,1565,5.839,1566,5.839,1567,6.33,1568,4.937,1569,7.816]],["title/pipes/NgxConfigurableLayoutItemSizePipe.html",[174,1.473,1570,4.373]],["body/pipes/NgxConfigurableLayoutItemSizePipe.html",[3,0.053,4,0.061,5,0.053,12,0.531,16,0.183,17,0.006,19,0.201,27,0.053,28,1.087,29,0.85,32,0.8,34,2.386,42,1.674,44,2.19,47,1.853,48,3.164,49,1.811,50,4.965,51,6.106,55,2.778,74,1.928,88,0.004,89,0.004,90,0.54,96,0.718,106,2.282,109,1.139,144,3.97,174,2.247,176,2.972,179,1.577,180,1.343,182,2.551,183,1.041,185,4.08,187,0.707,193,1.403,196,1.506,203,2.253,204,4.08,205,0.438,206,1.7,218,4.432,237,2.48,308,0.965,379,1.056,474,5.126,509,2.392,512,3.106,524,2.43,530,3.596,533,3.88,642,3.438,702,1.325,715,2.212,729,1.781,792,2.247,840,3.681,962,3.681,1280,2.701,1545,4.432,1558,7.702,1561,5.768,1563,7.247,1564,6.154,1565,6.154,1566,6.154,1570,6.672,1571,7.457,1572,7.457,1573,5.729,1574,7.457,1575,5.729,1576,9.898,1577,5.729,1578,7.457,1579,7.702,1580,2.642,1581,4.729,1582,3.998,1583,6.154,1584,5.729,1585,7.856,1586,5.126,1587,3.432,1588,5.729,1589,3.55,1590,5.729,1591,5.729,1592,5.729,1593,5.729,1594,5.729,1595,5.729,1596,5.729,1597,5.729,1598,5.729]],["title/interfaces/NgxCookie.html",[0,0.079,1599,3.411]],["body/interfaces/NgxCookie.html",[0,0.15,2,0.907,3,0.056,4,0.049,5,0.056,10,0.14,11,0.198,12,0.929,16,0.212,17,0.006,19,0.162,27,0.088,29,1.444,76,2.285,88,0.004,89,0.004,152,1.39,171,1.414,180,1.449,190,3.113,308,0.779,792,1.816,1126,5.261,1187,2.168,1317,2.906,1419,2.778,1599,5.925,1600,4.412,1601,4.204,1602,6.552,1603,6.552,1604,5.98,1605,6.552,1606,6.552,1607,6.217,1608,6.217,1609,3.871,1610,5.64,1611,6.217,1612,4.646,1613,4.027,1614,3.871,1615,4.204,1616,4.027,1617,4.412,1618,4.027,1619,4.412,1620,3.496,1621,4.412,1622,4.412,1623,4.412,1624,4.027,1625,3.297,1626,5.64,1627,4.412,1628,4.412,1629,4.412,1630,4.412,1631,4.412,1632,4.412,1633,4.949,1634,5.148,1635,4.027,1636,4.412,1637,4.412]],["title/interfaces/NgxCookieChangedEvent.html",[0,0.079,1635,3.267]],["body/interfaces/NgxCookieChangedEvent.html",[0,0.153,2,0.966,3,0.06,4,0.053,5,0.06,10,0.149,11,0.206,16,0.208,17,0.006,19,0.173,27,0.09,29,1.425,76,2.433,88,0.004,89,0.004,144,4.267,152,1.385,171,1.881,180,1.039,190,2.942,308,0.83,792,1.933,1126,3.975,1187,2.309,1317,3.094,1419,2.958,1599,5.593,1600,4.698,1601,4.477,1602,4.698,1603,4.698,1604,4.288,1605,4.698,1606,4.698,1607,4.698,1608,4.698,1609,4.122,1610,5.869,1611,6.4,1612,4.783,1613,4.288,1614,4.122,1615,4.477,1616,4.288,1617,4.698,1618,4.288,1619,4.698,1620,3.723,1621,4.698,1622,4.698,1623,4.698,1624,4.288,1625,3.511,1626,5.869,1627,4.698,1628,4.698,1629,4.698,1630,4.698,1631,4.698,1632,4.698,1633,5.15,1634,5.841,1635,5.356,1636,6.704,1637,6.704]],["title/interfaces/NgxCookieConfiguration.html",[0,0.079,1624,3.267]],["body/interfaces/NgxCookieConfiguration.html",[0,0.148,2,0.87,3,0.054,4,0.047,5,0.054,10,0.135,11,0.193,12,0.948,16,0.219,17,0.006,19,0.156,27,0.087,29,1.503,76,2.192,88,0.004,89,0.004,152,1.369,171,1.356,180,0.936,190,3.073,308,0.748,792,1.742,1126,3.581,1187,3.17,1317,4.014,1419,2.665,1599,6.147,1600,4.232,1601,4.033,1602,4.232,1603,4.232,1604,3.863,1605,4.232,1606,4.232,1607,4.232,1608,4.232,1609,3.714,1610,5.491,1611,7.068,1612,4.555,1613,3.863,1614,3.714,1615,4.033,1616,3.863,1617,4.232,1618,3.863,1619,4.232,1620,3.354,1621,4.232,1622,4.232,1623,4.232,1624,5.012,1625,4.82,1626,6.849,1627,6.451,1628,6.451,1629,6.451,1630,6.451,1631,6.451,1632,6.451,1633,5.865,1634,5.012,1635,3.863,1636,4.232,1637,4.232]],["title/interfaces/NgxCookieEvent.html",[0,0.079,1634,3.267]],["body/interfaces/NgxCookieEvent.html",[0,0.153,2,0.981,3,0.061,4,0.054,5,0.061,10,0.152,11,0.208,16,0.179,17,0.006,19,0.175,27,0.09,29,1.431,76,2.471,88,0.004,89,0.004,152,1.379,171,1.529,180,1.056,190,2.963,308,0.843,792,1.964,1126,4.038,1187,2.345,1317,3.143,1419,3.005,1599,5.647,1600,4.772,1601,4.548,1602,4.772,1603,4.772,1604,4.355,1605,4.772,1606,4.772,1607,4.772,1608,4.772,1609,4.187,1610,6.741,1611,6.446,1612,4.816,1613,4.355,1614,4.187,1615,4.548,1616,4.355,1617,4.772,1618,4.355,1619,4.772,1620,3.781,1621,4.772,1622,4.772,1623,4.772,1624,4.355,1625,3.566,1626,5.926,1627,4.772,1628,4.772,1629,4.772,1630,4.772,1631,4.772,1632,4.772,1633,6.082,1634,5.883,1635,4.355,1636,4.772,1637,4.772]],["title/interfaces/NgxCookieLanguageConfiguration.html",[0,0.079,1616,3.267]],["body/interfaces/NgxCookieLanguageConfiguration.html",[0,0.151,2,0.934,3,0.058,4,0.051,5,0.058,10,0.144,11,0.202,12,0.838,16,0.214,17,0.006,19,0.167,27,0.089,29,1.413,76,2.353,88,0.004,89,0.004,144,4.179,152,1.393,171,1.456,180,1.005,190,2.898,308,1.17,792,1.87,1126,3.845,1187,2.233,1317,2.993,1419,3.969,1599,5.477,1600,4.544,1601,4.331,1602,4.544,1603,4.544,1604,4.148,1605,4.544,1606,4.544,1607,4.544,1608,4.544,1609,3.987,1610,5.747,1611,6.303,1612,4.71,1613,4.148,1614,3.987,1615,4.331,1616,5.245,1617,6.624,1618,5.753,1619,6.624,1620,5.249,1621,4.544,1622,4.544,1623,4.544,1624,4.148,1625,3.396,1626,5.747,1627,4.544,1628,4.544,1629,4.544,1630,4.544,1631,4.544,1632,4.544,1633,5.043,1634,5.245,1635,4.148,1636,4.544,1637,4.544]],["title/injectables/NgxCookieService.html",[259,1.407,1638,4.034]],["body/injectables/NgxCookieService.html",[3,0.023,4,0.02,5,0.023,7,1.049,10,0.058,11,0.103,12,0.759,16,0.205,17,0.006,19,0.173,27,0.023,32,1.235,34,2.448,37,2.115,41,1.892,42,2.279,44,2.074,49,2.038,54,3.267,57,1.737,61,2.452,66,1.092,68,0.818,72,0.954,73,2.308,81,1.329,88,0.002,89,0.002,90,0.233,96,1.005,137,1.397,152,1.288,162,2.108,174,1.209,180,1.587,183,0.729,184,1.564,187,1.138,193,2.008,194,1.813,196,1.456,205,0.189,206,1.191,209,1.48,233,2.137,249,2.8,259,1.155,261,1.049,268,2.824,272,0.605,273,1.842,300,1.688,308,1.061,311,2.936,317,1.519,324,2.293,335,1.773,338,2.328,369,2.272,377,1.531,379,1.183,412,3.632,476,2.276,486,2.211,501,0.66,502,3.167,660,2.773,702,1.59,714,1.981,724,0.745,729,0.768,780,2.901,796,2.137,808,1.531,809,2.04,817,4.839,822,3.192,830,1.85,831,1.85,833,1.391,962,2.578,964,2.328,977,4.965,1003,1.308,1186,1.282,1187,0.889,1215,1.352,1217,4.247,1255,1.165,1283,2.682,1331,3.256,1381,2.94,1390,2.03,1413,2.404,1415,2.773,1416,1.282,1419,1.139,1469,2.389,1580,1.85,1609,5.993,1613,1.651,1614,4.652,1615,4.07,1616,3.898,1624,3.898,1625,2.196,1633,6.32,1634,1.651,1635,1.651,1638,3.312,1639,2.471,1640,4.013,1641,3.312,1642,6.872,1643,5.067,1644,5.067,1645,5.067,1646,5.067,1647,5.067,1648,5.067,1649,5.067,1650,6.415,1651,5.067,1652,4.013,1653,4.013,1654,4.013,1655,4.013,1656,4.013,1657,4.013,1658,4.013,1659,4.013,1660,5.067,1661,5.833,1662,4.013,1663,2.471,1664,5.833,1665,7.029,1666,8.2,1667,4.013,1668,2.471,1669,4.013,1670,2.471,1671,4.013,1672,2.471,1673,4.013,1674,2.471,1675,4.815,1676,5.672,1677,4.013,1678,2.471,1679,2.773,1680,4.013,1681,2.471,1682,4.013,1683,4.815,1684,2.471,1685,2.471,1686,2.471,1687,3.312,1688,4.013,1689,4.013,1690,4.815,1691,2.471,1692,3.106,1693,4.013,1694,2.471,1695,5.032,1696,2.471,1697,4.013,1698,2.471,1699,4.815,1700,4.013,1701,4.013,1702,7.544,1703,2.471,1704,4.013,1705,4.013,1706,2.471,1707,3.591,1708,5.833,1709,3.312,1710,2.939,1711,2.471,1712,6.415,1713,4.013,1714,2.471,1715,3.591,1716,4.013,1717,2.471,1718,6.415,1719,4.013,1720,2.471,1721,2.486,1722,2.471,1723,2.471,1724,3.105,1725,2.04,1726,1.316,1727,2.04,1728,2.211,1729,2.211,1730,2.04,1731,1.651,1732,2.471,1733,1.22,1734,2.471,1735,2.471,1736,4.697,1737,2.471,1738,2.471,1739,2.471,1740,2.471,1741,4.534,1742,2.471,1743,2.471,1744,5.067,1745,2.471,1746,2.471,1747,5.067,1748,2.471,1749,2.471,1750,2.471,1751,4.013,1752,4.013,1753,2.471,1754,2.471,1755,2.471,1756,2.471,1757,2.471,1758,4.013,1759,2.471,1760,2.471,1761,2.471,1762,2.471,1763,2.471,1764,5.833,1765,4.013,1766,2.471,1767,2.471,1768,3.591,1769,3.105,1770,4.013,1771,4.013,1772,2.471]],["title/interfaces/NgxCookieValue.html",[0,0.079,1683,4.034]],["body/interfaces/NgxCookieValue.html",[0,0.124,2,1.155,3,0.072,4,0.063,5,0.072,10,0.179,11,0.229,16,0.197,17,0.005,27,0.072,32,1.358,88,0.005,89,0.005,152,1.279,180,1.575,273,2.981,1683,7.368,1773,7.671,1774,7.671]],["title/directives/NgxCookiesFallBackComponent.html",[292,0.725,578,2.254]],["body/directives/NgxCookiesFallBackComponent.html",[3,0.066,4,0.058,5,0.066,10,0.166,11,0.219,17,0.006,19,0.23,27,0.066,32,0.994,72,3.297,88,0.005,89,0.005,90,0.671,96,0.893,106,2.351,109,1.305,187,0.879,205,0.544,211,6.254,292,1.267,294,1.719,300,1.593,308,0.921,341,2.8,512,3.357,568,3.031,578,3.938,729,2.213,1580,3.938,1665,7.708,1676,7.05,1775,8.542,1776,8.542,1777,7.119,1778,7.05,1779,5.292,1780,7.642,1781,7.119,1782,5.507]],["title/components/NgxCurrencyTableCellComponent.html",[109,0.747,534,2.357]],["body/components/NgxCurrencyTableCellComponent.html",[3,0.032,4,0.028,5,0.032,10,0.079,11,0.132,12,0.314,16,0.18,17,0.006,19,0.167,27,0.032,28,0.975,32,1.247,38,2.371,47,1.266,48,2.638,72,1.308,81,2.909,88,0.003,89,0.003,90,0.586,96,0.425,109,0.95,137,1.141,152,0.697,171,1.207,179,0.932,180,1.597,183,0.935,184,1.576,187,1.177,192,3.766,193,0.83,196,1.13,205,0.259,237,2.226,250,3.437,255,2.182,256,3.766,292,0.502,293,1.597,294,0.818,298,3.061,300,1.554,304,1.624,306,2.176,308,1.208,311,1.086,315,3.069,317,1.13,319,1.965,320,1.907,333,2.814,341,1.037,345,1.965,361,1.597,379,1.28,478,1.633,479,2.022,480,1.24,481,1.308,484,2.539,485,2.14,507,3.704,509,2.698,512,1.819,514,1.672,515,2.371,516,1.26,517,3.427,518,1.672,519,1.672,520,1.633,521,1.466,522,1.672,523,1.633,524,3.088,525,1.672,526,1.633,527,1.672,528,2.539,529,1.672,530,2.48,531,2.539,532,1.633,533,1.497,534,3.789,535,3.803,536,4.645,537,3.427,538,1.633,539,1.597,540,1.633,541,1.529,542,1.672,543,1.597,544,1.597,545,1.672,546,1.633,547,1.597,548,1.529,549,1.672,550,1.633,551,1.383,552,1.672,553,1.633,554,1.672,555,1.633,556,2.539,557,1.633,558,1.633,559,1.672,560,1.633,561,1.672,562,1.633,563,3.046,564,1.672,565,1.672,566,1.672,567,4.313,568,1.122,569,1.562,570,1.562,571,1.672,572,1.597,573,1.672,574,1.672,575,1.672,576,1.597,577,1.672,578,1.562,579,1.597,580,1.672,581,1.437,582,1.562,583,1.672,584,1.672,585,1.529,586,1.597,587,1.672,588,1.597,589,1.672,590,1.597,591,1.672,592,1.562,593,1.562,594,1.597,595,1.672,596,1.597,597,1.672,598,1.597,599,1.672,600,1.284,601,1.597,602,1.562,603,1.597,604,1.562,605,1.562,606,1.562,607,1.357,608,1.383,609,1.383,610,1.562,611,1.672,612,1.497,613,1.672,614,1.597,615,1.672,616,1.466,617,1.562,618,1.672,619,1.562,620,1.672,621,1.597,622,1.672,623,1.672,639,5.335,642,2.371,660,1.853,676,5.743,677,4.552,678,4.552,679,5.758,680,5.083,681,5.048,682,4.552,683,4.338,684,3.994,685,6.16,686,4.552,687,4.809,688,4.809,689,3.978,691,3.589,693,2.895,694,3.304,695,3.589,696,3.978,697,3.978,698,3.978,699,3.978,700,2.321,702,1.606,705,2.176,706,3.304,708,2.48,709,3.368,710,2.029,711,2.62,712,3.994,714,1.672,715,1.308,717,4.031,724,1.021,762,2.092,1003,2.561,1021,2.895,1081,2.667,1091,1.804,1092,4.338,1093,2.364,1568,5.483,1783,5.143,1784,3.031,1785,6.217,1786,4.245,1787,4.245,1788,4.245,1789,4.245,1790,2.796,1791,2.796,1792,2.796,1793,3.387,1794,4.601,1795,4.245,1796,4.601,1797,3.387,1798,4.245,1799,5.143,1800,3.387,1801,5.143,1802,3.387,1803,5.143,1804,4.245,1805,3.387,1806,2.895,1807,4.245,1808,3.387,1809,2.796,1810,2.796,1811,2.796,1812,3.387]],["title/directives/NgxCypressTagDirective.html",[292,0.725,579,2.304]],["body/directives/NgxCypressTagDirective.html",[3,0.063,4,0.055,5,0.063,10,0.156,11,0.212,16,0.197,17,0.006,19,0.222,27,0.063,32,0.937,44,1.933,47,1.816,72,2.59,88,0.004,89,0.004,90,0.633,179,1.847,182,2.819,184,1.529,187,1.101,205,0.513,292,1.222,294,1.62,298,2.445,304,2.601,308,0.868,334,2.738,341,2.053,579,3.884,663,3.394,670,4.626,693,5.542,695,6.223,714,4.402,960,4.591,1474,6.53,1813,9.3,1814,9.3,1815,6.71,1816,9.843,1817,8.24,1818,8.24,1819,6.71,1820,4.484,1821,6.71,1822,6.71]],["title/components/NgxDateTableCellComponent.html",[109,0.747,538,2.357]],["body/components/NgxDateTableCellComponent.html",[3,0.027,4,0.024,5,0.027,10,0.067,11,0.117,12,0.267,16,0.17,17,0.006,19,0.171,27,0.027,28,0.861,32,1.217,36,2.093,38,2.094,47,1.144,48,2.384,64,2.72,72,1.114,76,2.791,81,2.783,83,3.322,88,0.002,89,0.002,90,0.53,96,0.362,109,0.858,137,1.047,152,0.615,171,1.066,179,0.794,180,1.566,183,0.825,184,1.578,187,1.179,192,6.276,193,0.707,196,1.021,205,0.221,237,1.966,250,3.035,255,3.386,256,3.326,292,0.428,293,1.36,294,0.697,298,3.035,300,1.637,304,1.434,306,1.853,308,1.181,311,0.925,315,2.773,317,1.021,319,1.674,320,1.624,333,2.485,341,1.719,345,1.674,361,1.36,379,1.175,478,1.391,479,1.786,480,1.056,481,1.114,484,2.242,485,1.89,507,3.47,509,2.56,512,1.607,514,1.424,515,2.094,516,1.113,517,3.146,518,1.424,519,1.424,520,1.391,521,1.249,522,1.424,523,1.391,524,3.002,525,1.424,526,1.391,527,1.424,528,2.242,529,1.424,530,2.19,531,2.242,532,1.391,533,1.275,534,1.391,535,3.639,536,1.424,537,3.146,538,3.55,539,4.541,540,1.391,541,1.302,542,1.424,543,1.36,544,1.36,545,1.424,546,1.391,547,1.36,548,1.302,549,1.424,550,1.391,551,1.177,552,1.424,553,1.391,554,1.424,555,1.391,556,2.242,557,1.391,558,1.391,559,1.424,560,1.391,561,1.424,562,1.391,563,2.829,564,1.424,565,1.424,566,1.424,567,4.221,568,0.955,569,1.33,570,1.33,571,1.424,572,1.36,573,1.424,574,1.424,575,1.424,576,1.36,577,1.424,578,1.33,579,1.36,580,1.424,581,1.224,582,1.33,583,1.424,584,1.424,585,1.302,586,1.36,587,1.424,588,1.36,589,1.424,590,1.36,591,1.424,592,1.33,593,1.33,594,1.36,595,1.424,596,1.36,597,1.424,598,1.36,599,1.424,600,1.094,601,1.36,602,1.33,603,1.36,604,1.33,605,1.33,606,1.33,607,1.155,608,1.177,609,1.177,610,1.33,611,1.424,612,1.275,613,1.424,614,1.36,615,1.424,616,1.249,617,1.33,618,1.424,619,1.33,620,1.424,621,1.36,622,1.424,623,1.424,639,5.186,660,1.578,676,5.598,677,4.114,678,4.114,679,5.487,680,4.666,681,4.73,682,4.114,683,3.92,684,3.61,685,5.844,686,4.114,687,4.346,688,4.346,689,3.514,691,3.169,693,2.557,694,2.918,695,3.169,696,3.514,697,3.514,698,3.514,699,3.514,700,2.05,702,1.474,705,1.853,706,2.918,708,2.112,709,3.128,710,1.728,711,2.232,712,3.61,714,1.424,715,1.114,717,3.803,724,0.869,762,2.478,834,4.73,900,2.242,1003,2.399,1021,2.557,1081,2.356,1091,1.536,1092,3.92,1093,2.013,1466,2.557,1568,5.137,1589,4.561,1784,2.581,1786,3.749,1787,3.749,1788,3.749,1789,3.749,1790,2.381,1791,2.381,1792,2.381,1794,4.064,1795,3.749,1796,4.064,1798,3.749,1804,3.749,1806,2.557,1807,3.749,1809,2.381,1810,2.381,1811,2.381,1823,7.703,1824,5.618,1825,4.637,1826,8.571,1827,5.026,1828,7.361,1829,8.211,1830,7.981,1831,5.618,1832,4.542,1833,6.076,1834,4.542,1835,2.885,1836,2.885,1837,4.542,1838,2.885,1839,4.064,1840,2.885,1841,4.542,1842,2.885,1843,4.542,1844,2.885,1845,2.885,1846,2.885]],["title/directives/NgxDisplayContentComponent.html",[292,0.725,581,2.074]],["body/directives/NgxDisplayContentComponent.html",[3,0.063,4,0.055,5,0.063,10,0.157,11,0.212,12,0.828,16,0.149,17,0.006,19,0.182,27,0.063,28,1.923,32,0.943,88,0.004,89,0.004,90,0.843,96,0.846,136,3.649,164,5.975,184,1.407,187,1.103,203,3.251,205,0.516,255,3.794,292,1.226,294,1.63,300,1.557,304,2.611,308,0.873,341,2.926,479,3.515,501,1.804,568,2.961,581,3.509,582,3.813,650,4.083,749,4.049,1779,5.54,1847,9.32,1848,8.338,1849,6.749,1850,7.399,1851,8.27,1852,8.27,1853,4.953,1854,6.749]],["title/interfaces/NgxDisplayContentConfiguration.html",[0,0.079,1855,4.034]],["body/interfaces/NgxDisplayContentConfiguration.html",[0,0.112,2,1.044,3,0.065,4,0.057,5,0.065,10,0.161,11,0.216,12,0.871,16,0.224,17,0.006,19,0.226,27,0.091,28,1.315,29,1.452,68,2.296,88,0.005,89,0.005,114,2.495,169,5.724,205,0.53,245,1.674,479,3.698,581,2.942,717,3.423,1855,6.939,1856,6.935,1857,6.935,1858,9.406,1859,9.406,1860,9.406,1861,6.204,1862,4.296,1863,6.204,1864,6.204,1865,6.204,1866,9.406,1867,4.455,1868,6.204]],["title/directives/NgxDisplayContentDirective.html",[292,0.725,582,2.254]],["body/directives/NgxDisplayContentDirective.html",[3,0.024,4,0.021,5,0.024,10,0.06,11,0.107,12,0.65,16,0.197,17,0.006,19,0.189,27,0.024,28,0.79,29,0.775,32,1.312,34,1.891,37,2.297,42,1.528,44,1.859,47,1.064,49,2.119,57,1.803,61,2.01,68,1.985,72,0.999,73,0.931,74,2.211,83,1.168,88,0.002,89,0.002,90,0.244,96,0.824,102,2.056,109,1.389,114,2.526,135,0.83,137,1.337,139,1.077,162,3.194,174,1.255,179,0.712,180,0.971,182,1.425,183,0.757,184,1.332,187,1.16,191,1.342,193,1.468,194,1.863,196,1.341,203,2.056,205,0.198,206,1.236,234,1.501,236,1.895,237,2.263,245,0.625,254,3.438,255,1.768,272,0.634,292,0.618,294,0.625,298,1.236,300,1.666,304,1.315,308,1.177,317,1.586,328,2.581,332,1.416,341,1.275,358,1.603,366,2.31,368,2.009,369,2.516,373,2.648,379,1.561,392,1.358,402,2.581,412,3.263,426,2.861,431,1.378,453,4.39,479,1.638,492,2.136,501,1.397,506,1.193,509,2.833,512,1.85,513,1.964,516,1.468,563,3.319,581,1.098,582,3.029,634,3.477,650,2.581,663,1.309,672,3.922,693,3.952,702,0.964,705,2.676,714,2.958,715,2.536,717,2.958,724,1.979,729,0.804,732,3.359,749,2.493,762,2.667,800,3.918,803,1.22,824,2.648,830,3.029,831,3.029,833,1.457,834,1.663,865,1.55,872,3.438,900,2.958,908,3.132,929,2.136,958,2.056,960,3.643,962,1.663,982,3.359,1026,3.034,1060,2.345,1070,1.501,1071,2.417,1102,1.378,1103,1.603,1126,1.603,1184,1.168,1215,2.279,1224,3.494,1230,1.168,1249,5.49,1277,2.315,1283,2.784,1285,6.129,1303,1.55,1353,1.895,1379,3.727,1441,2.002,1462,3.239,1490,2.002,1502,1.193,1503,2.581,1726,3.737,1733,2.056,1736,1.895,1768,4.678,1779,3.239,1833,2.136,1848,8.45,1853,2.495,1855,2.136,1861,5.362,1862,4.07,1863,2.315,1864,5.877,1865,6.603,1867,4.51,1868,4.678,1869,6.312,1870,2.588,1871,3.438,1872,7.38,1873,5.228,1874,6.569,1875,4.315,1876,5.228,1877,5.228,1878,5.228,1879,5.993,1880,5.228,1881,4.166,1882,4.166,1883,4.166,1884,4.166,1885,4.166,1886,6.603,1887,4.166,1888,2.588,1889,2.588,1890,2.588,1891,3.934,1892,2.588,1893,2.588,1894,4.166,1895,3.992,1896,4.166,1897,2.588,1898,6.569,1899,4.315,1900,4.166,1901,2.588,1902,4.166,1903,2.588,1904,3.828,1905,2.588,1906,2.588,1907,4.636,1908,5.228,1909,2.588,1910,4.166,1911,4.166,1912,2.588,1913,2.588,1914,2.784,1915,4.166,1916,2.588,1917,2.588,1918,2.907,1919,2.588,1920,2.588,1921,2.784,1922,3.479,1923,2.588,1924,1.309,1925,2.136,1926,4.678,1927,2.588,1928,2.588,1929,2.588,1930,2.588,1931,2.712,1932,5.993,1933,2.588,1934,2.588,1935,2.588,1936,2.588,1937,2.588,1938,1.729,1939,2.588,1940,1.729,1941,2.588,1942,1.663,1943,2.588,1944,2.588,1945,2.588,1946,2.588,1947,2.588,1948,2.588,1949,2.588,1950,2.136,1951,2.588,1952,2.588,1953,2.588,1954,4.166,1955,2.588,1956,2.588,1957,2.588,1958,2.315,1959,1.663,1960,2.315,1961,2.136,1962,2.136,1963,2.136,1964,2.588,1965,2.588,1966,2.588,1967,2.588,1968,2.588,1969,2.588,1970,2.588,1971,2.588,1972,2.588,1973,4.166,1974,4.166,1975,2.588,1976,2.588,1977,2.588,1978,5.228,1979,2.002,1980,5.993,1981,2.588,1982,1.663,1983,1.55,1984,2.588]],["title/directives/NgxFormsErrorAbstractComponent.html",[292,0.725,585,2.206]],["body/directives/NgxFormsErrorAbstractComponent.html",[3,0.063,4,0.055,5,0.063,10,0.156,11,0.211,17,0.006,19,0.222,21,4.013,27,0.063,28,1.81,32,1.15,36,3.32,47,1.364,51,5.289,68,3.259,70,5.956,72,2.586,86,6.526,88,0.004,89,0.004,90,0.632,184,1.575,187,1.147,205,0.512,292,1.221,294,1.618,300,1.743,304,2.599,308,1.065,341,2.05,379,1.643,432,5.234,585,3.715,663,4.826,794,6.368,1543,4.286,1985,6.7,1986,7.974,1987,8.232,1988,6.7,1989,6.7,1990,5.53]],["title/interfaces/NgxFormsErrorConfigurationOptions.html",[0,0.079,1991,4.034]],["body/interfaces/NgxFormsErrorConfigurationOptions.html",[0,0.1,2,0.929,3,0.058,4,0.051,5,0.058,7,3.319,10,0.144,11,0.201,12,0.881,16,0.22,17,0.006,19,0.21,27,0.08,37,2.121,68,3.295,76,2.966,86,7.285,88,0.004,89,0.004,90,0.738,96,0.774,106,2.153,109,1.494,190,2.078,194,2.806,205,0.472,245,1.49,255,3.319,292,1.16,308,1.012,379,1.442,387,6.643,395,6.643,404,6.051,524,2.942,585,2.785,642,3.606,693,4.404,792,2.807,813,3.772,842,5.026,1217,4.404,1580,4.587,1733,4.457,1895,4.256,1921,5.227,1991,6.456,1992,6.172,1993,9.518,1994,6.051,1995,6.998,1996,4.685,1997,9.028,1998,9.028]],["title/directives/NgxFormsErrorsDirective.html",[292,0.725,586,2.304]],["body/directives/NgxFormsErrorsDirective.html",[2,0.397,3,0.025,4,0.022,5,0.025,10,0.061,11,0.109,12,0.822,16,0.203,17,0.006,19,0.208,20,3.098,21,1.581,26,1.369,27,0.025,28,1.701,29,1.05,32,1.189,34,1.525,36,0.983,37,1.148,42,1.548,44,1.745,47,1.574,48,2.248,49,2.06,51,1.695,55,1.576,61,1.621,68,3.087,70,6.23,73,1.906,83,1.909,86,6.685,88,0.002,89,0.002,90,0.5,96,0.664,106,1.165,107,4.438,109,1.415,135,2.128,137,1.09,144,1.405,151,1.635,152,0.959,162,1.098,174,0.795,179,0.726,180,0.858,182,1.448,183,0.769,184,1.114,187,1.15,193,1.298,194,2.201,196,1.287,203,2.083,205,0.202,206,1.256,233,2.253,238,1.001,245,0.637,272,0.646,292,1.183,294,0.637,298,1.256,300,1.687,308,1.101,317,1.101,328,2.622,333,2.315,341,2.441,367,4.522,369,2.418,379,1.669,382,2.953,389,6.381,395,4.688,399,2.828,404,4.098,426,1.444,453,1.764,476,0.874,479,1.037,480,1.549,501,1.416,509,2.386,513,1.244,516,1.625,524,1.726,585,2.39,586,1.995,634,3.516,650,2.992,669,3.696,670,2.195,693,2.382,702,1.788,715,2.734,717,4.04,724,1.275,749,3.217,824,1.87,830,2.794,831,2.794,835,1.444,901,3.493,904,3.273,908,3.173,929,2.178,958,2.383,1003,1.975,1007,1.369,1009,1.932,1026,3.074,1030,4.372,1060,2.983,1070,3.849,1071,2.455,1077,3.273,1086,5.476,1087,3.493,1102,3.227,1103,1.635,1118,2.828,1184,1.191,1217,1.486,1279,2.195,1285,2.041,1303,3.173,1331,2.719,1355,1.932,1390,4.536,1462,3.282,1474,1.932,1490,5.478,1502,3.059,1503,2.622,1514,2.178,1530,2.178,1533,2.361,1552,3.316,1580,2.794,1690,3.493,1721,1.635,1725,2.178,1733,3.275,1833,2.178,1839,3.786,1853,2.535,1886,5.423,1895,1.244,1922,1.244,1942,1.695,1959,1.695,1960,2.361,1986,6.335,1990,5.476,1991,4.372,1995,5.423,1999,2.639,2000,6.061,2001,3.441,2002,7.732,2003,5.297,2004,5.297,2005,7.081,2006,5.297,2007,5.297,2008,4.232,2009,4.232,2010,4.232,2011,2.639,2012,4.232,2013,2.639,2014,4.232,2015,2.639,2016,6.634,2017,7.081,2018,4.232,2019,2.639,2020,2.639,2021,2.639,2022,2.639,2023,2.639,2024,3.696,2025,5.297,2026,2.639,2027,4.232,2028,2.639,2029,4.232,2030,2.639,2031,2.639,2032,2.639,2033,2.639,2034,4.232,2035,2.639,2036,6.634,2037,4.232,2038,2.639,2039,2.639,2040,2.639,2041,2.639,2042,3.786,2043,2.639,2044,2.639,2045,2.178,2046,1.932,2047,1.932,2048,2.639,2049,2.361,2050,2.361,2051,1.841,2052,2.639,2053,2.041,2054,2.639,2055,3.786,2056,2.639,2057,4.232,2058,4.232,2059,5.297,2060,2.639,2061,2.639,2062,2.639,2063,2.639,2064,2.639,2065,2.639,2066,2.639,2067,2.639,2068,2.639,2069,2.639,2070,2.639,2071,5.297,2072,2.639,2073,4.232,2074,2.639,2075,2.639,2076,2.639,2077,5.297,2078,3.786,2079,5.423,2080,1.932,2081,2.639,2082,2.639,2083,2.639,2084,2.639,2085,2.639,2086,7.081,2087,2.639,2088,4.232,2089,2.639,2090,2.639,2091,2.639,2092,2.639,2093,2.639,2094,2.639,2095,2.639,2096,5.297,2097,2.639,2098,4.232,2099,3.786,2100,6.634,2101,1.764,2102,2.639,2103,2.639,2104,2.639]],["title/interfaces/NgxHasCookieConfiguration.html",[0,0.079,1782,3.781]],["body/interfaces/NgxHasCookieConfiguration.html",[0,0.124,2,1.149,3,0.071,4,0.063,5,0.071,10,0.178,11,0.229,12,0.824,16,0.196,17,0.005,27,0.071,88,0.005,89,0.005,152,1.356,506,4.476,1601,5.326,1609,6.237,1633,4.904,1782,6.885,2105,7.633]],["title/directives/NgxHasCookieDirective.html",[292,0.725,588,2.304]],["body/directives/NgxHasCookieDirective.html",[3,0.031,4,0.028,5,0.031,10,0.078,11,0.131,12,0.473,16,0.207,17,0.006,19,0.219,27,0.031,32,1.261,42,0.981,44,1.744,47,1.513,48,3.559,49,2.053,55,2.573,61,1.562,72,1.295,73,2.674,74,1.718,75,3.412,83,2.304,88,0.003,89,0.003,90,0.316,96,0.421,109,1.312,133,1.947,137,1.221,139,1.396,162,1.396,174,1.011,179,0.923,182,1.747,183,0.928,184,1.352,187,1.182,191,2.648,194,1.587,196,1.351,205,0.256,206,1.515,233,1.786,238,1.272,245,0.81,272,0.822,292,1.244,294,0.81,298,1.515,300,1.572,304,1.612,308,1.111,317,1.592,324,2.007,332,1.836,335,2.256,338,1.947,341,1.891,366,2.731,368,3.584,369,2.558,373,3.052,379,1.443,392,2.014,399,2.242,402,3.163,408,3.426,412,2.619,424,1.947,431,2.718,467,1.889,501,1.652,506,2.849,509,2.756,513,1.581,578,1.547,588,2.406,650,1.656,663,1.697,700,2.304,702,1.181,715,2.386,717,4.326,720,2.341,724,2.081,729,1.043,762,2.08,780,1.187,822,1.836,824,1.482,830,1.547,831,1.547,958,2.43,960,3.864,982,3.971,1003,1.093,1026,3.586,1070,3.586,1071,2.962,1102,1.786,1103,2.079,1184,1.514,1331,3.971,1462,3.829,1490,6.056,1502,2.849,1503,3.163,1530,2.769,1609,3.28,1633,5.03,1638,6.461,1665,6.646,1676,6.134,1779,3.829,1782,4.781,1820,2.242,1895,4.353,1914,2.242,1922,3.256,1924,1.697,1931,1.74,1942,2.156,1959,2.156,1996,2.009,2024,4.312,2042,4.568,2053,2.595,2078,3.002,2079,5.529,2080,2.457,2106,9.625,2107,9.625,2108,3.355,2109,5.105,2110,3.562,2111,5.105,2112,5.105,2113,8.592,2114,4.312,2115,6.18,2116,4.82,2117,5.229,2118,6.907,2119,6.907,2120,4.82,2121,5.105,2122,5.105,2123,3.355,2124,3.479,2125,3.355,2126,3.355,2127,5.105,2128,5.105,2129,3.355,2130,3.355,2131,3.949,2132,3.355,2133,6.18,2134,3.355,2135,3.355,2136,3.355,2137,3.355,2138,3.355,2139,5.105,2140,3.355,2141,3.355,2142,3.355,2143,3.562,2144,3.355,2145,3.355,2146,3.355,2147,2.595,2148,2.769,2149,3.562,2150,3.355,2151,5.105,2152,2.595,2153,3.562,2154,5.105,2155,3.28,2156,2.341,2157,3.28,2158,1.836,2159,3.355,2160,3.355,2161,3.355,2162,1.786,2163,3.355,2164,3.355,2165,3.355,2166,3.355,2167,3.355,2168,3.355,2169,3.355,2170,2.009,2171,2.079,2172,3.355,2173,3.355,2174,5.105,2175,3.355]],["title/directives/NgxHasFeatureDirective.html",[292,0.725,590,2.304]],["body/directives/NgxHasFeatureDirective.html",[3,0.031,4,0.027,5,0.031,10,0.077,11,0.13,16,0.207,17,0.006,19,0.199,26,1.72,27,0.031,29,1.096,32,1.241,38,2.333,42,1.479,47,1.778,48,4.056,49,1.826,55,2.558,61,1.548,72,1.953,73,2.208,74,1.703,83,2.769,88,0.003,89,0.003,90,0.313,96,0.416,133,1.924,139,1.38,174,0.999,179,0.913,183,0.92,184,1.463,187,1.206,191,2.624,196,1.115,205,0.253,206,1.501,238,1.257,245,0.801,272,0.812,292,1.156,294,0.801,298,1.501,300,1.357,304,1.597,308,1.221,317,1.416,332,1.814,338,1.924,341,2.262,366,2.711,368,3.565,369,2.546,373,3.034,379,1.61,392,1.999,402,3.135,408,3.409,412,2.603,424,1.924,501,1.64,509,2.746,513,1.563,590,2.385,702,2.084,715,2.854,717,4.313,720,2.314,724,2.069,762,2.065,824,1.465,947,2.849,958,2.412,960,4.501,982,3.942,1026,3.56,1070,3.56,1071,2.936,1102,1.765,1103,2.054,1184,1.496,1220,1.986,1234,6.897,1236,6.429,1237,5.667,1238,5.064,1264,4.176,1462,3.801,1502,2.829,1503,3.135,1730,7.526,1895,3.485,1918,3.531,1922,3.485,1924,1.677,1931,1.72,1942,3.942,1959,2.13,2024,3.531,2051,3.531,2053,2.565,2114,4.281,2116,4.281,2117,5.207,2120,4.791,2124,3.454,2131,3.914,2143,3.531,2149,4.281,2153,2.314,2155,3.251,2156,2.314,2157,3.251,2158,1.814,2170,1.986,2171,2.054,2176,8.772,2177,8.772,2178,3.316,2179,3.031,2180,6.143,2181,2.498,2182,3.705,2183,7.252,2184,5.413,2185,4.493,2186,7.393,2187,7.393,2188,7.393,2189,6.136,2190,4.493,2191,6.136,2192,5.06,2193,5.06,2194,5.06,2195,3.316,2196,3.316,2197,3.316,2198,4.493,2199,3.316,2200,3.316,2201,3.316,2202,3.316,2203,5.413,2204,3.316,2205,3.316,2206,3.316,2207,3.316,2208,3.316,2209,3.316,2210,3.316,2211,3.316,2212,2.565,2213,2.967,2214,2.967,2215,2.737,2216,5.06,2217,3.316,2218,5.06,2219,3.316,2220,3.316,2221,3.316,2222,4.493,2223,3.316,2224,5.027,2225,2.967,2226,3.316,2227,3.316,2228,4.176,2229,3.705,2230,3.705]],["title/pipes/NgxHasFeaturePipe.html",[174,1.473,2231,4.373]],["body/pipes/NgxHasFeaturePipe.html",[3,0.042,4,0.037,5,0.042,11,0.115,12,0.584,16,0.184,17,0.006,19,0.225,26,2.32,27,0.042,29,1.176,32,1.292,34,1.815,38,2.907,42,1.307,44,1.05,48,3.098,49,1.988,55,1.666,57,1.936,61,2.234,73,1.61,81,1.481,83,2.018,88,0.003,89,0.003,90,0.422,96,0.915,109,0.963,139,1.861,162,1.861,174,2.787,176,2.32,179,1.231,180,1.284,183,0.813,184,1.247,185,2.448,187,1.141,193,1.544,196,1.653,203,1.759,204,3.45,205,0.342,206,1.327,238,1.696,245,1.08,268,3.092,272,1.096,300,1.38,308,0.816,317,1.576,366,2.786,368,4.296,369,2.449,373,3.226,379,1.705,392,2.055,399,2.989,408,2.907,412,3.378,424,2.595,501,1.195,513,2.972,694,4.051,702,2.006,705,4.051,724,2.2,732,4.051,824,1.977,918,2.518,947,4.463,950,4.051,958,1.759,977,3.906,1026,5.031,1070,4.849,1071,3.658,1110,3.658,1118,2.989,1163,3.46,1184,2.018,1220,2.679,1236,6.542,1237,7.157,1264,7.157,1390,4.009,1437,1.861,1924,2.263,2024,4.399,2117,5.943,2124,3.55,2155,4.051,2157,4.051,2170,2.679,2171,2.771,2177,8.388,2180,5.641,2183,5.641,2184,4.616,2198,3.275,2212,3.46,2231,5.641,2232,8.388,2233,4.473,2234,4.473,2235,4.473,2236,5.641,2237,4.473,2238,6.465,2239,6.304,2240,4.473,2241,5.641,2242,5.641,2243,4.473,2244,4.473,2245,4.473,2246,3.45,2247,5.204,2248,5.204,2249,7.093,2250,5.641,2251,4.473,2252,4.473,2253,4.002,2254,4.002,2255,5.641,2256,5.641,2257,3.55,2258,5.641,2259,3.692,2260,3.692,2261,4.473,2262,6.304,2263,4.002,2264,3.46,2265,4.002,2266,4.002,2267,3.121]],["title/directives/NgxHasFocusDirective.html",[292,0.725,592,2.254]],["body/directives/NgxHasFocusDirective.html",[3,0.053,4,0.046,5,0.053,10,0.131,11,0.189,12,0.521,15,2.298,16,0.163,17,0.006,19,0.151,27,0.053,29,1.293,32,0.786,34,1.621,44,1.321,47,1.501,57,3.191,81,2.722,88,0.004,89,0.004,90,0.531,96,0.924,101,4.305,106,2.029,122,3.292,128,3.257,137,1.351,180,0.912,182,1.926,183,1.34,184,1.461,187,1.168,193,1.379,196,1.688,205,0.43,292,1.293,294,1.359,305,4.151,308,0.728,315,3.639,317,1.688,325,5.398,330,4.421,340,3.372,367,3.874,379,1.359,476,2.722,516,2.136,568,2.722,592,3.399,702,1.705,724,2.221,750,6.488,752,5.398,755,6.746,756,5.828,757,5.398,759,7.185,762,2.481,763,6.415,766,5.398,770,5.398,771,5.398,1119,6.746,2268,9.599,2269,9.599,2270,5.037,2271,7.803,2272,7.372,2273,7.372,2274,5.63,2275,5.63,2276,5.63]],["title/directives/NgxHasFocusDragAndDropAbstractDirective.html",[292,0.725,593,2.254]],["body/directives/NgxHasFocusDragAndDropAbstractDirective.html",[3,0.048,4,0.043,5,0.048,10,0.121,11,0.179,12,0.816,15,2.115,16,0.174,17,0.006,19,0.139,27,0.048,29,1.035,32,0.974,34,1.492,47,1.42,49,1.132,57,3.414,81,2.612,88,0.004,89,0.004,90,0.489,96,0.875,101,4.166,106,1.92,122,3.225,128,3.083,133,3.006,137,1.296,180,0.839,182,1.773,183,1.268,184,1.598,187,1.191,193,1.269,196,1.649,205,0.396,292,1.251,294,1.251,300,1.373,305,3.928,308,0.902,315,3.444,317,1.794,325,5.108,330,4.093,340,3.103,367,3.718,379,1.286,476,2.612,501,2.108,516,2.067,568,2.612,593,3.216,702,1.614,724,2.102,740,8.036,749,3.922,750,6.382,752,5.108,753,7.55,754,7.55,755,6.527,756,5.639,757,5.108,759,7.018,763,6.062,766,5.108,770,5.108,771,5.108,968,4.636,1119,6.101,1317,2.498,1996,3.103,2147,4.008,2148,4.276,2270,4.636,2277,9.736,2278,6.976,2279,6.976,2280,5.181,2281,5.181,2282,5.181,2283,5.181,2284,5.181,2285,5.181,2286,4.008,2287,4.636,2288,6.976,2289,6.976,2290,4.636]],["title/directives/NgxHasPermissionDirective.html",[292,0.725,594,2.304]],["body/directives/NgxHasPermissionDirective.html",[3,0.032,4,0.028,5,0.032,10,0.08,11,0.133,16,0.208,17,0.006,19,0.202,26,1.775,27,0.032,29,1.112,32,1.23,38,2.39,42,1.515,47,1.793,48,4.075,49,1.844,55,2.6,61,1.586,72,2.001,73,2.251,74,1.745,83,2.823,88,0.003,89,0.003,90,0.323,96,0.429,133,1.986,139,1.424,174,1.031,179,0.942,183,0.942,184,1.471,187,1.206,191,2.689,196,1.137,205,0.262,206,1.538,238,1.298,245,0.827,272,0.838,292,1.17,294,0.827,298,1.538,300,1.373,304,1.637,308,1.219,317,1.434,332,1.873,338,1.986,341,2.294,366,2.765,368,3.616,369,2.553,373,3.084,379,0.956,392,2.039,402,3.212,408,3.457,412,2.646,424,1.986,501,1.672,509,2.628,513,1.614,594,2.443,702,2.099,715,2.895,717,4.045,720,2.389,724,2.103,762,2.106,824,1.513,958,2.46,960,4.531,982,4.02,1026,3.63,1070,1.986,1071,3.008,1102,1.823,1103,2.121,1184,1.545,1220,2.05,1239,6.966,1241,6.789,1242,5.76,1243,5.164,1265,5.164,1462,3.876,1502,1.578,1503,3.212,1730,7.576,1895,3.534,1918,2.389,1922,3.534,1924,1.731,1931,1.775,1942,4.02,1959,2.199,2051,3.617,2114,4.366,2116,4.366,2117,5.265,2120,4.87,2124,3.523,2131,4.01,2143,3.617,2149,4.366,2153,2.389,2155,3.331,2156,2.389,2157,3.331,2158,1.873,2170,2.05,2171,2.121,2176,8.776,2179,3.105,2181,2.559,2182,3.796,2184,4.581,2185,4.581,2190,4.581,2198,4.581,2203,5.49,2212,2.648,2213,3.063,2214,3.063,2215,2.825,2222,4.581,2224,5.11,2225,3.063,2228,4.279,2229,3.796,2230,3.796,2291,8.776,2292,3.423,2293,5.184,2294,7.332,2295,7.498,2296,7.498,2297,7.498,2298,6.257,2299,6.257,2300,5.184,2301,5.184,2302,5.184,2303,3.423,2304,3.423,2305,3.423,2306,3.423,2307,3.423,2308,3.423,2309,3.423,2310,3.423,2311,3.423,2312,4.638,2313,3.423,2314,3.423,2315,3.423,2316,3.423,2317,3.423,2318,5.184,2319,3.423,2320,5.184,2321,3.423,2322,3.423,2323,3.423,2324,3.423,2325,3.423,2326,3.423]],["title/pipes/NgxHasPermissionPipe.html",[174,1.473,2327,4.373]],["body/pipes/NgxHasPermissionPipe.html",[3,0.042,4,0.037,5,0.042,11,0.115,12,0.583,16,0.184,17,0.006,19,0.225,26,2.316,27,0.042,29,1.175,32,1.291,34,1.812,38,2.903,42,1.305,44,1.048,48,3.095,49,1.987,55,1.663,57,1.933,61,2.232,73,1.606,81,1.478,83,2.015,88,0.003,89,0.003,90,0.421,96,0.914,109,0.962,139,1.858,162,1.858,174,2.786,176,2.316,179,1.229,180,1.283,183,0.811,184,1.246,185,2.443,187,1.141,193,1.542,196,1.652,203,1.755,204,3.445,205,0.341,206,1.325,238,1.693,245,1.078,268,3.091,272,1.094,300,1.379,308,0.814,317,1.575,366,2.782,368,4.294,369,2.448,373,3.223,379,1.704,392,2.052,399,2.984,408,2.903,412,3.377,424,2.59,501,1.193,513,2.968,694,4.045,702,2.004,705,4.045,724,2.197,732,4.045,824,1.973,918,2.514,947,4.459,950,4.045,958,1.755,977,3.901,1026,5.028,1070,4.845,1071,3.653,1110,3.653,1118,2.984,1163,3.454,1184,2.015,1220,2.674,1241,6.862,1242,7.152,1265,7.152,1390,4.006,1437,1.858,1924,2.258,2024,4.393,2117,5.94,2124,3.545,2155,4.045,2157,4.045,2170,2.674,2171,2.766,2184,4.61,2198,3.269,2212,3.454,2232,8.384,2236,5.633,2238,6.46,2241,5.633,2242,5.633,2246,3.445,2247,5.196,2248,5.196,2249,7.086,2250,5.633,2253,3.994,2254,3.994,2255,5.633,2256,5.633,2257,3.545,2258,5.633,2259,3.685,2260,3.685,2263,3.994,2264,3.454,2265,3.994,2266,3.994,2267,3.115,2291,8.384,2294,5.633,2312,5.633,2327,5.633,2328,4.464,2329,4.464,2330,4.464,2331,4.464,2332,6.296,2333,4.464,2334,4.464,2335,4.464,2336,4.464,2337,4.464,2338,4.464,2339,4.464,2340,4.464,2341,6.296]],["title/classes/NgxI18nAbstractService.html",[90,0.461,2342,4.034]],["body/classes/NgxI18nAbstractService.html",[3,0.07,4,0.062,5,0.07,10,0.174,17,0.005,27,0.07,44,2.066,88,0.005,89,0.005,90,0.707,92,4.643,96,0.94,99,5.109,106,2.063,184,1.179,187,0.925,196,1.362,350,3.664,568,3.097,724,2.818,780,2.651,790,7.234,814,5.797,817,6.576,834,4.815,2342,7.268,2343,8.806,2344,7.494,2345,7.494]],["title/interfaces/NgxI18nConfiguration.html",[0,0.079,2346,3.781]],["body/interfaces/NgxI18nConfiguration.html",[0,0.095,2,0.881,3,0.055,4,0.048,5,0.078,10,0.136,11,0.194,12,0.869,16,0.202,17,0.006,27,0.055,32,1.056,34,2.177,37,1.588,88,0.004,89,0.004,96,0.734,102,2.89,152,1.371,180,1.225,200,4.529,203,2.973,236,5.537,237,3.832,255,3.209,308,1.214,333,4.138,379,1.394,408,4.082,650,3.733,817,6.273,834,4.859,1007,3.922,1159,5.277,1230,3.995,1369,4.387,1419,3.486,1612,5.226,1620,4.387,1710,5.537,2238,5.85,2346,5.85,2347,5.855,2348,5.855,2349,7.307,2350,9.863,2351,8.853,2352,7.307,2353,7.921,2354,6.241,2355,6.766,2356,6.766,2357,8.398,2358,7.562,2359,6.241,2360,4.685,2361,7.562,2362,6.482,2363,7.562,2364,6.766,2365,6.177,2366,7.562,2367,7.562,2368,6.766,2369,7.562,2370,7.562,2371,6.241]],["title/components/NgxI18nEmptyComponent.html",[109,0.747,540,2.357]],["body/components/NgxI18nEmptyComponent.html",[3,0.049,4,0.044,5,0.049,17,0.005,19,0.143,27,0.049,28,1.344,47,1.442,55,2.639,64,5.101,88,0.004,89,0.004,90,0.5,96,0.665,106,1.95,109,1.356,179,1.459,180,1.656,182,2.424,205,0.405,292,0.786,293,2.499,294,1.28,298,3.117,361,2.499,478,2.557,479,2.785,480,1.941,481,2.047,484,3.498,485,2.948,507,4.305,509,1.701,514,2.617,515,3.267,516,1.735,517,4.205,518,2.617,519,2.617,520,2.557,521,2.295,522,2.617,523,2.557,524,3.259,525,2.617,526,2.557,527,2.617,528,3.498,529,2.617,530,3.416,531,3.498,532,2.557,533,2.343,534,2.557,535,3.687,536,2.617,537,4.205,538,2.557,539,2.499,540,4.107,541,3.601,542,2.617,543,2.499,544,2.499,545,2.617,546,2.557,547,2.499,548,2.393,549,2.617,550,2.557,551,2.164,552,2.617,553,2.557,554,2.617,555,2.557,556,3.498,557,2.557,558,2.557,559,2.617,560,2.557,561,2.617,562,2.557,563,2.164,564,2.617,565,2.617,566,2.617,567,2.343,568,1.756,569,2.445,570,2.445,571,2.617,572,2.499,573,2.617,574,2.617,575,2.617,576,2.499,577,2.617,578,2.445,579,2.499,580,2.617,581,2.25,582,2.445,583,2.617,584,2.617,585,2.393,586,2.499,587,2.617,588,2.499,589,2.617,590,2.499,591,2.617,592,2.445,593,2.445,594,2.499,595,2.617,596,2.499,597,2.617,598,2.499,599,2.617,600,2.01,601,2.499,602,2.445,603,2.499,604,2.445,605,2.445,606,2.445,607,2.124,608,2.164,609,2.164,610,2.445,611,2.617,612,2.343,613,2.617,614,2.499,615,2.617,616,2.295,617,2.445,618,2.617,619,2.445,620,2.617,621,2.499,622,2.617,623,2.617,2372,5.302,2373,5.302,2374,7.085,2375,5.848,2376,7.085]],["title/injectables/NgxI18nLoadingService.html",[259,1.407,2377,3.781]],["body/injectables/NgxI18nLoadingService.html",[3,0.037,4,0.032,5,0.037,10,0.091,11,0.148,12,0.629,16,0.175,17,0.006,19,0.201,27,0.037,32,1.159,34,2.15,41,2.707,44,2.062,47,1.169,49,1.959,61,2.54,66,2.538,73,1.414,88,0.003,89,0.003,90,0.37,96,0.936,114,3.537,122,2.887,128,3.883,135,2.548,137,1.306,152,1.076,180,1.1,183,1.044,184,1.552,187,1.139,193,1.663,196,1.444,205,0.3,259,1.653,261,1.667,268,2.996,272,0.962,274,3.13,300,1.667,308,1.074,317,1.234,333,2.15,347,1.894,369,2.354,392,2.705,408,2.648,412,3.147,431,2.092,432,3.822,472,5.139,476,1.902,502,3.351,513,2.707,541,2.592,702,1.329,780,2.032,792,2.745,822,2.15,833,2.212,840,2.524,918,3.234,977,3.558,1111,3.69,1186,2.038,1187,1.414,1230,2.592,1255,1.852,1370,4.74,1469,3.912,1612,4.348,1620,5.78,1726,3.058,1907,4.443,2101,4.537,2124,2.212,2359,4.74,2362,5.468,2377,5.252,2378,7.707,2379,7.707,2380,3.929,2381,6.516,2382,6.789,2383,6.789,2384,6.789,2385,6.789,2386,6.789,2387,6.789,2388,5.743,2389,5.743,2390,7.468,2391,5.743,2392,7.468,2393,5.743,2394,3.929,2395,4.443,2396,5.743,2397,6.85,2398,3.929,2399,5.139,2400,3.929,2401,5.139,2402,5.743,2403,3.929,2404,5.743,2405,7.426,2406,3.929,2407,5.743,2408,3.929,2409,5.743,2410,3.929,2411,4.74,2412,3.929,2413,5.743,2414,5.743,2415,5.743,2416,5.743,2417,5.743,2418,5.743,2419,5.743,2420,5.743,2421,5.743,2422,5.743,2423,3.929,2424,3.929,2425,3.929,2426,3.929,2427,5.743,2428,2.741,2429,3.929,2430,2.877,2431,3.515,2432,3.929,2433,3.929,2434,5.743,2435,6.789,2436,2.038,2437,3.929,2438,3.243,2439,3.515,2440,3.515,2441,3.243,2442,3.929,2443,3.929]],["title/classes/NgxI18nMultiTranslationHttpLoader.html",[90,0.461,2444,4.373]],["body/classes/NgxI18nMultiTranslationHttpLoader.html",[3,0.04,4,0.035,5,0.057,10,0.1,11,0.158,12,0.399,16,0.182,17,0.006,19,0.247,27,0.04,32,1.089,34,1.767,36,2.664,37,1.665,38,1.986,42,2.278,44,2.068,49,2.056,61,1.318,68,2.033,83,1.944,88,0.004,89,0.003,90,0.406,92,2.669,96,0.77,106,1.69,114,2.573,118,2.669,134,2.669,135,1.969,152,1.116,180,0.698,183,1.116,184,1.125,187,1.017,193,1.055,195,3.154,196,0.783,205,0.329,206,1.822,233,2.294,268,2.223,272,1.055,274,3.949,300,1.655,308,1.008,323,4.102,358,2.669,369,2.396,379,1.318,384,3.333,426,2.357,431,2.294,501,1.151,506,1.986,524,1.404,541,1.944,732,2.768,780,2.915,817,4.102,821,2.58,822,3.359,824,1.904,833,2.425,834,3.944,918,2.425,1013,2.499,1139,3.154,1145,3.854,1159,3.006,1184,1.944,1201,3.556,1217,3.456,1247,3.854,1255,2.031,1280,2.031,1317,2.077,1390,3.943,1419,1.986,1428,3.006,1469,3.371,1604,5.209,1612,5.317,1620,5.561,1709,3.556,1710,4.495,1727,5.903,1904,4.495,1983,3.677,2001,3.709,2055,3.854,2101,2.879,2346,5.532,2355,5.492,2356,3.854,2359,3.556,2362,5.707,2364,3.854,2371,5.067,2375,3.556,2377,5.532,2381,4.99,2395,3.333,2401,5.492,2405,6.399,2428,3.006,2438,3.556,2439,3.854,2440,3.854,2444,5.492,2445,8.565,2446,8.565,2447,4.308,2448,4.283,2449,6.139,2450,7.152,2451,9.01,2452,7.152,2453,7.152,2454,5.492,2455,5.492,2456,4.308,2457,6.139,2458,6.139,2459,4.308,2460,5.492,2461,4.308,2462,6.139,2463,4.308,2464,6.139,2465,4.308,2466,5.492,2467,6.139,2468,3.556,2469,5.492,2470,3.854,2471,4.308,2472,4.308,2473,3.854,2474,3.854,2475,4.308,2476,4.308,2477,4.308,2478,4.308,2479,4.308,2480,8.239,2481,4.308,2482,4.308,2483,4.308,2484,4.308,2485,3.854,2486,3.854,2487,6.139,2488,4.308,2489,6.139,2490,4.308,2491,3.006,2492,3.854,2493,4.308,2494,4.308,2495,4.308,2496,3.333,2497,4.308,2498,4.308,2499,4.308,2500,4.308,2501,4.308,2502,4.308,2503,4.308,2504,3.854,2505,4.308,2506,4.308,2507,4.308,2508,4.308,2509,3.854,2510,4.308,2511,4.308,2512,4.308,2513,3.854,2514,2.879,2515,4.308,2516,4.308,2517,4.308,2518,4.308]],["title/injectables/NgxI18nRootService.html",[259,1.407,2519,4.034]],["body/injectables/NgxI18nRootService.html",[3,0.031,4,0.042,5,0.031,7,2.154,10,0.078,11,0.13,12,0.57,16,0.196,17,0.006,19,0.199,27,0.031,31,3.717,32,1.09,34,2.132,37,2.009,42,0.973,44,1.905,47,1.034,49,1.994,61,2.484,66,2.243,73,1.827,88,0.003,89,0.003,90,0.314,96,0.863,99,2.946,106,1.894,133,1.932,137,1.563,152,1.288,162,1.386,180,0.996,183,0.923,184,1.526,187,1.138,193,1.507,196,1.475,203,2.705,205,0.255,233,2.703,234,3.57,259,1.461,261,1.413,268,2.523,272,0.816,300,1.656,308,1.214,317,1.418,323,3.393,332,2.778,369,2.346,379,0.936,408,3.599,412,2.809,425,2.14,428,2.14,467,1.875,492,4.19,501,0.89,502,4.233,506,1.536,541,2.291,660,2.778,714,3.397,724,2.804,780,1.796,790,6.038,814,2.576,817,6.903,821,1.995,830,2.341,831,2.341,832,5.505,842,2.14,958,2.419,977,4.263,1003,1.654,1111,2.14,1184,1.503,1186,1.727,1187,2.214,1230,3.947,1232,3.393,1251,2.98,1255,2.9,1280,4.302,1390,3.948,1411,3.927,1413,3.041,1415,4.053,1416,3.191,1419,2.341,1428,2.324,1469,1.57,1612,2.778,1695,3.717,1726,1.773,1891,3.685,1982,2.14,1996,3.685,2001,1.727,2101,3.393,2147,2.576,2148,2.749,2179,3.685,2346,4.759,2349,5.078,2352,5.078,2353,5.505,2354,7.681,2395,5.323,2430,2.439,2455,4.542,2466,4.542,2473,2.98,2474,2.98,2504,2.98,2514,3.393,2519,4.19,2520,9.306,2521,8.327,2522,3.33,2523,4.19,2524,6.152,2525,6.152,2526,6.152,2527,5.077,2528,6.881,2529,5.077,2530,5.077,2531,5.077,2532,5.077,2533,3.33,2534,6.881,2535,3.33,2536,3.657,2537,5.216,2538,5.077,2539,3.33,2540,5.077,2541,3.33,2542,6.152,2543,5.077,2544,5.077,2545,3.33,2546,4.19,2547,3.33,2548,3.33,2549,5.077,2550,3.33,2551,3.33,2552,3.33,2553,3.33,2554,3.33,2555,3.33,2556,2.98,2557,3.33,2558,2.98,2559,6.881,2560,3.33,2561,3.33,2562,3.33,2563,3.33,2564,3.33,2565,7.407,2566,3.33,2567,3.543,2568,2.98,2569,5.077,2570,3.33,2571,3.33,2572,3.33,2573,3.33,2574,3.33,2575,3.33,2576,3.33,2577,3.33,2578,3.33,2579,2.98]],["title/injectables/NgxI18nService.html",[259,1.407,2580,4.034]],["body/injectables/NgxI18nService.html",[3,0.041,4,0.036,5,0.041,10,0.103,11,0.161,12,0.822,16,0.191,17,0.006,19,0.224,27,0.041,32,1.013,34,2.487,40,7.247,44,2.027,49,0.966,76,3.65,88,0.003,89,0.003,90,0.417,96,1.043,99,3.628,137,1.491,152,1.351,180,1.277,183,1.136,184,1.557,187,1.138,193,2.038,196,1.782,205,0.338,206,1.312,207,3.649,245,1.067,259,1.8,261,1.876,268,2.76,272,1.083,300,1.504,308,1.117,317,0.803,343,2.183,369,1.829,379,1.743,501,1.181,524,2.364,715,3.502,724,2.376,780,2.944,790,5.612,808,3.874,814,3.42,817,6.639,1187,2.25,1230,4.22,1236,4.363,1280,2.947,1390,3.989,1396,5.594,1428,4.363,1612,4.963,1620,4.575,1907,4.837,2162,3.329,2342,5.161,2349,5.987,2352,5.987,2354,5.161,2448,4.363,2454,5.594,2468,3.649,2519,5.987,2521,3.956,2580,5.161,2581,4.421,2582,6.252,2583,6.252,2584,7.254,2585,7.254,2586,9.071,2587,7.254,2588,6.252,2589,6.252,2590,4.421,2591,6.252,2592,4.421,2593,4.421,2594,4.421,2595,6.252,2596,4.421,2597,6.252,2598,4.421,2599,6.252,2600,4.421,2601,6.252,2602,4.421,2603,6.252,2604,4.421,2605,4.421,2606,4.421,2607,4.421,2608,4.421,2609,4.421,2610,4.421,2611,4.421,2612,4.421,2613,6.252,2614,6.252,2615,4.421,2616,4.421,2617,4.421,2618,4.421]],["title/injectables/NgxI18nTranslationLoaderResolver.html",[259,1.407,2619,4.373]],["body/injectables/NgxI18nTranslationLoaderResolver.html",[3,0.054,4,0.048,5,0.054,10,0.135,11,0.193,16,0.166,17,0.006,19,0.237,27,0.054,32,1.05,42,1.696,44,1.361,47,1.531,49,1.997,55,2.162,88,0.004,89,0.004,90,0.547,96,0.727,114,2.088,137,0.954,183,1.366,184,1.312,187,1.029,196,1.054,205,0.444,253,4.249,259,2.164,261,2.462,268,2.592,271,2.323,272,1.421,300,1.63,308,0.973,369,2.361,392,2.45,501,1.551,506,2.675,702,1.739,780,2.66,781,4.658,822,4.563,825,3.878,826,5.167,834,3.728,958,2.956,1151,5.505,1187,2.705,1232,5.024,1390,4.462,1401,5.505,1620,5.53,1710,5.505,1726,4.003,2371,6.205,2377,7.07,2381,6.651,2395,4.489,2399,6.727,2460,6.727,2580,7.544,2619,7.894,2620,5.802,2621,5.816,2622,7.518,2623,6.205,2624,7.518,2625,7.518,2626,8.823,2627,6.205,2628,7.462,2629,7.462,2630,6.727,2631,8.34,2632,8.34,2633,8.823,2634,5.802,2635,5.802,2636,7.518,2637,5.802,2638,7.518,2639,7.518,2640,5.802,2641,5.802]],["title/interfaces/NgxImageMarkerBase.html",[0,0.079,2642,3.411]],["body/interfaces/NgxImageMarkerBase.html",[0,0.148,2,0.876,3,0.054,4,0.048,5,0.054,10,0.135,11,0.193,12,0.697,15,3.074,16,0.202,17,0.006,19,0.225,27,0.089,29,1.117,37,1.578,81,2.494,88,0.004,89,0.004,137,1.238,171,1.767,190,2.535,194,1.808,268,2.595,272,1.425,300,1.013,308,1.142,317,1.057,392,2.454,654,3.472,702,1.932,724,2.269,729,2.595,792,2.269,800,2.742,835,4.12,1007,3.017,1138,3.183,1580,2.682,1625,5.289,1922,4.704,2158,3.183,2257,3.275,2642,6.162,2643,4.26,2644,4.26,2645,6.373,2646,6.466,2647,5.514,2648,4.838,2649,5.255,2650,3.888,2651,6.46,2652,5.255,2653,3.888,2654,3.097,2655,5.033,2656,3.888,2657,3.275,2658,4.059,2659,4.26,2660,5.472,2661,4.059,2662,4.26,2663,4.26,2664,4.059,2665,5.255,2666,4.26,2667,5.255,2668,5.033,2669,5.033,2670,5.033,2671,3.888]],["title/components/NgxImageMarkerComponent.html",[109,0.747,543,2.304]],["body/components/NgxImageMarkerComponent.html",[3,0.025,4,0.022,5,0.025,10,0.062,11,0.109,12,0.74,16,0.185,17,0.006,19,0.179,27,0.025,28,1.263,32,1.083,37,1.806,42,1.555,44,0.624,47,1.578,49,1.831,55,0.99,61,1.629,72,1.643,73,0.956,88,0.002,89,0.002,90,0.401,96,0.763,109,1.017,133,1.542,174,1.282,179,0.731,180,1.536,183,0.773,184,1.526,187,1.185,193,0.651,194,2.485,196,1.106,205,0.203,206,1.263,234,1.542,238,2.018,272,0.651,292,0.394,293,1.253,294,0.642,298,3.021,300,1.725,304,1.343,308,1.084,317,1.356,319,4.328,320,2.996,334,1.737,341,2.174,361,1.253,366,2.352,369,2.305,373,2.689,379,1.122,392,2.315,399,3.557,411,2.378,412,2.939,478,1.281,479,1.673,480,0.973,481,1.026,484,2.101,485,1.771,501,0.71,506,1.225,507,3.348,509,1.365,513,2.006,514,1.312,515,1.962,516,1.49,517,3.004,518,1.312,519,1.312,520,1.281,521,1.15,522,1.312,523,1.281,524,2.927,525,1.312,526,1.281,527,1.312,528,2.101,529,1.312,530,2.052,531,2.101,532,1.281,533,1.174,534,1.281,535,2.634,536,1.312,537,3.004,538,1.281,539,1.253,540,1.281,541,1.199,542,1.312,543,2.868,544,4.4,545,1.312,546,1.281,547,1.253,548,1.199,549,1.312,550,1.281,551,1.085,552,1.312,553,1.281,554,1.312,555,1.281,556,2.101,557,1.281,558,1.281,559,1.312,560,1.281,561,1.312,562,1.281,563,1.085,564,1.312,565,1.312,566,1.312,567,1.174,568,0.88,569,1.225,570,1.225,571,1.312,572,1.253,573,1.312,574,1.312,575,1.312,576,1.253,577,1.312,578,1.225,579,1.253,580,1.312,581,1.128,582,1.225,583,1.312,584,1.312,585,1.199,586,1.253,587,1.312,588,1.253,589,1.312,590,1.253,591,1.312,592,1.225,593,1.225,594,1.253,595,1.312,596,1.253,597,1.312,598,1.253,599,1.312,600,1.008,601,1.253,602,1.225,603,1.253,604,1.225,605,1.225,606,1.225,607,1.064,608,1.085,609,1.085,610,1.225,611,1.312,612,1.174,613,1.312,614,1.253,615,1.312,616,1.15,617,1.225,618,1.312,619,1.225,620,1.312,621,1.253,622,1.312,623,1.312,634,3.53,642,1.962,654,1.673,660,3.886,663,2.152,672,2.566,702,1.231,715,2.349,724,1.834,729,1.891,732,1.707,749,2.955,781,1.646,792,1.604,824,1.174,830,1.225,831,1.225,908,3.188,946,3.897,950,2.734,951,3.116,981,1.946,1003,1.734,1024,3.512,1060,1.496,1092,1.854,1102,2.266,1138,2.328,1161,3.714,1255,1.253,1317,2.566,1381,3.088,1411,3.292,1413,2.549,1415,2.912,1416,1.378,1419,1.225,1420,1.946,1469,2.006,1543,2.454,1625,3.329,1726,1.415,1853,2.549,1891,1.592,1895,3.768,1922,3.865,1924,1.344,1931,2.761,1938,1.776,1996,1.592,2158,2.328,2264,3.292,2287,2.378,2645,4.449,2648,4.793,2651,6.059,2652,1.854,2653,1.776,2655,1.776,2657,2.996,2658,1.854,2661,1.854,2664,4.956,2665,1.854,2667,4.956,2669,1.776,2671,3.557,2672,9.636,2673,8.622,2674,2.657,2675,3.807,2676,4.393,2677,4.255,2678,6.657,2679,5.322,2680,7.751,2681,6.657,2682,5.322,2683,5.322,2684,6.657,2685,5.322,2686,6.657,2687,6.657,2688,7.103,2689,6.085,2690,3.807,2691,4.255,2692,4.255,2693,4.255,2694,4.393,2695,4.255,2696,4.255,2697,5.322,2698,4.255,2699,4.762,2700,4.255,2701,4.255,2702,4.393,2703,4.255,2704,2.657,2705,3.292,2706,2.657,2707,4.255,2708,2.657,2709,2.657,2710,2.657,2711,3.292,2712,2.657,2713,4.255,2714,2.657,2715,4.393,2716,4.255,2717,2.657,2718,2.657,2719,2.657,2720,2.657,2721,4.255,2722,2.657,2723,2.193,2724,2.378,2725,2.378,2726,2.378,2727,2.193,2728,4.255,2729,6.657,2730,2.657,2731,4.255,2732,2.657,2733,2.657,2734,2.657,2735,2.657,2736,2.657,2737,2.657,2738,2.657,2739,4.255,2740,2.056,2741,4.255,2742,2.657,2743,2.657,2744,2.657,2745,2.657,2746,2.657,2747,2.378,2748,2.657,2749,2.657,2750,2.657,2751,2.657,2752,4.255,2753,2.657,2754,4.255,2755,2.657]],["title/interfaces/NgxImageMarkerConfiguration.html",[0,0.079,2656,3.267]],["body/interfaces/NgxImageMarkerConfiguration.html",[0,0.144,2,0.797,3,0.049,4,0.043,5,0.049,10,0.123,11,0.182,12,0.912,16,0.216,17,0.006,19,0.215,27,0.087,29,1.354,37,1.92,81,2.819,88,0.004,89,0.004,96,0.664,137,1.399,144,3.769,171,1.661,190,2.383,194,1.646,268,2.479,272,1.297,300,1.232,308,1.225,317,0.962,392,2.599,654,2.082,702,2.112,724,2.403,729,2.757,792,2.403,800,2.496,835,3.874,1007,3.672,1138,2.898,1580,2.442,1625,5.183,1922,4.713,2158,2.898,2257,2.982,2642,5.565,2643,3.878,2644,3.878,2645,6.23,2646,6.233,2647,5.184,2648,4.549,2649,4.94,2650,3.539,2651,6.577,2652,5.94,2653,3.539,2654,2.82,2655,5.689,2656,4.731,2657,3.986,2658,5.94,2659,5.184,2660,5.869,2661,5.94,2662,5.184,2663,6.233,2664,5.94,2665,5.565,2666,5.184,2667,6.37,2668,4.731,2669,4.731,2670,4.731,2671,3.539]],["title/interfaces/NgxImageMarkerEdit.html",[0,0.079,2670,3.267]],["body/interfaces/NgxImageMarkerEdit.html",[0,0.148,2,0.882,3,0.055,4,0.048,5,0.055,10,0.136,11,0.194,12,0.701,16,0.195,17,0.006,19,0.226,27,0.089,29,1.122,37,1.59,81,2.506,88,0.004,89,0.004,137,1.244,171,1.967,190,2.547,194,1.822,268,2.85,272,1.436,300,1.021,308,1.146,317,1.065,392,2.466,654,2.305,702,1.939,724,2.28,729,2.605,792,2.28,800,2.763,835,4.141,1007,3.041,1138,3.208,1580,2.703,1625,5.297,1922,4.65,2158,3.208,2257,3.301,2642,6.18,2643,4.292,2644,4.292,2645,6.128,2646,6.485,2647,5.542,2648,4.863,2649,5.281,2650,3.918,2651,6.47,2652,5.281,2653,3.918,2654,3.121,2655,5.058,2656,3.918,2657,3.301,2658,4.091,2659,4.292,2660,5.488,2661,4.091,2662,4.292,2663,4.292,2664,4.091,2665,5.281,2666,4.292,2667,5.281,2668,5.058,2669,6.128,2670,5.601,2671,3.918]],["title/injectables/NgxImageMarkerService.html",[259,1.407,2715,4.034]],["body/injectables/NgxImageMarkerService.html",[3,0.027,4,0.024,5,0.027,10,0.068,11,0.117,12,0.645,16,0.163,17,0.006,19,0.208,27,0.027,32,0.894,34,2.473,37,2.568,42,2.258,44,2.015,49,2.158,50,1.742,54,2.063,55,1.703,61,2.365,74,0.979,88,0.002,89,0.002,90,0.431,96,0.926,102,3.647,133,1.688,135,1.466,137,1.353,152,1.001,162,1.902,180,1.127,183,0.831,184,0.888,187,0.988,193,1.705,194,2.714,196,1.342,205,0.222,206,0.863,223,2.401,238,3.122,240,2.03,259,1.316,261,1.234,268,2.559,271,1.946,272,0.712,300,1.467,308,0.591,311,1.812,317,0.831,332,2.501,333,1.592,339,4.687,366,2.02,369,2.344,373,2.829,379,0.843,392,0.948,412,2.639,476,2.12,501,0.777,507,1.371,516,2.241,524,2.518,543,2.155,544,4.717,650,1.436,654,2.736,681,4.471,715,1.123,729,1.99,732,1.869,744,2.401,762,1.539,780,1.617,792,2.412,800,2.662,803,4.382,825,1.944,826,3.499,837,2.03,840,4.746,919,2.371,1003,2.086,1007,2.371,1060,3.604,1102,3.408,1138,2.501,1186,1.509,1187,2.032,1255,1.371,1280,2.155,1293,2.25,1353,3.348,1369,1.688,1381,3.277,1401,2.13,1413,2.738,1415,1.592,1416,1.509,1419,1.341,1469,1.371,1543,2.108,1580,2.108,1582,2.03,1625,3.09,1690,4.662,1726,1.549,1731,1.944,1736,4.136,1769,2.25,1895,3.482,1922,4.487,1924,2.312,1938,3.055,1940,1.944,1983,2.738,1996,2.738,2215,2.401,2257,3.604,2645,3.775,2648,3.629,2649,2.03,2650,3.775,2651,6.707,2653,1.944,2656,5.631,2668,4.278,2669,4.937,2670,4.278,2671,3.775,2673,7.366,2675,4.09,2699,8.426,2702,4.662,2705,4.952,2715,3.773,2756,8.232,2757,2.909,2758,4.572,2759,5.648,2760,5.648,2761,4.572,2762,4.572,2763,5.648,2764,2.909,2765,8.232,2766,9.148,2767,2.909,2768,7.387,2769,2.909,2770,2.909,2771,4.572,2772,6.402,2773,2.909,2774,4.572,2775,4.572,2776,7.387,2777,2.909,2778,2.909,2779,2.909,2780,2.909,2781,2.909,2782,2.909,2783,2.909,2784,2.909,2785,2.909,2786,2.909,2787,2.909,2788,2.909,2789,2.909,2790,2.909,2791,4.572,2792,4.572,2793,2.909,2794,5.648,2795,6.402,2796,4.572,2797,4.572,2798,2.909,2799,4.572,2800,2.909,2801,2.909,2802,2.909,2803,2.909,2804,2.909,2805,2.13,2806,2.909,2807,2.909,2808,4.572,2809,2.909,2810,2.909,2811,2.909,2812,2.909,2813,2.603,2814,2.909,2815,2.909,2816,2.909,2817,2.909,2818,2.909,2819,2.909,2820,2.603,2821,2.909,2822,2.909,2823,2.909,2824,2.909,2825,5.648,2826,2.909,2827,5.648,2828,2.909,2829,2.909,2830,2.909,2831,2.909,2832,2.909,2833,1.944,2834,2.909,2835,2.909,2836,2.909,2837,2.909,2838,2.434,2839,4.572,2840,4.09,2841,4.572,2842,2.909,2843,2.401,2844,2.909,2845,2.909,2846,2.909,2847,2.909]],["title/interfaces/NgxImageMarkerTypes.html",[0,0.079,2655,3.267]],["body/interfaces/NgxImageMarkerTypes.html",[0,0.148,2,0.869,3,0.054,4,0.047,5,0.054,10,0.134,11,0.192,12,0.694,16,0.201,17,0.006,19,0.224,27,0.089,29,1.111,37,1.566,81,2.482,88,0.004,89,0.004,96,0.724,137,1.231,171,1.758,190,2.522,194,2.329,268,2.586,272,1.414,300,1.005,308,1.139,317,1.049,392,2.442,654,2.27,702,1.924,724,2.258,729,2.737,792,2.507,800,2.721,835,4.1,1007,2.994,1138,3.159,1580,3.455,1625,5.117,1922,4.744,2158,3.159,2257,3.25,2642,5.806,2643,4.227,2644,4.227,2645,6.519,2646,6.448,2647,5.487,2648,4.815,2649,5.229,2650,3.858,2651,6.519,2652,5.229,2653,3.858,2654,3.99,2655,5.56,2656,3.858,2657,3.25,2658,4.028,2659,4.227,2660,5.456,2661,4.028,2662,4.227,2663,4.227,2664,4.028,2665,5.229,2666,4.227,2667,5.229,2668,5.008,2669,5.008,2670,5.008,2671,3.858]],["title/interfaces/NgxImageMarkerView.html",[0,0.079,2668,3.267]],["body/interfaces/NgxImageMarkerView.html",[0,0.148,2,0.882,3,0.055,4,0.048,5,0.055,10,0.136,11,0.194,12,0.701,16,0.195,17,0.006,19,0.226,27,0.089,29,1.122,37,1.59,81,2.506,88,0.004,89,0.004,137,1.244,171,1.967,190,2.547,194,1.822,268,2.85,272,1.436,300,1.021,308,1.146,317,1.065,392,2.466,654,2.305,702,1.939,724,2.28,729,2.605,792,2.28,800,2.763,835,4.141,1007,3.041,1138,3.208,1580,2.703,1625,5.297,1922,4.65,2158,3.208,2257,3.301,2642,6.18,2643,4.292,2644,4.292,2645,6.128,2646,6.485,2647,5.542,2648,4.863,2649,5.281,2650,3.918,2651,6.47,2652,5.281,2653,3.918,2654,3.121,2655,5.058,2656,3.918,2657,3.301,2658,4.091,2659,4.292,2660,5.488,2661,4.091,2662,4.292,2663,4.292,2664,4.091,2665,5.281,2666,4.292,2667,5.281,2668,5.601,2669,6.128,2670,5.058,2671,3.918]],["title/directives/NgxIsAuthenticatedDirective.html",[292,0.725,596,2.304]],["body/directives/NgxIsAuthenticatedDirective.html",[3,0.038,4,0.034,5,0.038,10,0.095,11,0.152,16,0.203,17,0.006,19,0.217,27,0.038,29,0.878,32,1.213,38,2.731,42,1.198,47,1.206,48,4.177,49,1.665,55,2.206,61,1.812,73,1.475,82,5.092,83,3.138,88,0.003,89,0.003,90,0.387,96,0.514,174,1.235,179,1.128,183,1.076,184,1.425,187,1.197,191,2.126,196,1.264,205,0.313,206,1.758,238,1.554,245,0.99,272,1.004,292,1.249,294,0.99,298,1.758,300,1.211,304,1.87,308,1.123,317,1.531,324,3.414,338,2.378,341,2.128,366,3.073,368,3.897,369,2.555,373,3.366,392,2.266,412,2.889,424,2.378,501,1.859,509,2.592,513,1.932,596,2.792,702,2.009,715,3.12,717,4.287,724,2.096,824,1.811,958,2.734,960,4.287,982,4.468,1143,5.803,1184,1.849,1220,2.455,1245,6.223,1261,5.299,1462,4.309,1502,1.89,1503,3.67,1871,5.74,1895,3.591,1918,2.86,1922,1.932,1924,2.073,1942,3.805,2051,4.133,2114,4.853,2116,4.853,2117,5.579,2120,5.316,2124,3.916,2143,4.133,2149,4.853,2153,4.133,2155,3.805,2156,2.86,2157,3.805,2158,2.242,2170,2.455,2171,2.539,2179,3.547,2181,2.924,2182,4.337,2184,5.092,2185,5.092,2190,5.092,2198,5.092,2203,5.917,2222,5.092,2224,5.578,2229,5.092,2230,4.337,2428,2.86,2848,9.754,2849,9.754,2850,4.098,2851,8.684,2852,8.081,2853,5.923,2854,5.923,2855,5.923,2856,4.098,2857,4.098,2858,4.098,2859,4.098,2860,4.098,2861,4.098,2862,4.098,2863,4.098,2864,4.098,2865,4.098,2866,6.955,2867,4.098,2868,4.098,2869,4.098,2870,4.098]],["title/interfaces/NgxMediaQuery.html",[0,0.079,2871,3.781]],["body/interfaces/NgxMediaQuery.html",[0,0.124,2,1.155,3,0.072,4,0.063,5,0.072,10,0.179,11,0.229,16,0.197,17,0.005,27,0.072,88,0.005,89,0.005,152,1.358,271,2.561,2365,6.784,2871,6.906,2872,7.671,2873,7.671]],["title/directives/NgxMediaQueryDirective.html",[292,0.725,598,2.304]],["body/directives/NgxMediaQueryDirective.html",[3,0.034,4,0.03,5,0.034,10,0.085,11,0.14,16,0.203,17,0.006,19,0.194,27,0.034,29,0.543,32,1.286,38,2.515,42,1.594,47,1.572,48,4.094,49,1.882,55,2.689,57,1.586,61,1.669,73,1.318,82,5.926,83,2.941,88,0.003,89,0.003,90,0.345,96,0.459,139,1.524,174,1.643,179,1.008,183,0.991,184,1.448,187,1.197,191,2.829,196,1.184,205,0.28,206,1.618,238,1.389,272,0.897,292,1.2,294,0.884,298,1.618,300,1.603,304,1.722,308,1.225,317,1.471,332,2.004,338,2.125,341,1.669,358,4.037,366,2.879,367,4.698,368,3.722,369,2.04,373,3.19,379,1.588,392,2.124,402,3.379,412,2.737,424,2.125,471,5.041,501,0.979,506,1.689,509,2.823,513,2.571,598,2.571,702,1.786,715,2.98,717,4.423,720,2.556,724,2.438,824,2.41,904,2.834,958,2.562,960,4.423,1003,1.777,1026,3.781,1060,2.062,1070,3.781,1071,3.165,1102,2.904,1103,2.269,1331,3.504,1462,4.037,1502,3.004,1503,3.379,1583,4.502,1895,3.639,1918,3.806,1922,3.639,1924,1.853,1931,1.9,1940,2.448,1942,4.187,1959,2.353,2024,3.806,2045,4.502,2046,2.682,2047,2.682,2051,3.806,2053,2.834,2114,4.547,2116,4.547,2117,5.386,2120,5.038,2124,3.669,2131,4.219,2143,3.806,2149,4.547,2153,2.556,2155,3.504,2156,2.556,2157,3.504,2158,2.004,2170,2.194,2171,2.269,2179,3.267,2181,2.693,2182,3.994,2185,4.771,2190,4.771,2203,5.652,2222,3.994,2224,4.771,2228,4.502,2229,3.994,2230,3.994,2365,6.344,2727,3.023,2871,6.484,2874,9.742,2875,8.716,2876,3.663,2877,4.88,2878,4.502,2879,6.516,2880,7.719,2881,7.719,2882,6.516,2883,5.454,2884,5.454,2885,3.663,2886,3.663,2887,3.663,2888,3.663,2889,3.663,2890,3.663,2891,3.663,2892,4.771,2893,5.454,2894,3.663,2895,3.663,2896,3.663,2897,3.663,2898,3.663,2899,3.663,2900,3.663,2901,3.663,2902,3.663,2903,3.663,2904,3.663,2905,3.663,2906,3.663,2907,4.88]],["title/injectables/NgxMediaQueryService.html",[259,1.407,2892,3.579]],["body/injectables/NgxMediaQueryService.html",[3,0.037,4,0.033,5,0.037,7,3.185,10,0.092,11,0.149,12,0.771,16,0.19,17,0.006,19,0.215,27,0.037,32,1.231,34,1.666,38,1.83,42,2.332,44,1.761,47,1.178,49,2.082,54,1.791,61,2.297,68,1.917,73,2.458,82,2.907,88,0.003,89,0.004,90,0.374,96,0.856,106,1.593,137,0.652,152,1.128,180,0.937,183,1.052,184,1.414,187,1.109,193,1.418,194,1.799,196,1.241,205,0.303,206,1.178,233,3.081,234,3.358,237,2.505,238,1.505,259,1.666,261,1.684,268,2.48,271,2.437,272,0.972,300,1.629,308,1.112,317,1.364,349,2.235,366,2.557,369,2.359,373,3.316,377,2.46,379,1.259,408,2.668,428,2.551,471,6.172,476,1.917,501,1.061,502,3.939,533,2.557,702,0.918,724,2.404,729,1.234,762,1.336,780,2.047,792,2.261,821,2.378,822,2.172,830,1.83,831,1.83,837,2.77,958,2.685,972,4.833,979,4.477,1003,1.886,1057,3.276,1060,3.258,1102,3.636,1184,1.791,1186,2.059,1187,1.428,1215,2.172,1217,3.258,1255,3.219,1283,3.868,1381,3.962,1390,2.927,1413,3.466,1415,4.366,1416,2.059,1419,2.668,1420,2.907,1428,2.77,1583,5.637,1695,2.907,1726,2.114,1736,6.581,1769,6.444,1778,3.276,1891,2.378,2152,3.071,2365,6.695,2436,2.059,2448,5.237,2491,4.766,2567,2.77,2657,3.258,2805,2.907,2871,6.953,2875,8.171,2877,6.11,2878,6.195,2892,5.496,2907,5.178,2908,9.132,2909,3.97,2910,5.178,2911,7.886,2912,8.33,2913,7.979,2914,5.787,2915,5.787,2916,5.787,2917,3.97,2918,3.97,2919,5.787,2920,3.97,2921,5.178,2922,3.97,2923,5.787,2924,3.97,2925,5.787,2926,3.97,2927,3.97,2928,4.777,2929,3.97,2930,3.97,2931,3.97,2932,3.97,2933,6.11,2934,3.97,2935,3.276,2936,3.071,2937,3.97,2938,5.787,2939,3.552,2940,3.97,2941,5.787,2942,3.552,2943,3.552,2944,3.97,2945,3.97,2946,3.358,2947,3.97,2948,3.97,2949,3.97,2950,3.97,2951,3.97,2952,3.97,2953,3.97,2954,3.97]],["title/injectables/NgxMediaQueryService-1.html",[259,1.17,1007,2.109,2892,2.977]],["body/injectables/NgxMediaQueryService-1.html",[3,0.035,4,0.03,5,0.035,10,0.086,11,0.141,12,0.509,16,0.179,17,0.006,19,0.177,27,0.035,29,0.816,32,1.273,34,1.583,36,1.38,42,2.267,44,1.291,61,2.749,68,2.404,74,2.444,88,0.003,89,0.003,90,0.349,96,0.822,102,2.715,106,1.514,134,5.877,139,1.541,152,1.051,180,0.891,183,1,184,1.389,187,1.109,193,1.347,196,1.319,205,0.283,206,1.099,233,3.865,234,3.191,238,2.086,259,1.583,261,1.572,268,2.411,271,2.64,272,0.907,300,1.651,308,1.003,317,1.409,328,2.295,349,4.087,350,3.227,366,2.43,368,2.652,369,2.391,373,3.208,377,4.498,383,3.676,408,3.347,412,2.086,425,2.38,428,2.38,431,1.972,432,3.097,476,2.173,501,0.99,660,3.972,780,3.356,781,2.295,795,2.585,821,3.294,822,5.314,964,2.149,972,4.715,979,7.051,1102,4.327,1110,2.149,1186,1.922,1187,1.333,1255,1.746,1381,3.806,1413,3.294,1415,2.027,1416,1.922,1420,4.027,1695,6.16,1699,3.058,1736,6.16,1769,2.866,1938,3.676,2050,3.315,2260,5.992,2365,7.088,2491,3.838,2509,4.921,2567,4.578,2621,2.866,2740,2.866,2843,3.058,2892,5.679,2910,8.929,2911,8.486,2933,4.921,2935,3.058,2939,3.315,2942,3.315,2943,3.315,2955,8.829,2956,3.705,2957,4.921,2958,3.191,2959,5.5,2960,5.5,2961,7.26,2962,6.56,2963,6.56,2964,6.56,2965,6.56,2966,6.56,2967,5.5,2968,3.705,2969,5.5,2970,5.5,2971,4.921,2972,3.705,2973,4.027,2974,5.5,2975,3.705,2976,5.5,2977,3.705,2978,7.756,2979,3.705,2980,3.705,2981,3.705,2982,3.705,2983,3.705,2984,3.705,2985,3.705,2986,3.705,2987,3.705,2988,3.705,2989,3.705,2990,3.705,2991,3.705,2992,3.705,2993,5.5,2994,5.5,2995,5.5,2996,3.705,2997,3.705,2998,3.705,2999,3.705,3000,3.705,3001,3.705,3002,3.705,3003,3.705,3004,3.705,3005,3.705,3006,3.705,3007,3.705,3008,3.705,3009,3.705,3010,3.705,3011,3.705,3012,3.705,3013,3.705,3014,3.705]],["title/interfaces/NgxMobileLayout.html",[0,0.079,3015,3.781]],["body/interfaces/NgxMobileLayout.html",[0,0.098,2,0.909,3,0.056,4,0.05,5,0.056,10,0.141,11,0.198,12,0.943,16,0.22,17,0.006,19,0.163,27,0.079,37,2.093,48,2.563,88,0.004,89,0.004,96,0.757,144,4.108,194,3.133,205,0.462,247,8.407,533,3.756,547,2.848,661,4.037,700,2.726,1081,5.102,1437,3.21,1451,3.409,1806,5.329,1895,4.751,2179,5.092,3015,5.969,3016,6.041,3017,6.041,3018,5.969,3019,7.812,3020,7.812,3021,5.039,3022,4.216,3023,4.986,3024,5.405,3025,3.882,3026,3.505,3027,6.041,3028,6.041]],["title/components/NgxMobileLayoutComponent.html",[109,0.747,546,2.357]],["body/components/NgxMobileLayoutComponent.html",[3,0.037,4,0.032,5,0.037,7,1.67,10,0.092,11,0.148,12,0.533,16,0.165,17,0.006,19,0.223,27,0.037,28,1.091,32,1.11,49,0.86,88,0.003,89,0.003,90,0.371,96,0.493,102,2.839,106,1.583,109,1.215,179,1.083,180,1.609,183,1.045,184,1.069,187,1.025,196,0.715,205,0.301,206,1.706,292,0.584,293,1.855,294,0.95,298,3.082,300,1.626,308,1.109,317,1.045,361,1.855,367,4.403,379,0.725,449,3.843,467,3.238,478,1.898,479,2.261,480,1.441,481,1.519,484,2.839,485,2.393,501,1.052,506,1.814,507,3.914,509,2.18,514,1.943,515,2.651,516,1.409,517,3.69,518,1.943,519,1.943,520,1.898,521,1.704,522,1.943,523,1.898,524,3.122,525,1.943,526,1.898,527,1.943,528,2.839,529,1.943,530,2.773,531,2.839,532,1.898,533,4.081,534,1.898,535,3.236,536,1.943,537,3.69,538,1.898,539,1.855,540,1.898,541,1.776,542,1.943,543,1.855,544,1.855,545,1.943,546,3.604,547,4.043,548,1.776,549,1.943,550,1.898,551,1.606,552,1.943,553,1.898,554,1.943,555,1.898,556,2.839,557,1.898,558,1.898,559,1.943,560,1.898,561,1.943,562,1.898,563,1.606,564,1.943,565,1.943,566,1.943,567,1.739,568,1.303,569,1.814,570,1.814,571,1.943,572,1.855,573,1.943,574,1.943,575,1.943,576,1.855,577,1.943,578,1.814,579,1.855,580,1.943,581,1.67,582,1.814,583,1.943,584,1.943,585,1.776,586,1.855,587,1.943,588,1.855,589,1.943,590,1.855,591,1.943,592,1.814,593,1.814,594,1.855,595,1.943,596,1.855,597,1.943,598,1.855,599,1.943,600,1.492,601,1.855,602,1.814,603,1.855,604,1.814,605,1.814,606,1.814,607,1.576,608,1.606,609,1.606,610,1.814,611,1.943,612,1.739,613,1.943,614,1.855,615,1.943,616,1.704,617,1.814,618,1.943,619,1.814,620,1.943,621,1.855,622,1.943,623,1.943,635,4.995,670,4.448,702,1.729,714,1.943,717,1.943,729,1.223,962,2.528,964,3.337,1020,4.742,1021,3.238,1022,5.609,1027,6.08,1073,5.145,1091,2.095,1093,2.746,1224,4.995,1233,2.528,1390,2.909,1469,2.711,1733,3.69,1891,2.357,1895,2.711,2046,2.882,2047,2.882,3015,3.044,3018,6.151,3019,4.746,3020,4.746,3029,8.576,3030,7.673,3031,3.935,3032,5.609,3033,6.795,3034,5.751,3035,7.114,3036,7.114,3037,6.795,3038,3.935,3039,5.751,3040,3.935,3041,3.935,3042,5.751,3043,5.751,3044,3.935,3045,5.751,3046,3.935,3047,3.843,3048,5.751,3049,3.935,3050,3.521,3051,3.935,3052,5.751,3053,5.751,3054,5.751,3055,5.751,3056,5.751,3057,5.751,3058,5.751,3059,5.751,3060,5.751]],["title/injectables/NgxMobileLayoutService.html",[259,1.407,3018,3.781]],["body/injectables/NgxMobileLayoutService.html",[3,0.029,4,0.025,5,0.029,7,2.489,10,0.072,11,0.123,12,0.808,16,0.2,17,0.006,19,0.204,22,4.538,23,2.388,27,0.029,29,0.87,32,1.197,34,2.06,44,1.854,47,1.457,48,2.032,49,1.907,61,2.023,73,1.723,74,1.039,81,1.586,88,0.003,89,0.003,90,0.291,96,0.897,109,1.333,135,0.99,137,1.456,180,1.159,183,0.87,184,1.552,187,1.173,193,1.753,194,2.353,196,1.61,203,1.883,205,0.236,211,2.26,237,1.336,247,7.312,259,1.378,261,1.31,268,2.712,272,0.756,300,1.597,308,1.197,317,1.557,323,4.418,335,2.116,367,4.427,369,1.479,379,1.545,412,2.507,467,1.738,476,1.022,501,1.568,502,3.9,515,2.208,516,1.935,533,4.415,547,2.257,654,2.599,669,4.993,670,3.927,700,1.393,702,2.1,710,1.849,714,2.364,715,1.848,724,2.156,729,0.959,781,2.967,808,1.912,821,1.849,822,1.689,823,1.601,824,2.116,837,3.341,838,2.388,918,1.738,954,5.059,964,2.778,990,1.738,1003,1.912,1077,5.114,1081,1.601,1110,1.791,1184,1.393,1186,1.601,1187,1.111,1230,2.983,1273,3.704,1283,3.2,1411,5.114,1437,1.284,1451,1.364,1469,3.116,1492,4.284,1721,4.434,1733,3.264,1779,5.405,1806,1.738,1820,2.063,1891,5.022,1895,2.257,1921,2.063,2179,1.849,3015,6.628,3018,5.114,3019,6.92,3020,7.752,3021,1.643,3023,2.547,3024,5.915,3030,8.403,3035,5.249,3036,5.249,3061,9.392,3062,3.086,3063,3.952,3064,4.788,3065,4.788,3066,4.788,3067,5.867,3068,5.867,3069,5.867,3070,5.867,3071,5.867,3072,5.867,3073,6.611,3074,6.611,3075,4.788,3076,4.788,3077,6.611,3078,4.788,3079,4.788,3080,4.788,3081,3.086,3082,3.086,3083,4.788,3084,3.086,3085,4.788,3086,3.086,3087,3.086,3088,4.788,3089,3.086,3090,4.788,3091,3.086,3092,4.788,3093,3.086,3094,4.788,3095,4.788,3096,3.086,3097,5.867,3098,3.086,3099,4.788,3100,3.086,3101,4.788,3102,3.086,3103,3.086,3104,4.788,3105,3.086,3106,3.086,3107,3.086,3108,3.086,3109,3.086,3110,2.388,3111,3.086,3112,3.086,3113,4.788,3114,3.086,3115,4.788,3116,3.086,3117,4.788,3118,6.611,3119,3.086,3120,3.086,3121,3.086,3122,3.086,3123,3.086,3124,3.086,3125,3.086,3126,3.086,3127,4.788,3128,3.086,3129,3.086,3130,3.086,3131,3.086,3132,3.086,3133,3.086,3134,3.086,3135,3.086,3136,3.086,3137,3.086,3138,3.086,3139,3.086,3140,3.086,3141,3.086,3142,3.086,3143,3.086,3144,3.086]],["title/directives/NgxModalAbstractComponent.html",[292,0.725,600,1.853]],["body/directives/NgxModalAbstractComponent.html",[3,0.044,4,0.039,5,0.044,10,0.111,11,0.169,12,0.868,16,0.145,17,0.006,19,0.203,27,0.044,28,1.752,32,1.194,42,2.379,49,1.648,68,1.574,73,1.711,88,0.004,89,0.004,90,0.448,96,0.596,122,2.973,135,1.525,136,3.699,137,1.081,183,1.195,184,1.585,187,1.202,196,1.195,205,0.363,206,1.952,249,3.317,271,1.986,292,0.975,294,1.148,300,1.716,304,2.077,305,3.703,308,1.053,315,2.347,317,1.371,319,4.958,320,4.977,340,2.847,341,2.491,347,3.925,349,4.583,357,5.523,358,2.945,369,2.229,377,2.945,426,3.599,453,4.396,476,2.498,501,1.27,516,2.165,568,2.178,600,2.86,634,4.723,636,6.297,638,5.089,654,2.965,655,5.835,658,5.089,672,4.454,673,4.454,729,1.477,749,3.387,795,3.317,833,2.676,842,3.054,871,4.454,908,4.518,932,5.429,1009,3.481,1013,2.758,1255,3.101,1381,4.376,1413,3.94,1415,2.601,1416,2.466,1419,2.192,1692,5.105,1731,3.177,2179,2.847,2257,2.676,2747,4.253,2805,4.816,2838,3.502,3145,4.754,3146,5.429,3147,8.39,3148,8.39,3149,6.578,3150,6.578,3151,6.578,3152,6.578,3153,4.754,3154,4.754,3155,8.14,3156,5.885,3157,4.754,3158,4.754,3159,4.754,3160,2.676,3161,4.754,3162,3.677,3163,3.177,3164,3.677,3165,3.677,3166,4.253,3167,3.923,3168,5.089,3169,2.758,3170,4.754,3171,4.754,3172,4.754,3173,4.754,3174,3.677,3175,3.923]],["title/interfaces/NgxModalAriaLabelBaseOptions.html",[0,0.079,3176,2.836]],["body/interfaces/NgxModalAriaLabelBaseOptions.html",[0,0.148,2,0.593,3,0.037,4,0.032,5,0.037,10,0.092,11,0.148,12,0.693,16,0.215,17,0.006,19,0.201,27,0.074,28,1.627,29,1.18,32,0.804,35,1.944,36,2.533,37,1.844,41,1.857,74,1.326,88,0.003,89,0.003,90,0.371,97,1.899,106,1.084,109,1.482,122,1.37,136,2.349,137,1.229,152,1.298,171,1.755,180,1.101,187,0.486,205,0.301,245,0.951,271,1.791,273,1.817,311,1.263,317,0.716,324,3.127,330,2.597,334,1.608,335,2.543,343,1.944,347,3.606,350,1.639,351,2.218,379,1.466,480,1.442,481,1.521,512,1.393,516,2.035,600,1.493,648,3.828,654,2.262,672,1.899,673,2.155,700,1.777,702,1.84,709,3.374,780,1.393,783,4.091,792,1.187,796,2.097,800,1.857,803,1.857,813,2.775,823,2.985,863,2.107,871,2.155,900,4.5,986,4.776,1003,2.592,1112,2.155,1140,2.155,1187,2.071,1216,3.148,1230,1.777,1279,3.526,1280,1.857,1467,2.285,1502,3.448,1543,3.135,1552,3.148,1692,5.273,2001,3.526,2181,1.944,2246,2.155,2436,2.985,2536,1.944,2838,2.097,2946,2.285,2958,2.285,3021,2.097,3160,2.218,3169,3.339,3176,4.338,3177,2.359,3178,4.975,3179,4.072,3180,3.524,3181,3.447,3182,3.447,3183,2.359,3184,3.447,3185,2.285,3186,4.615,3187,4.072,3188,5.26,3189,3.945,3190,2.285,3191,3.447,3192,2.359,3193,3.447,3194,3.447,3195,3.339,3196,3.339,3197,4.072,3198,2.359,3199,4.615,3200,2.285,3201,2.155,3202,2.285,3203,3.945,3204,2.285,3205,2.359,3206,1.857,3207,3.945,3208,2.359,3209,3.339,3210,4.072,3211,2.359,3212,2.285,3213,2.359,3214,2.359,3215,2.359,3216,2.359,3217,2.359,3218,2.359,3219,2.359,3220,2.359,3221,2.359,3222,2.285,3223,2.285,3224,2.285,3225,2.285,3226,3.447,3227,3.447,3228,4.479,3229,3.24,3230,4.091,3231,4.479,3232,4.479,3233,3.447,3234,3.447,3235,3.447,3236,3.447,3237,3.339,3238,3.24,3239,2.155,3240,2.285,3241,3.945,3242,2.285,3243,2.285,3244,2.359,3245,2.359,3246,2.285,3247,3.339,3248,3.339,3249,2.285]],["title/interfaces/NgxModalAriaLabelOptions.html",[0,0.079,3195,2.836]],["body/interfaces/NgxModalAriaLabelOptions.html",[0,0.148,2,0.604,3,0.037,4,0.033,5,0.037,10,0.093,11,0.15,12,0.54,16,0.216,17,0.006,19,0.203,27,0.075,28,1.636,29,1.188,32,0.814,35,1.98,36,2.172,37,1.863,41,1.891,74,1.35,88,0.003,89,0.003,90,0.378,97,1.934,106,1.104,109,1.485,122,1.396,136,2.38,137,1.24,152,1.282,171,1.88,180,0.945,187,0.495,205,0.307,245,0.969,271,1.536,273,1.841,311,1.287,317,0.729,324,3.15,330,2.632,334,1.637,335,1.773,343,1.98,347,3.313,350,1.669,351,2.259,379,1.477,480,1.469,481,1.549,512,1.419,516,1.848,600,1.521,648,3.283,654,2.293,672,1.934,673,2.195,700,1.81,702,1.853,709,3.404,780,1.419,783,3.759,792,1.209,796,2.136,800,1.891,803,1.891,813,2.812,823,3.025,863,1.469,871,2.195,900,4.364,986,4.798,1003,2.812,1112,2.195,1140,2.195,1187,2.098,1216,3.191,1230,1.81,1279,3.564,1280,1.891,1467,2.328,1502,3.478,1543,3.168,1552,2.195,1692,5.248,2001,3.564,2181,1.98,2246,2.195,2436,3.025,2536,1.98,2838,2.136,2946,2.328,2958,2.328,3021,2.136,3160,2.259,3169,2.328,3176,4.376,3177,2.403,3178,5.007,3179,3.493,3181,2.403,3182,2.403,3183,2.403,3184,3.493,3185,2.328,3186,4.649,3187,4.115,3188,5.279,3189,3.986,3190,2.328,3191,3.493,3192,2.403,3193,3.493,3194,3.493,3195,3.986,3196,3.384,3197,4.115,3198,2.403,3199,4.649,3200,2.328,3201,2.195,3202,2.328,3203,3.986,3204,2.328,3205,2.403,3206,1.891,3207,3.986,3208,2.403,3209,3.384,3210,4.115,3211,2.403,3212,2.328,3213,2.403,3214,2.403,3215,2.403,3216,2.403,3217,2.403,3218,2.403,3219,2.403,3220,2.403,3221,2.403,3222,2.328,3223,2.328,3224,2.328,3225,2.328,3226,3.493,3227,3.493,3228,4.518,3229,3.283,3230,4.127,3231,4.518,3232,4.518,3233,3.493,3234,3.493,3235,3.493,3236,3.493,3237,3.384,3238,3.283,3239,2.195,3240,2.328,3241,3.986,3242,2.328,3243,2.328,3244,2.403,3245,2.403,3246,2.328,3247,3.384,3248,3.384,3249,2.328]],["title/interfaces/NgxModalAriaLabelledOptions.html",[0,0.079,3196,2.836]],["body/interfaces/NgxModalAriaLabelledOptions.html",[0,0.148,2,0.604,3,0.037,4,0.033,5,0.037,10,0.093,11,0.15,12,0.54,16,0.216,17,0.006,19,0.203,27,0.075,28,1.636,29,1.188,32,0.814,35,1.98,36,2.172,37,1.863,41,1.891,74,1.35,88,0.003,89,0.003,90,0.378,97,1.934,106,1.104,109,1.485,122,1.396,136,2.38,137,1.24,152,1.282,171,1.88,180,0.945,187,0.495,205,0.307,245,0.969,271,1.536,273,1.841,311,1.287,317,0.729,324,3.15,330,2.632,334,1.637,335,1.773,343,1.98,347,3.313,350,1.669,351,2.259,379,1.477,480,1.469,481,1.549,512,1.419,516,1.848,600,1.521,648,3.283,654,2.293,672,1.934,673,2.195,700,1.81,702,1.853,709,3.404,780,1.419,783,3.759,792,1.209,796,2.136,800,1.891,803,1.891,813,2.812,823,3.025,863,1.469,871,2.195,900,4.364,986,4.798,1003,2.812,1112,2.195,1140,2.195,1187,2.098,1216,3.191,1230,1.81,1279,3.564,1280,1.891,1467,2.328,1502,3.478,1543,3.168,1552,2.195,1692,5.248,2001,3.564,2181,1.98,2246,2.195,2436,3.025,2536,1.98,2838,2.136,2946,2.328,2958,2.328,3021,2.136,3160,2.259,3169,2.328,3176,4.376,3177,2.403,3178,5.007,3179,3.493,3181,2.403,3182,2.403,3183,2.403,3184,3.493,3185,2.328,3186,4.649,3187,4.115,3188,5.279,3189,3.986,3190,2.328,3191,3.493,3192,2.403,3193,3.493,3194,3.493,3195,3.384,3196,3.986,3197,4.115,3198,2.403,3199,4.649,3200,2.328,3201,2.195,3202,2.328,3203,3.986,3204,2.328,3205,2.403,3206,1.891,3207,3.986,3208,2.403,3209,3.384,3210,4.115,3211,2.403,3212,2.328,3213,2.403,3214,2.403,3215,2.403,3216,2.403,3217,2.403,3218,2.403,3219,2.403,3220,2.403,3221,2.403,3222,2.328,3223,2.328,3224,2.328,3225,2.328,3226,3.493,3227,3.493,3228,4.518,3229,3.283,3230,4.127,3231,4.518,3232,4.518,3233,3.493,3234,3.493,3235,3.493,3236,3.493,3237,3.384,3238,3.283,3239,2.195,3240,2.328,3241,3.986,3242,2.328,3243,2.328,3244,2.403,3245,2.403,3246,2.328,3247,3.384,3248,3.384,3249,2.328]],["title/interfaces/NgxModalBaseConfiguration.html",[0,0.079,3237,2.836]],["body/interfaces/NgxModalBaseConfiguration.html",[0,0.148,2,0.606,3,0.038,4,0.033,5,0.038,10,0.094,11,0.15,12,0.542,16,0.215,17,0.006,19,0.203,27,0.075,28,1.638,29,1.19,32,0.817,35,1.987,36,2.178,37,1.867,41,1.898,74,1.355,88,0.003,89,0.003,90,0.38,97,1.941,106,1.108,109,1.486,122,1.401,136,2.386,137,1.242,152,1.257,171,1.773,180,0.947,187,0.497,205,0.308,245,0.972,271,1.54,273,1.846,311,1.291,317,0.732,324,3.155,330,2.638,334,1.643,335,1.779,343,1.987,347,3.32,350,1.675,351,2.267,379,1.479,480,1.474,481,1.554,512,1.424,516,1.851,600,1.527,648,3.292,654,2.299,672,1.941,673,2.203,700,1.817,702,1.856,709,3.409,780,1.424,783,3.767,792,2.074,796,2.143,800,1.898,803,1.898,813,2.819,823,3.033,863,1.474,871,2.203,900,3.961,986,4.802,1003,2.615,1112,2.203,1140,2.203,1187,2.477,1216,3.199,1230,2.638,1279,3.919,1280,1.898,1467,2.336,1502,3.483,1543,3.174,1552,2.203,1692,5.25,2001,3.571,2181,1.987,2246,2.203,2436,3.033,2536,1.987,2838,2.143,2946,2.336,2958,2.336,3021,2.143,3160,2.267,3169,2.336,3176,3.994,3177,2.411,3178,4.124,3179,3.502,3181,2.411,3182,2.411,3183,2.411,3184,3.502,3185,2.336,3186,4.656,3187,4.124,3188,5.283,3189,3.994,3190,2.336,3191,3.502,3192,2.411,3193,3.502,3194,3.502,3195,3.392,3196,3.392,3197,4.124,3198,2.411,3199,4.656,3200,2.336,3201,2.203,3202,2.336,3203,3.994,3204,2.336,3205,2.411,3206,1.898,3207,3.994,3208,2.411,3209,3.392,3210,4.124,3211,2.411,3212,2.336,3213,2.411,3214,2.411,3215,2.411,3216,2.411,3217,2.411,3218,2.411,3219,2.411,3220,2.411,3221,2.411,3222,2.336,3223,2.336,3224,2.336,3225,2.336,3226,3.502,3227,3.502,3228,4.525,3229,3.292,3230,4.134,3231,4.525,3232,4.525,3233,3.502,3234,3.502,3235,3.502,3236,3.502,3237,3.994,3238,4.713,3239,3.199,3240,2.336,3241,3.994,3242,2.336,3243,2.336,3244,2.411,3245,2.411,3246,2.336,3247,3.392,3248,3.392,3249,2.336]],["title/interfaces/NgxModalBaseOptions.html",[0,0.079,3241,2.836]],["body/interfaces/NgxModalBaseOptions.html",[0,0.146,2,0.562,3,0.035,4,0.031,5,0.035,10,0.087,11,0.142,12,0.834,15,2.257,16,0.221,17,0.006,19,0.196,27,0.073,28,1.753,29,1.154,32,1.018,35,1.842,36,2.455,37,1.787,41,2.607,74,1.861,88,0.003,89,0.003,90,0.352,97,1.8,106,1.027,109,1.518,122,1.298,136,2.974,137,1.197,152,1.287,171,1.71,180,1.067,187,0.683,205,0.285,245,0.901,271,1.735,273,2.3,311,1.197,317,0.678,324,3.203,330,2.496,334,1.523,335,1.649,343,1.842,347,3.513,350,2.301,351,3.114,379,1.555,480,1.366,481,1.441,512,1.32,516,1.906,600,2.097,648,3.71,654,2.174,672,1.8,673,2.042,700,2.496,702,1.8,709,3.288,780,1.32,783,3.987,792,1.125,796,2.945,800,1.759,803,1.759,813,2.667,823,3.779,863,1.366,871,2.042,900,3.841,986,4.71,1003,2.535,1112,2.042,1140,3.026,1187,2.371,1216,3.026,1230,1.684,1279,3.779,1280,1.759,1467,3.209,1502,3.359,1543,3.359,1552,2.042,1692,5.258,2001,4.226,2181,1.842,2246,2.042,2436,3.417,2536,2.73,2838,2.945,2946,3.209,2958,2.165,3021,1.987,3160,2.101,3169,2.165,3176,3.823,3177,2.235,3178,3.946,3179,3.946,3180,3.339,3181,2.235,3182,2.235,3183,2.235,3184,3.312,3185,2.165,3186,4.514,3187,3.946,3188,5.258,3189,3.823,3190,2.165,3191,3.312,3192,2.235,3193,3.312,3194,3.312,3195,3.209,3196,3.209,3197,3.946,3198,2.235,3199,4.514,3200,2.165,3201,2.042,3202,2.165,3203,3.823,3204,2.165,3205,2.235,3206,1.759,3207,3.823,3208,2.235,3209,3.209,3210,4.66,3211,2.235,3212,2.165,3213,2.235,3214,2.235,3215,2.235,3216,2.235,3217,2.235,3218,2.235,3219,2.235,3220,2.235,3221,2.235,3222,2.165,3223,2.165,3224,2.165,3225,2.165,3226,3.946,3227,3.312,3228,4.364,3229,3.114,3230,3.987,3231,4.364,3232,4.364,3233,3.312,3234,3.312,3235,3.312,3236,3.312,3237,3.209,3238,3.114,3239,2.042,3240,2.165,3241,4.227,3242,3.209,3243,4.227,3244,3.312,3245,3.312,3246,4.227,3247,3.209,3248,3.209,3249,2.165]],["title/interfaces/NgxModalCDKModalConfiguration.html",[0,0.079,3207,2.836]],["body/interfaces/NgxModalCDKModalConfiguration.html",[0,0.146,2,0.561,3,0.035,4,0.031,5,0.035,10,0.087,11,0.142,12,0.802,16,0.216,17,0.006,19,0.196,27,0.073,28,1.599,29,1.311,32,0.771,35,1.839,36,2.058,37,1.785,41,1.756,74,1.254,88,0.003,89,0.003,90,0.351,97,2.664,106,1.52,109,1.503,122,1.296,136,2.254,137,1.196,152,1.286,171,1.708,180,0.895,187,0.46,205,0.285,245,0.9,271,1.455,273,1.744,311,1.195,317,0.677,324,3.057,330,3.285,334,2.254,335,1.646,343,2.727,347,3.174,350,1.55,351,2.098,379,1.554,480,2.022,481,2.132,512,1.954,516,1.904,600,1.413,648,3.11,654,2.172,672,1.797,673,2.039,700,1.681,702,1.95,709,3.285,780,1.954,783,3.602,792,1.123,796,1.984,800,2.604,803,3.103,813,2.664,823,2.865,863,1.364,871,2.039,900,3.838,986,4.708,1003,2.534,1112,3.022,1140,2.039,1187,1.988,1216,3.983,1230,1.681,1279,3.414,1280,2.604,1467,2.162,1502,4.148,1543,3.357,1552,2.039,1692,5.199,2001,3.414,2181,2.727,2246,3.022,2436,3.414,2536,1.839,2838,1.984,2946,2.162,2958,3.205,3021,1.984,3160,2.098,3169,2.162,3176,3.819,3177,2.232,3178,3.943,3179,3.308,3181,2.232,3182,2.232,3183,2.232,3184,4.36,3185,2.162,3186,5.36,3187,3.943,3188,5.383,3189,3.819,3190,2.162,3191,3.308,3192,2.232,3193,3.308,3194,3.308,3195,3.205,3196,3.205,3197,3.943,3198,2.232,3199,4.511,3200,2.162,3201,2.039,3202,2.162,3203,3.819,3204,2.162,3205,2.232,3206,1.756,3207,4.224,3208,3.308,3209,4.224,3210,4.36,3211,3.308,3212,3.205,3213,3.308,3214,3.308,3215,3.308,3216,3.308,3217,3.308,3218,3.308,3219,3.308,3220,3.308,3221,3.308,3222,3.205,3223,4.224,3224,4.224,3225,2.162,3226,3.308,3227,3.308,3228,4.36,3229,3.11,3230,3.983,3231,4.36,3232,4.36,3233,3.308,3234,3.308,3235,3.308,3236,3.308,3237,3.205,3238,3.11,3239,2.039,3240,2.162,3241,3.819,3242,2.162,3243,2.162,3244,2.232,3245,2.232,3246,2.162,3247,3.205,3248,3.205,3249,2.162]],["title/interfaces/NgxModalComponentConfiguration.html",[0,0.079,3225,2.836]],["body/interfaces/NgxModalComponentConfiguration.html",[0,0.147,2,0.579,3,0.036,4,0.032,5,0.036,10,0.09,11,0.145,12,0.524,16,0.217,17,0.006,19,0.199,27,0.074,28,1.764,29,1.169,32,0.79,35,1.9,36,2.108,37,1.819,41,1.814,74,1.295,88,0.003,89,0.003,90,0.363,97,1.856,106,1.059,109,1.514,122,1.339,136,2.309,137,1.354,152,1.245,171,1.735,180,0.916,187,0.475,205,0.294,245,0.929,271,1.49,273,2.335,311,1.234,317,0.699,324,3.348,330,2.553,334,1.571,335,1.701,343,1.9,347,3.566,350,1.601,351,2.167,379,1.519,480,1.409,481,1.486,512,1.362,516,1.811,600,2.145,648,3.185,654,2.224,672,1.856,673,2.106,700,1.737,702,1.823,709,3.337,780,1.362,783,4.046,792,1.16,796,2.049,800,1.814,803,1.814,813,3.235,823,2.935,863,1.409,871,2.106,900,3.89,986,5.082,1003,2.568,1112,2.106,1140,2.106,1187,2.036,1216,3.096,1230,1.737,1279,3.48,1280,1.814,1467,2.233,1502,3.41,1543,3.41,1552,2.106,1692,5.307,2001,3.48,2181,1.9,2246,2.106,2436,2.935,2536,1.9,2838,2.049,2946,2.233,2958,2.233,3021,2.049,3160,2.167,3169,2.233,3176,3.892,3177,2.305,3178,4.018,3179,3.389,3181,2.305,3182,2.305,3183,2.305,3184,3.389,3185,2.233,3186,4.572,3187,4.719,3188,5.374,3189,4.291,3190,2.233,3191,3.389,3192,2.305,3193,3.389,3194,3.389,3195,3.283,3196,3.283,3197,4.018,3198,2.305,3199,4.572,3200,2.233,3201,2.106,3202,2.233,3203,4.291,3204,2.233,3205,2.305,3206,1.814,3207,3.892,3208,2.305,3209,3.283,3210,4.018,3211,2.305,3212,2.233,3213,2.305,3214,2.305,3215,2.305,3216,2.305,3217,2.305,3218,2.305,3219,2.305,3220,2.305,3221,2.305,3222,2.233,3223,2.233,3224,2.233,3225,3.283,3226,4.018,3227,3.389,3228,4.935,3229,3.777,3230,4.508,3231,4.935,3232,4.935,3233,4.018,3234,4.018,3235,4.018,3236,4.018,3237,3.283,3238,3.185,3239,2.106,3240,2.233,3241,3.892,3242,2.233,3243,2.233,3244,2.305,3245,2.305,3246,2.233,3247,3.283,3248,3.283,3249,2.233]],["title/interfaces/NgxModalComponentOptions.html",[0,0.079,3248,2.836]],["body/interfaces/NgxModalComponentOptions.html",[0,0.147,2,0.585,3,0.036,4,0.032,5,0.036,10,0.09,11,0.146,12,0.528,16,0.22,17,0.006,19,0.2,27,0.074,28,1.62,29,1.173,32,0.796,35,1.918,36,2.122,37,1.829,41,1.831,74,1.308,88,0.003,89,0.003,90,0.366,97,1.873,106,1.069,109,1.5,122,1.352,136,2.325,137,1.358,152,1.248,171,1.856,180,0.923,187,0.479,205,0.297,245,0.938,271,1.5,273,1.798,311,1.246,317,0.706,324,3.358,330,2.571,334,1.586,335,1.717,343,1.918,347,3.253,350,1.616,351,2.187,379,1.458,480,1.422,481,1.5,512,1.374,516,1.82,600,1.473,648,3.207,654,2.24,672,1.873,673,2.126,700,1.753,702,1.83,709,3.352,780,1.374,783,3.691,792,1.171,796,2.068,800,1.831,803,1.831,813,3.253,823,2.955,863,1.422,871,2.126,900,3.905,986,5.09,1003,2.784,1112,2.126,1140,2.126,1187,2.05,1216,3.117,1230,1.753,1279,3.499,1280,1.831,1467,2.254,1502,3.425,1543,3.11,1552,2.126,1692,5.282,2001,3.499,2181,1.918,2246,2.126,2436,2.955,2536,1.918,2838,2.068,2946,2.254,2958,2.254,3021,2.068,3160,2.187,3169,2.254,3176,3.914,3177,2.327,3178,4.04,3179,3.412,3181,2.327,3182,2.327,3183,2.327,3184,3.412,3185,2.254,3186,4.589,3187,4.738,3188,5.383,3189,4.31,3190,2.254,3191,3.412,3192,2.327,3193,3.412,3194,3.412,3195,3.305,3196,3.305,3197,4.04,3198,2.327,3199,4.589,3200,2.254,3201,2.126,3202,2.254,3203,4.31,3204,2.254,3205,2.327,3206,1.831,3207,3.914,3208,2.327,3209,3.305,3210,4.04,3211,2.327,3212,2.254,3213,2.327,3214,2.327,3215,2.327,3216,2.327,3217,2.327,3218,2.327,3219,2.327,3220,2.327,3221,2.327,3222,2.254,3223,2.254,3224,2.254,3225,2.254,3226,3.412,3227,3.412,3228,4.951,3229,3.798,3230,4.523,3231,4.951,3232,4.951,3233,4.04,3234,4.04,3235,4.04,3236,4.04,3237,3.305,3238,3.207,3239,2.126,3240,2.254,3241,4.31,3242,2.254,3243,2.254,3244,2.327,3245,2.327,3246,2.254,3247,3.305,3248,3.914,3249,2.254]],["title/interfaces/NgxModalGlobalCDKConfiguration.html",[0,0.079,3199,2.836]],["body/interfaces/NgxModalGlobalCDKConfiguration.html",[0,0.147,2,0.579,3,0.036,4,0.032,5,0.036,10,0.09,11,0.145,12,0.84,16,0.217,17,0.006,19,0.199,27,0.074,28,1.615,29,1.363,32,0.79,35,1.9,36,2.108,37,1.819,41,1.814,74,1.295,88,0.003,89,0.003,90,0.534,97,1.856,106,1.059,109,1.477,122,1.339,136,2.309,137,1.215,152,1.293,171,1.735,180,0.916,187,0.475,205,0.294,245,0.929,271,1.49,273,1.786,311,1.815,317,0.699,324,3.098,330,2.553,334,1.571,335,1.701,343,1.9,347,3.235,350,1.601,351,2.167,379,1.452,480,1.409,481,1.486,512,1.362,516,1.811,600,1.459,648,3.185,654,2.908,672,1.856,673,2.106,700,1.737,702,2.021,709,4.091,780,1.362,783,3.671,792,1.16,796,2.049,800,1.814,803,1.814,813,2.728,823,2.935,863,1.409,871,2.106,900,3.89,986,4.748,1003,2.568,1112,2.106,1140,2.106,1187,2.036,1216,3.096,1230,1.737,1279,3.48,1280,1.814,1467,2.233,1502,3.41,1543,3.093,1552,2.106,1692,5.307,2001,3.48,2181,1.9,2246,2.106,2436,2.935,2536,1.9,2838,2.049,2946,2.233,2958,2.233,3021,3.012,3160,2.167,3169,2.233,3176,3.892,3177,2.305,3178,4.018,3179,3.389,3181,2.305,3182,2.305,3183,2.305,3184,3.389,3185,2.233,3186,4.572,3187,4.018,3188,5.236,3189,3.892,3190,2.233,3191,3.389,3192,2.305,3193,3.389,3194,3.389,3195,3.283,3196,3.283,3197,4.018,3198,2.305,3199,4.78,3200,4.291,3201,3.096,3202,4.291,3203,4.291,3204,4.291,3205,3.389,3206,3.486,3207,3.892,3208,2.305,3209,3.283,3210,4.018,3211,2.305,3212,2.233,3213,2.305,3214,2.305,3215,2.305,3216,2.305,3217,2.305,3218,2.305,3219,2.305,3220,2.305,3221,2.305,3222,2.233,3223,2.233,3224,2.233,3225,2.233,3226,3.389,3227,3.389,3228,4.43,3229,3.185,3230,4.046,3231,4.43,3232,4.43,3233,3.389,3234,3.389,3235,3.389,3236,3.389,3237,3.283,3238,3.185,3239,2.106,3240,2.233,3241,3.892,3242,2.233,3243,2.233,3244,2.305,3245,2.305,3246,2.233,3247,3.283,3248,3.283,3249,2.233]],["title/injectables/NgxModalService.html",[259,1.407,3146,4.034]],["body/injectables/NgxModalService.html",[3,0.026,4,0.023,5,0.026,7,2.672,10,0.066,11,0.115,12,0.803,15,2.8,16,0.21,17,0.006,19,0.206,27,0.042,28,0.847,29,0.934,31,4.611,32,1.19,34,2.453,35,4.761,37,2.265,42,2.233,44,2.199,47,1.7,48,1.198,49,2.071,55,1.052,61,1.695,68,1.479,72,1.09,73,1.994,81,2.272,88,0.002,89,0.002,90,0.421,96,1.047,105,4.52,109,1.44,122,2.538,128,2.448,134,2.767,137,1.256,174,0.851,180,1.181,183,0.812,184,1.283,187,1.099,191,1.465,193,2.087,194,2.132,196,1.44,205,0.216,235,3.996,238,1.071,245,0.682,249,3.117,259,1.286,261,1.198,268,2.375,272,0.692,273,1.41,300,1.42,308,0.988,311,0.906,317,1.247,332,1.545,335,1.974,349,4.107,350,1.175,369,2.389,377,2.767,379,1.46,412,1.694,426,2.444,428,1.814,501,0.755,502,2.735,600,2.101,654,2.868,702,1.687,709,1.274,710,1.691,715,2.816,729,0.878,780,1.58,808,1.75,809,6.021,821,2.675,822,3.446,824,1.248,830,2.059,831,2.059,833,2.515,834,1.814,918,1.59,919,4.332,945,3.686,946,3.27,947,2.515,954,4.25,963,2.331,986,3.884,989,3.455,1003,2.658,1013,1.638,1034,1.971,1138,2.444,1184,1.274,1186,1.465,1187,1.016,1215,1.545,1250,3.996,1255,2.105,1331,2.87,1355,2.068,1389,3.996,1469,3.601,1496,1.75,1502,1.302,1580,1.302,1582,1.971,1692,5.254,1699,2.331,1725,2.331,1726,1.504,1895,3.601,1924,1.428,1996,2.675,2046,2.068,2047,2.068,2049,2.527,2080,2.068,2124,1.59,2257,2.515,2259,2.331,2411,3.686,2430,2.068,2491,4.394,2514,1.887,2579,3.996,2654,2.378,2657,2.515,2694,5.198,2705,3.455,2805,2.068,2833,2.985,2838,3.353,3047,1.887,3146,5.662,3147,2.527,3148,2.527,3160,1.59,3162,2.185,3163,1.887,3164,3.455,3165,2.185,3167,2.331,3174,3.455,3185,1.638,3188,3.119,3189,3.215,3200,1.638,3202,1.638,3204,1.638,3206,1.331,3223,1.638,3224,1.638,3230,2.444,3238,2.515,3240,1.638,3243,4.732,3246,1.638,3249,5.167,3250,2.824,3251,5.54,3252,5.54,3253,5.54,3254,5.54,3255,5.54,3256,5.54,3257,4.466,3258,2.824,3259,2.824,3260,2.824,3261,7.473,3262,4.466,3263,7.64,3264,6.86,3265,2.824,3266,4.466,3267,6.298,3268,2.824,3269,2.824,3270,2.824,3271,2.824,3272,4.466,3273,2.824,3274,2.824,3275,4.466,3276,4.466,3277,2.824,3278,4.466,3279,2.824,3280,4.466,3281,2.824,3282,5.635,3283,2.824,3284,2.824,3285,2.824,3286,2.331,3287,2.527,3288,2.331,3289,2.824,3290,2.824,3291,2.824,3292,2.824,3293,2.824,3294,4.466,3295,2.824,3296,2.824,3297,2.824,3298,2.824,3299,2.824,3300,2.824,3301,2.824,3302,7.64,3303,2.824,3304,2.824,3305,2.824,3306,2.824,3307,2.824,3308,2.824,3309,2.824,3310,4.466,3311,2.824,3312,2.824,3313,2.824,3314,2.824,3315,2.824,3316,2.824,3317,2.824,3318,2.824,3319,2.068,3320,2.824,3321,2.824,3322,2.824,3323,2.824,3324,2.824,3325,2.824,3326,4.466,3327,2.824,3328,2.824,3329,4.466,3330,6.298,3331,2.824,3332,4.466,3333,2.824,3334,2.824,3335,2.824,3336,2.824,3337,2.824,3338,2.824,3339,2.824,3340,2.824,3341,2.824,3342,2.824,3343,2.824,3344,2.824,3345,2.824,3346,2.824,3347,2.824,3348,2.824,3349,2.824,3350,2.824,3351,2.824,3352,2.824,3353,2.824,3354,2.824,3355,2.824]],["title/interfaces/NgxModalTypeOptions.html",[0,0.079,3247,2.836]],["body/interfaces/NgxModalTypeOptions.html",[0,0.148,2,0.599,3,0.037,4,0.033,5,0.037,10,0.093,11,0.149,12,0.696,16,0.219,17,0.006,19,0.202,27,0.075,28,1.632,29,1.185,32,0.81,35,1.965,36,2.16,37,1.855,41,1.876,74,1.34,88,0.003,89,0.003,90,0.375,97,1.919,106,1.096,109,1.504,122,1.385,136,2.367,137,1.235,152,1.28,171,1.874,180,0.939,187,0.491,205,0.304,245,0.961,271,1.527,273,1.831,311,1.277,317,0.723,324,3.14,330,2.616,334,1.624,335,1.759,343,1.965,347,3.298,350,1.656,351,2.241,379,1.472,480,1.457,481,1.537,512,1.408,516,1.841,600,1.509,648,3.265,654,2.28,672,1.919,673,2.178,700,1.796,702,1.848,709,3.391,780,1.408,783,3.742,792,1.199,796,2.119,800,1.876,803,1.876,813,2.796,823,3.007,863,1.457,871,2.178,900,3.943,986,4.985,1003,2.931,1112,2.178,1140,2.178,1187,2.086,1216,3.173,1230,1.796,1279,3.548,1280,1.876,1467,2.309,1502,3.465,1543,3.154,1552,2.178,1692,5.242,2001,3.548,2181,1.965,2246,2.178,2436,3.007,2536,1.965,2838,2.119,2946,2.309,2958,2.309,3021,2.119,3160,2.241,3169,2.309,3176,3.968,3177,2.384,3178,4.097,3179,3.473,3181,2.384,3182,2.384,3183,2.384,3184,3.473,3185,2.309,3186,4.634,3187,4.097,3188,5.271,3189,3.968,3190,2.309,3191,3.473,3192,2.384,3193,3.473,3194,3.473,3195,3.364,3196,3.364,3197,4.097,3198,2.384,3199,4.634,3200,2.309,3201,2.178,3202,2.309,3203,3.968,3204,2.309,3205,2.384,3206,1.876,3207,3.968,3208,2.384,3209,3.364,3210,4.097,3211,2.384,3212,2.309,3213,2.384,3214,2.384,3215,2.384,3216,2.384,3217,2.384,3218,2.384,3219,2.384,3220,2.384,3221,2.384,3222,2.309,3223,2.309,3224,2.309,3225,2.309,3226,3.473,3227,3.473,3228,4.501,3229,3.265,3230,4.112,3231,4.501,3232,4.501,3233,3.473,3234,3.473,3235,3.473,3236,3.473,3237,3.364,3238,3.265,3239,2.178,3240,2.309,3241,4.36,3242,2.309,3243,2.309,3244,2.384,3245,2.384,3246,2.309,3247,3.968,3248,3.364,3249,2.309]],["title/injectables/NgxOnlineService.html",[259,1.407,1925,4.034]],["body/injectables/NgxOnlineService.html",[3,0.052,4,0.046,5,0.052,10,0.13,11,0.188,16,0.181,17,0.006,19,0.22,27,0.052,32,1.215,49,1.79,57,3.546,61,2.661,88,0.004,89,0.004,90,0.527,96,0.701,174,2.211,183,1.333,184,1.288,187,1.144,196,1.016,205,0.427,206,1.658,259,2.112,261,2.371,268,2.807,272,1.369,300,1.727,308,1.125,317,1.333,335,3.242,366,3.242,368,3.949,369,2.444,373,3.843,412,3.8,501,1.494,513,3.458,660,4.758,780,2.595,824,3.619,958,3.22,1060,3.146,1186,2.899,1187,2.011,1230,4.325,1255,2.634,1285,6.727,1381,4.752,1413,4.394,1415,3.058,1416,2.899,1417,5,1419,2.577,1469,3.458,1726,2.976,1731,3.735,1862,5.853,1875,6.76,1914,4.903,1924,2.827,1925,6.055,1926,8.452,1938,5.812,1961,6.055,1962,4.613,1963,4.613,2740,4.323,3356,9.446,3357,5.589,3358,8.19,3359,7.336,3360,5.589,3361,5.589,3362,7.336,3363,5.589,3364,5.589,3365,7.336,3366,5.589,3367,5.589]],["title/directives/NgxQueryParamFormSyncComponent.html",[292,0.725,601,2.304]],["body/directives/NgxQueryParamFormSyncComponent.html",[0,0.071,3,0.026,4,0.023,5,0.026,7,1.871,10,0.065,11,0.16,12,0.86,15,1.134,16,0.174,17,0.006,19,0.183,20,3.229,21,1.665,27,0.051,28,1.872,32,1.133,34,2.829,36,1.035,40,6.498,42,1.289,44,1.848,49,1.939,50,2.641,54,1.254,55,2.325,57,2.947,61,2.083,64,1.665,66,1.949,76,1.054,83,3.072,88,0.002,89,0.002,90,0.416,96,0.783,97,2.127,104,2.486,106,1.718,107,2.035,109,1.04,135,0.891,137,1.119,139,1.156,152,0.743,162,1.835,171,0.652,174,1.329,177,1.665,180,1.011,183,1.316,184,1.358,187,1.081,193,1.929,194,2.522,195,2.035,196,1.431,200,2.641,203,1.734,205,0.212,206,1.309,209,1.665,218,2.15,233,1.48,237,1.203,240,1.939,255,2.888,268,2.448,272,0.681,274,2.878,292,0.654,294,0.671,298,0.825,300,1.503,308,0.807,317,1.511,323,1.857,324,1.093,332,3.415,333,3.415,335,1.228,350,3.912,358,1.722,366,2.423,367,4.518,368,2.644,369,1.382,373,2.758,379,1.654,382,7.063,383,1.857,389,2.294,392,1.437,412,2.581,424,1.612,425,1.786,449,1.857,501,0.743,513,3.208,524,0.906,535,1.203,568,2.515,601,3.579,635,4.171,706,4.373,714,2.177,724,2.374,764,3.397,795,1.939,821,1.665,823,1.441,824,1.228,830,1.281,831,1.281,833,1.565,837,1.939,838,2.15,947,3.087,958,1.093,964,2.559,1003,0.906,1020,3.826,1060,3.087,1101,2.294,1102,3.323,1111,2.833,1149,3.64,1151,2.035,1161,5.055,1232,6.058,1233,1.786,1279,2.287,1286,2.294,1355,2.035,1370,2.294,1421,2.486,1469,2.079,1486,2.15,1544,4.828,1675,2.294,1679,2.413,1715,2.486,1778,2.294,1850,3.946,1891,1.665,1904,2.035,1914,1.857,1922,3.208,1924,1.406,1931,2.287,1940,1.857,1979,2.15,2080,2.035,2099,3.946,2110,1.939,2124,1.565,2147,6.094,2158,1.521,2170,2.641,2171,1.722,2357,2.486,2360,3.397,2365,3.826,2430,2.035,2513,2.486,2514,3.664,2567,4.355,2654,1.48,2724,2.486,2833,1.857,3025,1.786,3063,2.294,3167,2.294,3230,1.521,3288,2.294,3368,8.874,3369,8.874,3370,2.779,3371,8.874,3372,7.593,3373,6.807,3374,5.483,3375,7.244,3376,6.807,3377,4.41,3378,6.807,3379,2.779,3380,3.946,3381,2.779,3382,9.286,3383,2.779,3384,4.41,3385,2.779,3386,6.241,3387,2.779,3388,2.779,3389,2.779,3390,2.779,3391,6.241,3392,6.241,3393,4.41,3394,2.779,3395,6.09,3396,2.779,3397,2.779,3398,5.483,3399,2.779,3400,2.779,3401,4.41,3402,6.241,3403,2.779,3404,4.41,3405,2.779,3406,4.41,3407,2.779,3408,4.41,3409,2.779,3410,7.244,3411,2.779,3412,2.779,3413,2.779,3414,2.779,3415,2.779,3416,2.779,3417,3.946,3418,2.779,3419,2.779,3420,2.779,3421,2.779,3422,2.779,3423,5.483,3424,2.779,3425,2.779,3426,2.779,3427,4.41,3428,2.779,3429,1.939,3430,2.779,3431,2.779,3432,2.779,3433,2.779,3434,2.779,3435,2.779,3436,2.779,3437,2.779,3438,6.241,3439,5.483,3440,2.779,3441,2.779,3442,2.779,3443,2.779,3444,2.779,3445,2.779,3446,4.41,3447,2.779,3448,2.779,3449,2.779,3450,2.486,3451,2.779,3452,2.779,3453,2.779,3454,2.779,3455,2.779,3456,2.779,3457,2.779,3458,2.779,3459,2.779,3460,2.779,3461,4.41,3462,4.41,3463,2.779,3464,2.779,3465,2.779,3466,2.779,3467,2.779,3468,2.779,3469,2.779,3470,2.779,3471,2.779]],["title/interfaces/NgxReplaceElementsConfigurationElement.html",[0,0.079,3472,4.034]],["body/interfaces/NgxReplaceElementsConfigurationElement.html",[0,0.14,2,1.094,3,0.068,4,0.06,5,0.068,10,0.169,11,0.222,12,0.801,16,0.215,17,0.006,27,0.089,28,1.378,29,1.369,88,0.005,89,0.005,152,1.341,271,1.914,298,2.835,516,2.34,627,5.071,792,2.606,3472,7.137,3473,6.502,3474,6.502,3475,7.886,3476,8.548,3477,6.502,3478,5.998,3479,5.621]],["title/interfaces/NgxReplaceElementsItem.html",[0,0.079,3479,3.781]],["body/interfaces/NgxReplaceElementsItem.html",[0,0.139,2,1.087,3,0.067,4,0.059,5,0.067,10,0.168,11,0.221,12,0.798,16,0.215,17,0.006,27,0.089,28,1.808,29,1.071,88,0.005,89,0.005,152,1.38,271,2.511,298,2.143,516,1.769,627,6.653,792,2.873,3472,5.96,3473,6.46,3474,6.46,3475,5.96,3476,7.707,3477,6.46,3478,5.96,3479,6.664]],["title/pipes/NgxReplaceElementsPipe.html",[174,1.473,3480,4.373]],["body/pipes/NgxReplaceElementsPipe.html",[3,0.036,4,0.046,5,0.036,7,1.619,11,0.144,12,0.353,16,0.084,17,0.006,19,0.198,27,0.062,28,1.066,32,1.321,34,1.619,37,1.811,41,1.799,42,2.401,44,1.927,47,1.5,49,2.029,50,5.329,51,2.452,55,1.422,61,2.403,66,1.686,74,2.247,75,3.758,88,0.003,89,0.003,90,0.63,96,0.705,97,1.84,98,3.166,106,2.027,109,1.331,136,2.725,137,1.396,152,1.258,174,2.681,176,1.98,177,2.286,179,1.05,180,1.193,182,1.924,183,0.694,184,0.6,185,3.653,186,3.758,187,0.824,193,0.935,194,2.289,195,2.795,196,0.694,200,4.703,203,2.211,204,3.076,205,0.292,206,1.133,211,4.888,237,2.89,238,2.531,241,3.15,250,2.551,255,2.386,271,1.94,298,2.723,300,1.43,304,1.205,308,0.727,322,5.031,323,3.758,324,1.5,328,4.564,341,2.254,358,2.365,369,2.071,379,1.566,425,2.452,426,2.088,428,2.452,431,2.994,432,2.149,467,5.166,479,1.5,501,1.02,509,2.141,512,1.35,515,1.76,516,2.317,524,2.176,544,2.65,627,2.663,650,1.884,700,3.012,715,1.473,729,1.186,744,3.15,762,1.893,773,2.952,781,3.484,803,2.65,830,2.592,831,2.592,835,2.088,863,2.696,918,2.149,958,1.5,960,1.884,962,5.045,964,3.262,972,3.262,1002,3.15,1009,2.795,1111,2.452,1174,3.15,1184,1.722,1187,1.373,1279,1.98,1303,2.286,1352,3.415,1355,4.117,1381,2.214,1390,1.93,1415,3.076,1416,1.98,1419,1.76,1429,2.952,1486,6.743,1514,4.641,1545,2.952,1552,2.088,1582,2.663,1612,3.076,1618,5.248,1679,4.03,1731,2.551,1994,2.952,1996,2.286,2001,1.98,2110,2.663,2179,2.286,2257,3.759,2286,2.952,2360,2.365,2375,3.15,2430,4.117,2436,1.98,2441,4.641,2546,3.15,2621,2.952,2657,2.149,2805,2.795,2833,3.758,2840,3.415,2878,4.641,2936,2.952,3110,2.952,3166,3.415,3175,4.641,3186,3.873,3212,2.214,3230,2.088,3239,2.088,3475,6.079,3478,3.15,3479,5.698,3480,5.973,3481,7.366,3482,7.366,3483,3.817,3484,7.366,3485,7.852,3486,3.817,3487,6.676,3488,6.676,3489,5.623,3490,3.817,3491,5.623,3492,5.623,3493,3.817,3494,3.817,3495,3.817,3496,3.817,3497,7.366,3498,3.817,3499,3.817,3500,3.817,3501,3.817,3502,3.817,3503,3.817,3504,8.717,3505,6.676,3506,5.623,3507,3.817,3508,3.817,3509,3.817,3510,3.817,3511,3.817,3512,3.817,3513,3.817,3514,3.15,3515,3.817,3516,3.817,3517,3.817,3518,3.817,3519,3.817,3520,3.817,3521,5.623,3522,3.817,3523,3.415,3524,3.817,3525,3.817,3526,3.817,3527,3.817,3528,3.817,3529,3.817,3530,3.817,3531,3.817,3532,3.817,3533,5.623,3534,3.415,3535,3.817,3536,3.415,3537,3.817,3538,5.623,3539,3.817,3540,3.415,3541,3.817,3542,3.817,3543,6.676,3544,3.415,3545,5.623,3546,3.817,3547,3.817,3548,3.817,3549,3.817,3550,3.817,3551,3.817,3552,3.817,3553,3.817,3554,3.817,3555,3.817,3556,3.817,3557,3.817,3558,3.817,3559,3.817,3560,3.817,3561,3.817,3562,3.817,3563,3.817,3564,3.817]],["title/classes/NgxSaveOnExitAbstractService.html",[90,0.461,3565,4.373]],["body/classes/NgxSaveOnExitAbstractService.html",[3,0.064,4,0.056,5,0.064,10,0.159,11,0.214,12,0.867,15,3.403,16,0.184,17,0.006,19,0.242,27,0.064,29,1.014,88,0.004,89,0.004,90,0.645,92,4.238,109,1.374,122,2.901,184,1.536,187,1.029,268,2.591,272,1.676,335,3.684,350,3.469,387,6.45,568,3.101,602,3.844,823,4.325,1233,4.395,2248,6.882,2567,4.773,2629,7.46,3565,7.46,3566,8.047,3567,8.047,3568,6.841,3569,8.994,3570,8.994,3571,6.841,3572,8.338,3573,8.338,3574,6.841,3575,8.338,3576,8.338,3577,6.841,3578,6.841,3579,6.841]],["title/directives/NgxSaveOnExitComponent.html",[292,0.725,602,2.254]],["body/directives/NgxSaveOnExitComponent.html",[3,0.047,4,0.041,5,0.047,10,0.117,11,0.175,12,0.632,16,0.151,17,0.006,19,0.184,27,0.047,29,1.332,32,1.083,34,1.442,44,1.953,47,1.578,49,1.49,57,2.952,61,2.087,81,2.756,88,0.004,89,0.004,90,0.472,96,0.855,109,1.372,137,1.368,180,1.105,183,1.239,184,1.535,187,1.154,193,1.67,196,1.512,205,0.383,206,2.024,268,2.119,272,1.227,292,1.011,294,1.21,300,1.651,305,3.839,308,1.126,310,3.669,311,3.198,315,2.473,317,1.239,324,3.531,332,2.741,340,3.001,349,2.821,366,4.061,368,4.013,369,1.955,373,3.677,387,5.997,412,3.301,425,4.981,568,3.043,602,3.144,660,3.731,702,2.078,705,4.981,813,3.288,952,6.937,1110,2.907,1230,3.498,1419,4.498,1724,3.876,1914,4.557,3047,4.557,3222,5.211,3566,8.485,3567,8.485,3580,5.01,3581,7.753,3582,6.819,3583,8.322,3584,8.322,3585,6.819,3586,6.819,3587,8.982,3588,7.753,3589,6.819,3590,7.753,3591,6.819,3592,5.01,3593,5.01,3594,6.102,3595,5.01,3596,5.01,3597,6.819,3598,6.819,3599,5.629,3600,6.937,3601,6.819,3602,6.819,3603,5.01,3604,5.01,3605,5.01,3606,5.01,3607,5.01,3608,5.01,3609,5.01]],["title/injectables/NgxSignalStoreService.html",[259,1.407,3610,4.373]],["body/injectables/NgxSignalStoreService.html",[3,0.062,4,0.055,5,0.062,10,0.155,11,0.21,16,0.147,17,0.006,19,0.22,27,0.062,44,2.083,49,1.789,57,3.545,88,0.004,89,0.004,90,0.626,96,0.833,99,4.751,106,2.254,184,1.045,187,1.01,196,1.613,205,0.508,259,2.357,261,2.818,274,4.664,347,3.202,367,4.184,379,1.224,392,3.233,568,3.21,729,2.064,780,3.141,830,3.062,831,3.062,833,3.739,958,2.611,1003,2.164,1255,3.13,1369,4.751,1483,4.863,1891,3.978,2711,6.334,3610,7.943,3611,6.641,3612,7.363,3613,6.641,3614,8.188,3615,5.942,3616,6.641,3617,8.188,3618,6.867,3619,5.137,3620,6.334]],["title/interfaces/NgxSignalStoreSlice.html",[0,0.079,3621,3.781]],["body/interfaces/NgxSignalStoreSlice.html",[0,0.123,2,0.728,3,0.045,4,0.04,5,0.045,10,0.113,11,0.171,16,0.218,17,0.006,19,0.221,27,0.088,28,1.874,29,1.413,36,1.803,37,1.806,54,2.184,68,3.016,76,3.11,88,0.004,89,0.004,96,0.607,105,4.126,114,3.277,135,1.552,137,0.795,139,2.771,148,4.287,151,5.082,152,0.902,156,2.998,162,2.014,171,2.177,173,4.892,183,1.563,190,2.242,205,0.37,271,1.275,273,3.134,274,4.098,300,0.843,308,0.626,317,1.711,350,2.014,392,1.577,432,2.725,476,1.603,509,1.552,670,4.812,792,2.007,991,3.234,1003,1.577,1280,3.866,1317,2.334,1369,3.864,1679,3.644,2162,3.546,2267,4.647,3025,5.526,3026,2.808,3612,7.176,3618,3.744,3619,3.744,3621,6.345,3622,3.994,3623,3.994,3624,5.497,3625,3.744,3626,5.497,3627,3.994,3628,3.994,3629,7.099,3630,5.497,3631,6.285,3632,5.497,3633,3.994,3634,3.994,3635,6.77,3636,5.497,3637,6.285,3638,3.994,3639,3.994,3640,6.285,3641,5.152,3642,5.89,3643,5.575,3644,5.497,3645,5.497,3646,3.994,3647,3.994,3648,3.994,3649,3.994,3650,3.994,3651,3.994]],["title/interfaces/NgxSignalStoreSliceArrayMethods.html",[0,0.079,3641,3.781]],["body/interfaces/NgxSignalStoreSliceArrayMethods.html",[0,0.123,2,0.721,3,0.045,4,0.039,5,0.045,10,0.111,11,0.17,15,3.777,16,0.219,17,0.006,19,0.22,27,0.088,28,1.821,29,1.314,36,1.784,37,1.793,54,2.161,68,2.704,76,3.096,88,0.004,89,0.004,96,0.6,105,4.096,114,2.938,135,2.619,137,0.787,139,2.751,148,4.263,151,4.692,152,0.896,156,2.967,162,3.397,171,2.204,173,4.865,183,1.61,190,2.225,205,0.366,271,1.261,273,3.098,274,4.186,300,0.834,308,0.619,317,1.707,350,1.992,392,1.561,432,3.722,476,2.704,509,1.536,670,4.799,792,1.992,991,4.418,1003,1.561,1280,4.039,1317,2.309,1369,3.836,1679,2.62,2162,2.55,2267,4.613,3025,5.505,3026,2.778,3612,7.024,3618,3.704,3619,3.704,3621,5.858,3622,3.952,3623,3.952,3624,5.457,3625,3.704,3626,5.457,3627,3.952,3628,3.952,3629,7.072,3630,5.457,3631,6.25,3632,5.457,3633,3.952,3634,3.952,3635,6.739,3636,5.457,3637,6.25,3638,3.952,3639,3.952,3640,6.25,3641,5.858,3642,6.317,3643,5.979,3644,5.457,3645,5.457,3646,6.739,3647,3.952,3648,3.952,3649,3.952,3650,3.952,3651,3.952]],["title/interfaces/NgxSignalStoreSliceBaseMethods.html",[0,0.079,3642,3.781]],["body/interfaces/NgxSignalStoreSliceBaseMethods.html",[0,0.122,2,0.717,3,0.044,4,0.039,5,0.044,10,0.111,11,0.169,15,3.876,16,0.22,17,0.006,19,0.219,27,0.088,28,1.819,29,1.312,36,1.775,37,1.787,54,2.15,68,2.698,76,3.089,88,0.004,89,0.004,96,0.597,105,4.081,114,2.932,135,1.528,137,1.339,139,3.558,148,4.251,151,4.679,152,0.892,156,2.951,162,1.982,171,2.201,173,4.852,183,1.607,190,2.217,205,0.364,271,1.255,273,3.096,274,4.18,300,0.829,308,0.616,317,1.705,350,1.982,392,1.552,432,2.682,476,1.578,509,1.528,670,4.793,792,1.985,991,3.183,1003,1.552,1280,4.031,1317,2.297,1369,3.822,1679,2.606,2162,2.536,2267,5.968,3025,5.495,3026,2.764,3612,7.014,3618,3.685,3619,3.685,3621,5.841,3622,3.932,3623,3.932,3624,5.437,3625,3.685,3626,6.233,3627,3.932,3628,3.932,3629,7.059,3630,5.437,3631,6.233,3632,5.437,3633,3.932,3634,3.932,3635,6.724,3636,5.437,3637,6.233,3638,3.932,3639,3.932,3640,6.233,3641,5.096,3642,6.302,3643,5.965,3644,7.059,3645,7.059,3646,3.932,3647,3.932,3648,3.932,3649,3.932,3650,3.932,3651,3.932]],["title/interfaces/NgxStorage.html",[0,0.079,3652,3.267]],["body/interfaces/NgxStorage.html",[0,0.152,2,0.963,3,0.06,4,0.053,5,0.06,10,0.149,11,0.206,15,4.084,16,0.223,17,0.006,19,0.172,27,0.091,76,3.642,88,0.004,89,0.004,137,1.315,139,3.996,152,1.301,171,2.048,268,2.487,272,1.567,273,2.973,476,2.65,502,3.159,762,2.154,792,1.928,957,6.112,1272,4.276,2536,3.159,2537,4.276,3652,5.347,3653,4.685,3654,6.382,3655,6.382,3656,6.382,3657,4.465,3658,5.583,3659,6.382,3660,5.834,3661,5.583,3662,4.465,3663,5.834,3664,5.834,3665,4.465]],["title/interfaces/NgxStorageBaseEvent.html",[0,0.079,3659,3.411]],["body/interfaces/NgxStorageBaseEvent.html",[0,0.153,2,0.981,3,0.061,4,0.054,5,0.061,10,0.152,11,0.208,16,0.224,17,0.006,19,0.175,27,0.091,76,3.659,88,0.004,89,0.004,137,1.513,139,3.939,152,1.307,171,2.065,268,2.515,272,1.596,273,2.989,476,3.049,502,3.217,762,2.194,792,1.964,957,4.355,1272,4.355,2536,3.217,2537,6.153,3652,4.355,3653,4.772,3654,4.548,3655,4.548,3656,4.548,3657,4.548,3658,6.424,3659,6.606,3660,5.883,3661,5.647,3662,4.548,3663,5.883,3664,5.883,3665,4.548]],["title/interfaces/NgxStorageClearEvent.html",[0,0.079,3663,3.267]],["body/interfaces/NgxStorageClearEvent.html",[0,0.154,2,1.005,3,0.062,4,0.055,5,0.062,10,0.155,11,0.211,16,0.222,17,0.006,19,0.18,27,0.092,76,3.681,88,0.004,89,0.004,137,1.35,139,3.703,152,1.315,171,2.179,268,2.554,272,1.636,273,3.01,476,2.721,502,3.298,762,2.248,792,2.013,957,4.464,1272,4.464,2536,3.298,2537,4.464,3652,4.464,3653,4.891,3654,4.661,3655,4.661,3656,4.661,3657,4.661,3658,5.734,3659,6.653,3660,5.948,3661,5.734,3662,4.661,3663,6.206,3664,5.948,3665,4.661]],["title/interfaces/NgxStorageRemoveEvent.html",[0,0.079,3664,3.267]],["body/interfaces/NgxStorageRemoveEvent.html",[0,0.153,2,0.985,3,0.061,4,0.054,5,0.061,10,0.152,11,0.208,16,0.224,17,0.006,19,0.176,27,0.091,76,3.782,88,0.004,89,0.004,137,1.334,139,3.67,152,1.34,171,2.163,268,2.522,272,1.603,273,3.091,476,2.687,502,3.231,762,2.203,792,1.972,957,4.374,1272,4.374,2536,3.231,2537,4.374,3652,4.374,3653,4.793,3654,4.567,3655,4.567,3656,4.567,3657,4.567,3658,5.663,3659,6.614,3660,5.894,3661,6.614,3662,4.567,3663,5.894,3664,6.162,3665,4.567]],["title/injectables/NgxStorageService.html",[259,1.407,3666,4.373]],["body/injectables/NgxStorageService.html",[3,0.022,4,0.019,5,0.022,7,1.612,10,0.054,11,0.189,12,0.652,16,0.214,17,0.006,19,0.179,26,1.97,27,0.045,28,0.72,29,0.343,32,1.347,34,2.506,36,1.802,42,1.946,44,2.218,47,1.432,49,2.057,61,2.153,73,0.831,75,1.544,76,3.569,81,1.258,88,0.002,89,0.002,90,0.456,96,0.882,97,1.114,99,2.204,105,2.997,107,2.782,128,1.021,136,0.943,137,1.018,139,3.261,152,1.29,162,2.013,177,1.384,180,1.14,183,0.879,184,0.974,187,1.061,190,1.279,193,1.92,194,1.742,196,1.46,200,2.275,203,0.908,205,0.177,219,2.067,233,2.023,234,2.204,237,2.426,238,2.348,255,1.612,259,1.094,261,0.98,268,2.849,272,0.566,273,2.474,274,1.065,300,1.497,308,0.801,311,2.823,317,0.42,323,1.544,328,4.359,335,2.476,345,2.807,349,4.138,352,1.907,369,2.432,379,0.7,392,1.238,402,2.354,412,3.427,476,2.595,494,2.067,497,5.013,501,0.617,502,1.141,650,1.141,660,3.066,710,1.384,714,1.875,715,2.39,724,1.458,729,0.718,732,2.441,762,3.217,780,1.711,792,2.93,830,2.23,831,2.23,835,1.264,842,3.108,947,3.155,957,4.449,958,1.902,977,4.125,1003,2.617,1110,1.341,1118,1.544,1186,1.198,1187,0.831,1217,1.301,1255,2.28,1272,5.668,1273,2.939,1369,2.807,1381,3.251,1413,2.275,1415,1.264,1416,1.198,1419,2.855,1428,1.612,1641,5.495,1724,2.939,1726,2.576,1731,3.745,1891,1.384,1931,2.509,1938,3.233,1979,1.787,1982,1.484,2246,1.264,2431,2.067,2486,2.067,2536,3.057,2537,6.832,2556,2.067,2567,2.651,2568,8.201,2630,2.067,2654,2.023,2740,1.787,3063,3.135,3190,1.341,3380,3.399,3514,4.625,3544,2.067,3652,4.138,3654,4.646,3655,5.128,3656,4.646,3657,6.353,3658,5.469,3660,3.745,3661,4.32,3662,2.651,3663,3.745,3664,3.745,3665,2.651,3666,7.012,3667,8.705,3668,2.31,3669,5.603,3670,6.295,3671,4.837,3672,4.837,3673,7.036,3674,4.837,3675,4.837,3676,3.799,3677,3.799,3678,8.349,3679,2.31,3680,2.31,3681,2.31,3682,3.799,3683,6.192,3684,3.799,3685,2.31,3686,2.31,3687,2.31,3688,3.799,3689,2.31,3690,3.799,3691,2.31,3692,2.31,3693,2.31,3694,2.31,3695,3.799,3696,2.31,3697,3.799,3698,2.31,3699,2.31,3700,3.799,3701,2.31,3702,2.31,3703,2.31,3704,2.31,3705,2.31,3706,2.31,3707,2.31,3708,2.31,3709,2.31,3710,2.31,3711,2.31,3712,1.198,3713,2.31,3714,4.837,3715,2.31,3716,2.31,3717,1.907,3718,2.31,3719,2.31,3720,3.399,3721,2.31,3722,3.799,3723,3.399,3724,3.399,3725,3.799,3726,3.799,3727,2.31,3728,2.31,3729,2.31,3730,2.31,3731,2.31,3732,2.31,3733,6.192,3734,2.31,3735,6.192,3736,3.799,3737,4.837,3738,3.799,3739,3.799,3740,2.31,3741,2.31,3742,3.799,3743,6.192,3744,2.31,3745,2.31,3746,2.31,3747,2.31,3748,2.31,3749,2.31,3750,2.31,3751,4.837,3752,2.31,3753,2.31,3754,2.31,3755,2.31,3756,2.31,3757,2.31,3758,2.31,3759,2.31,3760,2.31,3761,2.31,3762,2.31,3763,2.31,3764,2.31,3765,2.31]],["title/interfaces/NgxStorageSetEvent.html",[0,0.079,3660,3.267]],["body/interfaces/NgxStorageSetEvent.html",[0,0.153,2,0.975,3,0.06,4,0.053,5,0.06,10,0.151,11,0.207,16,0.224,17,0.006,19,0.174,27,0.091,76,3.776,88,0.004,89,0.004,137,1.325,139,3.653,152,1.338,171,2.156,268,2.506,272,1.587,273,3.144,476,2.671,502,3.199,762,2.181,792,1.953,957,4.331,1272,4.331,2536,3.199,2537,4.331,3652,4.331,3653,4.745,3654,4.522,3655,4.522,3656,4.522,3657,4.522,3658,5.627,3659,6.595,3660,6.14,3661,6.595,3662,6.411,3663,5.868,3664,5.868,3665,4.522]],["title/interfaces/NgxStore.html",[0,0.079,3766,3.781]],["body/interfaces/NgxStore.html",[0,0.124,2,0.903,3,0.056,4,0.049,5,0.056,10,0.14,11,0.197,16,0.217,17,0.006,19,0.249,27,0.083,35,4.184,38,2.767,49,1.852,51,3.856,76,2.913,88,0.004,89,0.004,96,0.752,101,3.793,102,2.963,106,1.652,122,2.088,123,5.536,124,3.195,127,5.076,128,4.175,130,5.2,131,5.031,145,5.626,146,4.643,147,5.664,148,4.771,153,5.944,154,4.011,155,5.626,156,3.718,191,3.985,194,1.865,238,2.276,274,4.429,285,4.394,286,4.76,379,1.416,506,3.542,509,2.464,792,1.808,1354,7.623,1914,4.011,1921,5.135,2110,5.361,2723,4.953,3025,4.936,3643,6.205,3717,4.953,3766,5.944,3767,5.37,3768,6.874,3769,7.994,3770,7.375,3771,5.37,3772,6.874,3773,4.953,3774,4.394,3775,4.953,3776,4.188,3777,6.874,3778,8.264,3779,5.37,3780,5.37,3781,5.37,3782,5.37,3783,5.37,3784,5.37]],["title/injectables/NgxStoreService.html",[259,1.407,3429,3.411]],["body/injectables/NgxStoreService.html",[0,0.074,2,0.69,3,0.043,4,0.038,5,0.043,10,0.107,11,0.165,12,0.831,16,0.205,17,0.006,19,0.216,27,0.043,28,1.216,32,0.64,34,2.306,36,3.688,44,2.148,49,1.616,68,2.894,74,2.158,76,2.431,88,0.003,89,0.003,90,0.432,96,1.004,97,3.092,98,5.236,99,3.72,113,2.838,114,2.307,124,2.439,131,5.156,151,5.9,180,1.366,183,1.165,184,1.523,187,1.13,193,2.197,196,1.532,205,0.35,209,2.744,238,2.431,259,1.846,261,1.944,268,2.89,272,1.122,274,4.583,298,2.924,300,1.288,308,0.593,324,1.801,367,3.486,369,1.865,377,2.838,379,1.654,392,3.195,431,2.439,501,1.713,509,1.469,764,2.838,780,2.268,808,2.838,813,3.092,833,2.579,840,2.943,958,3.315,1003,2.41,1138,3.508,1483,4.694,1907,4.959,2514,3.062,2711,3.544,3429,5.161,3615,4.099,3766,3.544,3770,6.612,3776,3.197,3785,4.581,3786,6.612,3787,5.292,3788,5.292,3789,5.292,3790,5.292,3791,4.581,3792,6.411,3793,5.292,3794,4.581,3795,5.292,3796,4.581,3797,5.292,3798,4.581,3799,5.292,3800,5.292,3801,4.581,3802,6.398,3803,4.581,3804,5.292,3805,4.581,3806,4.581,3807,7.396,3808,4.581,3809,4.581,3810,4.581,3811,4.581,3812,4.581,3813,4.581,3814,4.581,3815,4.581,3816,4.581,3817,4.581,3818,4.581,3819,4.581,3820,4.581,3821,4.581,3822,4.581,3823,4.581,3824,4.581,3825,4.581,3826,4.581]],["title/directives/NgxTableCellDirective.html",[292,0.725,603,2.304]],["body/directives/NgxTableCellDirective.html",[3,0.042,4,0.037,5,0.042,10,0.106,11,0.164,12,0.59,16,0.197,17,0.006,19,0.171,27,0.042,32,1.296,38,2.937,47,1.498,48,3.123,72,1.753,81,3.177,88,0.003,89,0.003,90,0.601,96,0.569,137,1.381,152,0.615,171,1.495,179,1.25,180,1.192,182,2.18,183,1.158,184,1.604,187,1.22,193,1.112,196,1.337,205,0.347,237,2.758,250,4.257,255,2.703,256,4.665,292,0.945,294,1.096,298,1.89,300,1.59,304,2.011,306,2.917,308,1.23,311,1.456,315,3.633,317,1.337,319,2.634,320,2.556,333,3.486,345,2.634,379,1.174,509,2.794,512,2.254,524,2.076,535,3.454,563,3.004,567,4.444,603,3.761,639,5.567,660,2.484,676,5.896,677,4.665,678,5.389,679,6.203,680,5.843,681,5.598,682,5.389,683,5.136,684,4.729,685,6.687,686,5.389,687,5.693,688,5.693,689,4.928,691,4.445,693,3.587,694,4.093,695,4.445,696,4.928,697,4.928,698,4.928,699,4.928,700,2.875,702,1.846,705,2.917,706,4.093,708,3.324,709,3.792,710,2.719,711,3.512,712,4.729,714,2.241,715,1.753,717,4.417,724,1.368,1003,2.839,1081,3.304,1093,3.168,1174,5.258,1568,6.079,1786,5.258,1787,5.258,1788,5.258,1789,5.258,1790,3.747,1791,3.747,1792,3.747,1804,5.258,1806,3.587,1807,5.258,1809,3.747,1810,3.747,1811,3.747,3827,4.54,3828,4.54,3829,6.371,3830,4.54,3831,4.54,3832,4.54,3833,4.54]],["title/interfaces/NgxTableConfiguration.html",[0,0.079,3834,4.034]],["body/interfaces/NgxTableConfiguration.html",[0,0.076,2,0.705,3,0.044,4,0.038,5,0.044,7,3.432,10,0.109,11,0.208,12,0.923,16,0.222,17,0.006,19,0.175,27,0.075,29,1.431,37,1.766,42,1.369,61,1.434,64,5.27,68,2.157,88,0.003,89,0.003,90,0.763,96,0.587,105,2.903,109,0.995,114,3.166,137,1.512,144,3.467,152,1.192,203,2.56,205,0.358,237,4.097,245,1.131,255,2.763,306,5.799,308,1.138,333,3.563,349,3.666,383,4.352,392,2.868,431,4.307,479,3.618,524,2.122,535,4.258,581,1.988,604,2.16,605,2.16,606,2.16,684,3.01,702,2.231,762,3.146,954,6.06,1081,3.378,1112,3.563,1118,5.406,1303,5.406,1469,3.07,1580,4.057,1589,5.702,1996,3.9,2101,5.681,2448,4.544,2623,5.375,3599,5.375,3834,6.178,3835,4.685,3836,4.685,3837,6.512,3838,8.235,3839,8.073,3840,7.263,3841,8.8,3842,8.235,3843,7.238,3844,8.8,3845,7.873,3846,7.873,3847,5.826,3848,7.873,3849,5.826,3850,7.238,3851,6.677,3852,7.238,3853,6.512,3854,8.089,3855,4.192,3856,4.192,3857,4.685,3858,4.192]],["title/interfaces/NgxTableCypressDataTagsBase.html",[0,0.079,3859,4.034]],["body/interfaces/NgxTableCypressDataTagsBase.html",[0,0.14,2,1.09,3,0.068,4,0.059,5,0.068,10,0.169,11,0.222,12,0.916,16,0.211,17,0.006,19,0.195,27,0.081,29,1.28,88,0.005,89,0.005,152,1.374,231,5.304,676,5.717,727,5.604,1081,5.058,1806,5.374,1899,5.979,3859,7.123,3860,6.481,3861,6.481,3862,7.722,3863,6.481,3864,5.604,3865,5.979]],["title/pipes/NgxTableGetPipe.html",[174,1.473,1825,4.034]],["body/pipes/NgxTableGetPipe.html",[3,0.06,4,0.052,5,0.06,12,0.591,16,0.141,17,0.006,19,0.215,27,0.075,32,1.387,36,3.248,44,2.252,47,1.626,48,2.707,49,1.905,64,5.222,73,2.296,88,0.004,89,0.004,90,0.753,96,0.8,136,3.26,152,1.3,173,4.099,174,2.753,176,3.309,179,1.756,180,1.412,182,2.733,183,1.159,184,1.256,185,3.491,186,5.337,187,0.787,193,1.563,196,1.584,204,4.77,205,0.488,206,2.37,324,3.14,379,1.607,384,6.178,425,5.131,428,5.131,715,3.083,835,3.491,1604,6.637,1820,4.264,1825,7.765,1827,7.146,1950,5.266,2152,4.936,3866,7.987,3867,6.38,3868,6.38,3869,5.708,3870,5.708,3871,5.266,3872,7.987,3873,6.38,3874,6.38]],["title/pipes/NgxTableHasObserversPipe.html",[174,1.473,3875,4.034]],["body/pipes/NgxTableHasObserversPipe.html",[3,0.065,4,0.058,5,0.065,12,0.649,16,0.155,17,0.006,19,0.189,27,0.065,29,1.255,34,2.018,44,1.645,47,1.922,66,3.097,83,3.818,88,0.005,89,0.005,90,0.661,96,0.879,137,1.391,174,2.112,176,3.636,179,1.929,180,1.472,182,2.895,183,1.274,184,1.331,185,4.63,187,0.865,193,1.717,196,1.652,204,3.835,205,0.536,206,2.08,319,5.274,320,5.315,379,1.56,441,7.571,442,6.271,444,6.271,445,8.446,3875,6.984,3876,8.462,3877,8.462,3878,7.009,3879,8.462,3880,7.009,3881,7.009]],["title/directives/NgxTableOpenRowStateTemplateAbstractComponent.html",[292,0.725,604,2.254]],["body/directives/NgxTableOpenRowStateTemplateAbstractComponent.html",[3,0.058,4,0.051,5,0.058,10,0.23,11,0.201,16,0.21,17,0.006,19,0.166,27,0.058,28,1.63,88,0.004,89,0.004,90,0.583,96,0.775,109,1.424,137,1.287,184,1.554,187,1.175,205,0.472,292,1.161,294,1.492,304,2.472,308,1.013,324,3.078,341,2.764,379,1.443,392,3.28,509,2.511,548,3.533,568,2.845,604,3.609,724,2.589,954,5.774,960,4.912,1029,8.338,1589,6.382,3882,9.67,3883,5.102,3884,6.462,3885,6.462,3886,7.829,3887,7.829,3888,7.688,3889,7.829]],["title/directives/NgxTableSelectTemplateAbstractComponent.html",[292,0.725,605,2.254]],["body/directives/NgxTableSelectTemplateAbstractComponent.html",[3,0.059,4,0.052,5,0.059,10,0.231,11,0.204,16,0.211,17,0.006,19,0.214,21,3.784,27,0.059,70,6.568,88,0.004,89,0.004,90,0.596,96,0.792,98,4.469,102,4.285,109,1.213,137,1.304,184,1.56,187,1.182,194,2.698,205,0.483,292,1.177,294,1.526,304,2.506,308,1.027,324,3.121,341,2.974,379,1.463,509,2.546,548,3.582,568,2.874,605,3.66,960,4.93,1544,4.888,1589,6.224,3883,5.215,3884,6.552,3885,6.552,3890,9.717,3891,7.938,3892,7.938,3893,7.938,3894,8.68]],["title/pipes/NgxTableShowHeaderPipe.html",[174,1.473,3895,4.034]],["body/pipes/NgxTableShowHeaderPipe.html",[3,0.058,4,0.051,5,0.058,12,0.571,16,0.136,17,0.006,19,0.231,27,0.073,29,1.159,32,1.329,35,3.043,36,3.197,42,1.802,44,2.185,47,1.896,49,1.972,61,1.886,64,4.681,73,2.812,74,2.075,88,0.004,89,0.004,90,0.737,96,0.773,105,4.842,114,2.218,135,1.977,137,1.013,152,0.835,174,2.719,176,3.197,179,1.697,180,1.39,182,2.674,183,1.12,184,1.229,185,4.276,186,4.119,187,0.761,193,1.51,196,1.559,204,4.695,205,0.471,206,2.319,237,3.715,324,2.423,425,3.96,428,3.96,702,1.808,729,1.916,835,3.373,872,5.088,1081,4.83,1184,2.782,1580,3.603,1589,3.819,1950,5.088,3851,7.448,3864,6.981,3869,5.515,3870,5.515,3871,5.088,3895,7.448,3896,7.815,3897,7.815,3898,6.164,3899,7.815,3900,9.024,3901,6.164,3902,6.164,3903,6.164,3904,6.164,3905,6.164,3906,5.088,3907,5.515,3908,6.164,3909,7.815,3910,6.164,3911,6.164]],["title/interfaces/NgxTableShowHeaderRequirements.html",[0,0.079,3864,3.781]],["body/interfaces/NgxTableShowHeaderRequirements.html",[0,0.141,2,1.113,3,0.069,4,0.061,5,0.069,10,0.172,11,0.224,16,0.205,17,0.006,19,0.199,27,0.082,29,1.474,88,0.005,89,0.005,152,1.26,231,5.416,676,4.43,727,5.722,1081,4.532,1806,4.165,1899,7.932,3859,6.105,3860,6.618,3861,6.618,3862,7.818,3863,6.618,3864,6.76,3865,7.932]],["title/interfaces/NgxTableSortEvent.html",[0,0.079,728,3.579]],["body/interfaces/NgxTableSortEvent.html",[0,0.123,2,1.143,3,0.071,4,0.062,5,0.071,10,0.177,11,0.228,16,0.196,17,0.005,19,0.204,27,0.071,88,0.005,89,0.005,679,6.477,709,4.373,712,6.227,725,6.795,726,6.795,728,6.498,3912,7.594,3913,7.594,3914,9.403]],["title/pipes/NgxTableSortIconPipe.html",[174,1.473,3915,4.034]],["body/pipes/NgxTableSortIconPipe.html",[3,0.064,4,0.056,5,0.064,12,0.632,16,0.151,17,0.006,19,0.224,27,0.064,34,1.963,44,1.953,47,1.694,48,3.811,88,0.004,89,0.004,90,0.643,96,0.855,152,1.128,174,2.508,176,3.537,179,1.877,180,1.455,182,2.848,183,1.239,184,1.309,185,3.732,187,0.842,193,1.671,196,1.632,204,4.554,205,0.521,206,2.024,379,1.724,684,6.009,709,4.499,712,6.009,715,3.213,731,6.102,1435,6.869,3915,6.869,3916,8.323,3917,8.323,3918,6.82,3919,8.323,3920,8.323,3921,6.82,3922,6.102,3923,6.82,3924,6.82,3925,6.82]],["title/directives/NgxTableSortTemplateAbstractComponent.html",[292,0.725,606,2.254]],["body/directives/NgxTableSortTemplateAbstractComponent.html",[3,0.065,4,0.057,5,0.065,10,0.161,11,0.216,16,0.185,17,0.006,19,0.226,27,0.065,88,0.005,89,0.005,90,0.652,96,0.867,109,1.471,137,1.379,184,1.421,187,1.036,205,0.528,292,1.244,294,1.669,304,2.649,308,1.086,324,3.299,341,2.568,379,1.547,509,2.692,548,3.787,568,2.992,606,3.869,684,6.185,709,4.51,712,4.442,724,2.723,960,4.639,3883,5.706,3884,6.926,3885,6.926,3888,8.085,3922,6.186,3926,9.036,3927,8.392]],["title/interfaces/NgxToast.html",[0,0.079,3928,2.836]],["body/interfaces/NgxToast.html",[0,0.158,2,0.837,3,0.052,4,0.046,5,0.052,10,0.129,11,0.188,12,0.857,16,0.22,17,0.006,19,0.197,27,0.088,28,1.646,29,1.337,37,2.651,54,3.917,55,2.072,74,1.872,88,0.004,89,0.004,96,0.697,101,3.61,109,1.248,135,1.784,152,1.254,171,1.917,190,2.461,194,1.728,205,0.425,238,2.109,245,1.343,271,2.375,273,2.579,311,1.784,344,4.531,476,1.842,551,3.99,563,2.27,607,2.227,608,2.27,629,3.103,642,4.157,863,3.177,990,4.117,1437,3.043,1451,3.231,1496,3.446,1587,5.199,1733,2.745,1931,2.885,2162,2.961,3026,4.243,3206,2.621,3712,3.793,3928,5.036,3929,3.717,3930,4.117,3931,6.026,3932,5.577,3933,3.717,3934,4.887,3935,4.001,3936,5.25,3937,5.062,3938,4.698,3939,4.38,3940,4.698,3941,4.698,3942,4.887,3943,3.717,3944,3.331,3945,3.573,3946,3.573,3947,3.573,3948,3.331,3949,3.573,3950,3.446]],["title/directives/NgxToastBundlerComponent.html",[292,0.725,607,1.958]],["body/directives/NgxToastBundlerComponent.html",[3,0.061,4,0.054,5,0.061,10,0.152,11,0.208,16,0.195,17,0.006,19,0.218,27,0.061,32,0.914,47,1.333,72,2.527,88,0.004,89,0.004,90,0.617,183,1.475,184,1.519,187,1.138,196,1.189,205,0.5,292,1.203,294,1.58,300,1.682,304,2.562,308,0.847,317,1.475,334,2.672,341,2.003,369,2.224,501,1.749,506,3.018,568,2.168,607,3.25,642,4.562,663,3.311,960,4.552,1437,3.67,1469,4.157,1733,4.354,3229,3.685,3930,4.966,3939,4.86,3948,5.677,3951,9.479,3952,6.545,3953,7.28,3954,8.25,3955,8.115,3956,6.545,3957,7.261,3958,6.698,3959,6.545,3960,5.063,3961,6.545]],["title/directives/NgxToastComponent.html",[292,0.725,608,1.995]],["body/directives/NgxToastComponent.html",[3,0.058,4,0.051,5,0.058,10,0.145,11,0.202,16,0.19,17,0.006,19,0.232,27,0.058,32,0.872,47,1.27,49,1.364,72,2.409,74,2.1,88,0.004,89,0.004,90,0.588,183,1.431,184,1.556,187,1.153,194,2.682,196,1.431,205,0.477,206,2.337,292,1.168,294,1.507,300,1.502,304,2.487,308,0.807,317,1.647,334,2.547,341,1.91,369,2.176,383,4.17,476,2.067,480,2.883,501,1.668,506,2.877,551,4.131,568,2.067,608,3.215,634,5.259,654,3.564,663,3.156,729,1.939,780,2.786,908,5.169,918,3.513,960,4.475,975,5.264,1390,3.984,1543,2.877,1580,3.979,1586,5.583,3229,3.513,3928,3.621,3930,4.859,3953,7.123,3958,6.501,3960,4.827,3962,6.24,3963,7.876,3964,6.24,3965,7.876,3966,7.876,3967,6.24,3968,6.24,3969,6.24,3970,6.24]],["title/interfaces/NgxToastConfiguration.html",[0,0.079,3932,3.141]],["body/interfaces/NgxToastConfiguration.html",[0,0.157,2,0.852,3,0.053,4,0.046,5,0.053,10,0.132,11,0.19,12,0.861,16,0.221,17,0.006,19,0.199,27,0.088,28,1.073,29,1.405,37,2.606,54,3.943,55,2.108,74,1.904,88,0.004,89,0.004,96,0.709,101,3.651,109,1.421,135,1.815,152,1.002,171,1.933,190,2.489,194,1.759,205,0.433,238,2.145,245,1.366,271,1.948,273,1.786,311,1.815,344,4.582,476,1.874,551,4.002,563,2.309,607,2.266,608,2.309,629,3.138,642,4.18,863,2.071,990,4.164,1437,3.077,1451,3.268,1496,3.506,1587,5.233,1733,2.793,1931,2.935,2162,3.938,3026,4.291,3206,4.119,3712,3.836,3928,4.781,3929,3.781,3930,3.186,3931,4.943,3932,5.294,3933,5.839,3934,4.943,3935,4.047,3936,5.294,3937,5.105,3938,4.752,3939,4.43,3940,4.752,3941,4.752,3942,4.943,3943,3.781,3944,3.389,3945,3.635,3946,3.635,3947,3.635,3948,3.389,3949,3.635,3950,3.506]],["title/components/NgxToastContainerComponent.html",[109,0.747,550,2.357]],["body/components/NgxToastContainerComponent.html",[3,0.037,4,0.033,5,0.037,10,0.093,11,0.149,12,0.37,16,0.199,17,0.006,19,0.225,27,0.037,28,1.103,29,1.017,32,1.118,34,1.151,37,2.337,66,2.57,72,2.246,88,0.003,89,0.003,90,0.549,109,1.222,137,0.956,179,1.1,180,1.616,183,1.057,184,1.511,187,1.03,193,0.979,196,0.726,205,0.306,245,0.965,292,0.593,293,1.884,294,0.965,298,3.084,300,1.454,308,1.165,317,1.057,330,2.625,334,2.374,361,1.884,369,1.729,379,1.072,408,2.682,449,3.887,478,1.928,479,2.287,480,1.463,481,1.543,484,2.872,485,2.42,501,1.832,506,1.843,507,3.936,509,1.282,514,1.973,515,2.682,516,1.844,517,3.717,518,1.973,519,1.973,520,1.928,521,1.731,522,1.973,523,1.928,524,3.15,525,1.973,526,1.928,527,1.973,528,2.872,529,1.973,530,2.805,531,2.872,532,1.928,533,1.766,534,1.928,535,3.26,536,1.973,537,3.717,538,1.928,539,1.884,540,1.928,541,1.804,542,1.973,543,1.884,544,1.884,545,1.973,546,1.928,547,1.884,548,1.804,549,1.973,550,3.631,551,3.892,552,1.973,553,1.928,554,1.973,555,1.928,556,2.872,557,1.928,558,1.928,559,1.973,560,1.928,561,1.973,562,1.928,563,1.632,564,1.973,565,1.973,566,1.973,567,1.766,568,1.324,569,1.843,570,1.843,571,1.973,572,1.884,573,1.973,574,1.973,575,1.973,576,1.884,577,1.973,578,1.843,579,1.884,580,1.973,581,1.696,582,1.843,583,1.973,584,1.973,585,1.804,586,1.884,587,1.973,588,1.884,589,1.973,590,1.884,591,1.973,592,1.843,593,1.843,594,1.884,595,1.973,596,1.884,597,1.973,598,1.884,599,1.973,600,1.516,601,1.884,602,1.843,603,1.884,604,1.843,605,1.843,606,1.843,607,2.33,608,1.632,609,1.632,610,1.843,611,1.973,612,1.766,613,1.973,614,1.884,615,1.973,616,1.731,617,1.843,618,1.973,619,1.843,620,1.973,621,1.884,622,1.973,623,1.973,642,2.682,670,4.15,702,1.742,729,1.242,750,3.887,756,3.887,865,4.107,950,3.737,951,4.259,981,2.927,1021,3.275,1024,4.801,1064,4.801,1091,2.128,1184,1.804,1466,4.24,1469,2.742,1721,3.604,2485,5.204,2491,4.059,3032,5.66,3928,2.319,3930,3.861,3939,4.51,3944,4.107,3948,5.551,3953,5.66,3958,4.801,3971,8.618,3972,8.618,3973,3.998,3974,5.817,3975,5.817,3976,6.135,3977,6.135,3978,3.998,3979,5.817,3980,3.998,3981,6.135,3982,3.998,3983,5.817,3984,3.998,3985,5.817,3986,3.998,3987,3.998,3988,3.998,3989,5.817,3990,5.204,3991,5.817]],["title/interfaces/NgxToastDefaultConfiguration.html",[0,0.079,3944,2.928]],["body/interfaces/NgxToastDefaultConfiguration.html",[0,0.157,2,0.841,3,0.052,4,0.046,5,0.052,10,0.13,11,0.188,12,0.805,16,0.221,17,0.006,19,0.197,27,0.088,28,1.06,29,1.215,37,2.599,54,3.924,55,2.082,74,1.881,88,0.004,89,0.004,96,0.701,101,3.622,109,1.416,135,1.792,152,0.994,171,2.04,190,2.927,194,2.28,205,0.427,238,2.119,245,1.349,271,1.932,273,1.764,311,1.792,344,4.545,476,1.851,551,3.993,563,2.994,607,2.238,608,2.281,629,3.832,642,4.164,863,2.046,990,4.13,1437,3.052,1451,3.242,1496,4.545,1587,5.208,1733,2.759,1931,2.899,2162,2.976,3026,4.752,3206,2.634,3712,3.805,3928,4.752,3929,3.735,3930,3.146,3931,4.903,3932,4.714,3933,3.735,3934,5.812,3935,4.014,3936,5.262,3937,5.074,3938,4.714,3939,4.394,3940,4.714,3941,4.714,3942,5.812,3943,4.903,3944,4.394,3945,5.587,3946,5.587,3947,3.591,3948,3.347,3949,3.591,3950,3.463]],["title/interfaces/NgxToastEvent.html",[0,0.079,3950,3.028]],["body/interfaces/NgxToastEvent.html",[0,0.158,2,0.859,3,0.053,4,0.047,5,0.053,10,0.133,11,0.191,16,0.221,17,0.006,19,0.2,27,0.089,28,1.083,29,1.227,37,2.575,54,3.956,55,2.126,74,1.921,88,0.004,89,0.004,96,0.716,101,3.672,109,1.264,135,2.654,152,1.008,171,1.941,190,2.504,194,1.774,205,0.436,238,2.164,245,1.378,271,1.959,273,1.802,311,2.386,344,4.609,476,2.74,551,4.062,563,2.33,607,2.286,608,2.33,629,3.156,642,4.192,863,2.09,990,4.188,1437,3.095,1451,3.287,1496,3.536,1587,5.251,1733,3.672,1931,3.858,2162,3.039,3026,4.316,3206,2.69,3712,3.858,3928,5.275,3929,3.815,3930,3.214,3931,4.971,3932,4.779,3933,3.815,3934,4.971,3935,4.07,3936,5.316,3937,5.127,3938,4.779,3939,4.455,3940,4.779,3941,4.779,3942,4.971,3943,3.815,3944,3.419,3945,3.667,3946,3.667,3947,3.667,3948,4.455,3949,4.779,3950,4.609]],["title/interfaces/NgxToastMaxAmountBaseConfiguration.html",[0,0.079,3936,3.141]],["body/interfaces/NgxToastMaxAmountBaseConfiguration.html",[0,0.157,2,0.854,3,0.053,4,0.047,5,0.053,10,0.132,11,0.19,16,0.217,17,0.006,19,0.199,27,0.088,28,1.076,29,1.223,37,2.608,54,4.095,55,2.113,74,1.909,88,0.004,89,0.004,96,0.711,101,4.073,109,1.26,135,1.819,152,1.004,171,1.936,190,2.944,194,1.763,205,0.434,238,2.151,245,1.37,271,1.951,273,1.791,311,1.819,344,5.419,476,1.878,551,4.004,563,2.315,607,2.272,608,2.315,629,3.143,642,4.482,863,2.077,990,4.924,1437,3.082,1451,3.273,1496,3.514,1587,5.435,1733,2.8,1931,2.942,2162,3.02,3026,4.298,3206,2.674,3712,3.842,3928,4.786,3929,3.791,3930,3.194,3931,4.951,3932,4.76,3933,3.791,3934,4.951,3935,4.053,3936,5.619,3937,5.766,3938,5.619,3939,4.437,3940,4.76,3941,4.76,3942,4.951,3943,3.791,3944,3.397,3945,3.644,3946,3.644,3947,3.644,3948,3.397,3949,3.644,3950,3.514]],["title/interfaces/NgxToastMaxAmountBundleConfiguration.html",[0,0.079,3940,3.141]],["body/interfaces/NgxToastMaxAmountBundleConfiguration.html",[0,0.158,2,0.863,3,0.054,4,0.047,5,0.054,10,0.133,11,0.192,16,0.219,17,0.006,19,0.201,27,0.089,28,1.088,29,1.23,37,2.614,54,4.109,55,2.137,74,2.512,88,0.004,89,0.004,96,0.719,101,3.684,109,1.426,135,1.84,152,1.011,171,2.061,190,2.512,194,1.783,205,0.439,238,2.175,245,1.385,271,1.965,273,1.811,311,1.84,344,4.624,476,1.9,551,4.011,563,2.341,607,2.298,608,2.341,629,3.167,642,4.304,863,2.1,990,4.202,1437,3.105,1451,3.298,1496,3.554,1587,5.454,1733,2.832,1931,2.975,2162,3.054,3026,4.33,3206,2.704,3712,3.871,3928,4.813,3929,3.834,3930,3.23,3931,4.987,3932,4.795,3933,3.834,3934,4.987,3935,4.083,3936,5.644,3937,5.784,3938,4.795,3939,4.968,3940,5.329,3941,4.795,3942,4.987,3943,3.834,3944,3.436,3945,3.686,3946,3.686,3947,3.686,3948,3.436,3949,3.686,3950,3.554]],["title/interfaces/NgxToastMaxAmountOtherConfiguration.html",[0,0.079,3941,3.141]],["body/interfaces/NgxToastMaxAmountOtherConfiguration.html",[0,0.158,2,0.862,3,0.053,4,0.047,5,0.053,10,0.133,11,0.192,16,0.215,17,0.006,19,0.201,27,0.089,28,1.087,29,1.229,37,2.613,54,4.108,55,2.134,74,1.928,88,0.004,89,0.004,96,0.718,101,4.092,109,1.266,135,1.838,152,1.01,171,2.06,190,2.51,194,1.781,205,0.438,238,2.172,245,1.383,271,1.964,273,1.809,311,1.838,344,5.44,476,1.897,551,4.011,563,2.338,607,2.295,608,2.338,629,3.164,642,4.303,863,2.097,990,4.943,1437,3.103,1451,3.295,1496,3.55,1587,5.452,1733,2.828,1931,2.972,2162,3.05,3026,4.326,3206,2.701,3712,3.868,3928,4.81,3929,3.829,3930,3.226,3931,4.983,3932,4.791,3933,3.829,3934,4.983,3935,4.08,3936,5.641,3937,5.782,3938,4.791,3939,4.965,3940,4.791,3941,5.326,3942,4.983,3943,3.829,3944,3.432,3945,3.681,3946,3.681,3947,3.681,3948,3.432,3949,3.681,3950,3.55]],["title/injectables/NgxToastService.html",[259,1.407,3930,2.752]],["body/injectables/NgxToastService.html",[3,0.027,4,0.046,5,0.027,7,1.908,10,0.147,11,0.116,12,0.586,16,0.207,17,0.006,19,0.214,27,0.027,28,1.507,29,1.022,32,1.11,34,1.822,37,1.868,42,2.24,44,2.215,47,0.916,49,2.074,50,1.706,55,2.856,57,2.412,61,2.241,66,1.987,72,1.736,73,1.025,74,1.876,81,1.489,83,2.029,88,0.002,89,0.002,90,0.269,96,0.864,106,1.238,109,0.687,135,2.21,137,0.468,152,0.857,162,1.185,174,1.355,180,1.025,183,0.817,184,1.507,187,1.101,193,1.687,194,1.967,196,1.393,205,0.218,218,2.204,237,1.947,245,0.688,253,2.086,259,1.295,261,1.209,271,2.321,272,0.698,273,0.899,300,0.97,308,1.083,311,1.442,317,1.393,324,2.191,330,2.029,338,2.609,344,1.765,345,2.609,350,1.185,358,3.452,369,2.275,379,1.167,380,1.988,402,2.786,408,3.938,412,2.612,476,2.773,480,1.043,501,1.489,502,3.784,513,2.626,551,4.077,607,1.141,642,3.534,654,1.12,670,3.573,691,3.138,702,1.838,708,2.086,714,2.22,715,2.151,750,3.724,756,3.005,762,1.876,763,5.31,780,1.591,821,1.706,822,1.559,824,2.462,826,3.452,830,2.918,831,2.918,835,1.559,840,4.066,863,1.043,918,2.532,958,2.191,975,3.005,989,3.479,1002,3.712,1003,1.466,1007,1.478,1034,1.988,1064,3.712,1110,2.609,1111,4.426,1184,1.285,1186,1.478,1187,1.025,1230,2.029,1283,3.005,1331,1.83,1369,1.653,1390,2.275,1441,2.204,1469,3.451,1474,4.08,1483,3.293,1543,2.073,1580,2.073,1587,3.79,1679,1.559,1721,3.452,1820,1.904,1940,1.904,1979,3.479,2045,4.599,2046,2.086,2047,2.086,2101,3.005,2181,2.22,2238,2.204,2411,3.712,2558,4.024,2705,3.479,3050,4.985,3206,2.983,3534,2.549,3928,4.745,3930,3.563,3937,1.765,3938,4.066,3939,4.759,3944,3.337,3945,1.83,3946,2.889,3947,4.066,3948,5.654,3949,1.83,3950,1.765,3954,7.109,3957,4.024,3976,4.985,3977,4.985,3981,4.985,3990,4.985,3992,2.849,3993,4.497,3994,5.572,3995,8.923,3996,6.328,3997,5.572,3998,4.497,3999,4.497,4000,5.572,4001,2.849,4002,4.497,4003,2.849,4004,4.497,4005,2.849,4006,2.849,4007,2.849,4008,2.849,4009,2.849,4010,4.497,4011,4.497,4012,2.849,4013,2.849,4014,6.889,4015,5.572,4016,5.572,4017,4.497,4018,2.849,4019,2.849,4020,4.024,4021,2.849,4022,2.849,4023,2.849,4024,4.497,4025,4.497,4026,4.497,4027,4.497,4028,4.497,4029,3.712,4030,4.497,4031,5.572,4032,2.849,4033,2.849,4034,4.497,4035,2.549,4036,2.849,4037,2.849,4038,2.849,4039,2.849,4040,2.849,4041,2.849,4042,2.849,4043,2.849,4044,2.849,4045,2.849,4046,2.849,4047,2.849,4048,2.849,4049,2.849,4050,2.849,4051,2.849,4052,2.849,4053,2.849,4054,4.497,4055,2.849,4056,2.849,4057,2.849,4058,2.849,4059,4.497,4060,4.497,4061,4.497,4062,4.497,4063,4.497,4064,2.849,4065,2.849,4066,2.849,4067,2.849,4068,2.849]],["title/directives/NgxTooltipAbstractComponent.html",[292,0.725,609,1.995]],["body/directives/NgxTooltipAbstractComponent.html",[3,0.05,4,0.066,5,0.05,10,0.125,11,0.184,17,0.006,19,0.216,27,0.05,32,0.753,47,1.745,72,3.106,81,1.785,88,0.004,89,0.004,90,0.865,96,0.676,137,1.508,183,1.302,184,1.552,187,1.225,196,1.302,205,0.412,271,2.614,292,1.062,294,1.301,300,1.744,304,2.261,305,4.033,308,0.697,315,3.536,317,1.302,334,2.2,340,3.228,341,2.192,369,2.028,501,1.44,506,2.485,568,2.664,609,2.924,610,3.303,629,4.187,663,4.069,724,2.424,729,1.675,863,3.481,919,4.629,1581,6.64,3960,4.17,4069,5.39,4070,6.632,4071,8.209,4072,7.671,4073,7.671,4074,6.409,4075,6.409,4076,7.163,4077,6.343,4078,7.163,4079,7.163,4080,7.163,4081,7.163,4082,7.163,4083,6.409,4084,6.409,4085,6.409,4086,5.39,4087,3.34,4088,3.602,4089,7.163,4090,7.163]],["title/interfaces/NgxTooltipActiveElementEvent.html",[0,0.079,4091,3.267]],["body/interfaces/NgxTooltipActiveElementEvent.html",[0,0.155,2,0.95,3,0.059,4,0.08,5,0.059,10,0.147,11,0.204,12,0.843,16,0.224,17,0.006,19,0.213,27,0.088,29,0.936,39,3.359,47,1.615,81,2.089,88,0.004,89,0.004,109,1.462,152,1.297,171,2.135,205,0.482,245,1.523,271,2.089,516,1.943,524,2.056,609,2.575,629,4.061,749,4.154,863,3.433,919,5.039,1046,3.273,1437,2.625,1451,2.788,4077,5.374,4087,6.019,4088,4.217,4091,5.797,4092,4.403,4093,6.267,4094,4.054,4095,4.403,4096,4.054,4097,5.3,4098,5.3,4099,4.217]],["title/interfaces/NgxTooltipActiveTooltipEvent.html",[0,0.079,4098,3.267]],["body/interfaces/NgxTooltipActiveTooltipEvent.html",[0,0.157,2,0.994,3,0.062,4,0.081,5,0.062,10,0.154,11,0.21,16,0.217,17,0.006,19,0.22,27,0.089,29,0.979,39,3.515,47,1.661,81,2.187,88,0.004,89,0.004,109,1.352,152,1.253,171,2.17,205,0.505,245,1.594,271,2.149,516,1.998,524,2.152,609,2.695,629,3.757,749,3.954,863,2.987,919,5.088,1046,3.425,1437,2.747,1451,2.917,4077,5.486,4087,5.887,4088,4.412,4091,5.452,4092,4.607,4093,6.35,4094,4.242,4095,4.607,4096,4.242,4097,5.452,4098,5.917,4099,4.412]],["title/interfaces/NgxTooltipBaseEvent.html",[0,0.079,4093,3.267]],["body/interfaces/NgxTooltipBaseEvent.html",[0,0.156,2,0.97,3,0.06,4,0.08,5,0.06,10,0.15,11,0.206,16,0.221,17,0.006,19,0.216,27,0.088,29,1.299,39,3.431,47,1.636,81,2.134,88,0.004,89,0.004,109,1.338,152,1.303,171,2.055,205,0.493,245,1.556,271,2.485,516,2.246,524,2.1,609,2.63,629,3.716,749,3.926,863,2.942,919,5.062,1046,3.342,1437,2.681,1451,2.847,4077,5.846,4087,5.846,4088,4.306,4091,5.37,4092,4.496,4093,6.306,4094,4.14,4095,4.496,4096,4.14,4097,5.37,4098,5.37,4099,4.306]],["title/interfaces/NgxTooltipConfiguration.html",[0,0.079,4094,3.141]],["body/interfaces/NgxTooltipConfiguration.html",[0,0.156,2,0.982,3,0.061,4,0.076,5,0.061,10,0.152,11,0.208,12,0.75,16,0.223,17,0.006,19,0.218,27,0.088,29,0.968,39,3.475,47,1.649,81,2.161,88,0.004,89,0.004,109,1.474,152,1.248,171,2.067,205,0.499,245,1.576,271,2.133,516,1.984,524,2.127,609,2.664,629,3.738,749,3.941,863,2.965,919,4.778,1046,3.385,1437,2.716,1451,2.884,4077,5.458,4087,6.063,4088,4.362,4091,5.414,4092,4.554,4093,6.156,4094,5.205,4095,6.427,4096,4.193,4097,5.414,4098,5.414,4099,4.362]],["title/directives/NgxTooltipDirective.html",[292,0.725,610,2.254]],["body/directives/NgxTooltipDirective.html",[3,0.037,4,0.056,5,0.037,10,0.092,11,0.148,12,0.737,16,0.087,17,0.006,19,0.214,27,0.054,32,1.161,44,1.352,47,1.524,49,1.739,66,1.743,72,2.889,81,2.753,88,0.003,89,0.003,90,0.543,96,0.495,102,3.929,109,1.311,137,0.648,179,1.086,182,1.971,183,1.047,184,1.508,187,1.223,196,1.56,205,0.302,245,0.953,271,2.096,292,1.11,294,0.953,298,1.71,300,1.719,301,4.02,304,1.819,305,3.244,308,1.261,311,1.265,315,3.929,317,1.631,330,3.592,331,3.53,334,1.61,340,2.363,341,2.29,346,2.753,349,2.221,357,4.983,369,2.356,467,3.244,476,3.095,480,2.491,501,1.054,506,1.819,516,1.411,609,1.61,610,3.138,629,3.176,636,5.789,638,4.457,655,5.265,658,4.457,663,1.996,672,2.778,729,1.226,749,3.312,757,5.828,770,4.219,771,4.219,773,5.265,805,4.219,825,2.637,826,4.932,830,2.656,831,2.656,863,2.74,871,2.159,919,2.988,946,4.219,1046,3.53,1110,3.949,1111,4.373,1580,4.138,1721,3.57,1733,3.36,1853,3.451,3168,5.265,3239,3.152,4020,7.437,4070,4.457,4072,6.696,4073,6.696,4074,5.155,4075,5.155,4077,6.315,4083,5.155,4084,5.155,4085,5.155,4087,5.15,4100,3.946,4101,8.583,4102,6.806,4103,7.96,4104,7.484,4105,6.806,4106,7.484,4107,6.696,4108,7.484,4109,6.696,4110,5.762,4111,5.762,4112,5.762,4113,5.762,4114,5.762,4115,5.762,4116,5.762,4117,5.762,4118,6.806,4119,3.946,4120,3.946,4121,3.946,4122,3.946,4123,5.762,4124,3.946,4125,6.806,4126,3.946,4127,3.53,4128,5.155,4129,5.155,4130,3.946,4131,5.762,4132,5.762,4133,3.946,4134,3.946,4135,3.946,4136,3.946,4137,5.762]],["title/interfaces/NgxTooltipInactiveEvent.html",[0,0.079,4097,3.267]],["body/interfaces/NgxTooltipInactiveEvent.html",[0,0.157,2,0.998,3,0.062,4,0.076,5,0.062,10,0.154,11,0.21,16,0.217,17,0.006,19,0.22,27,0.089,29,0.983,39,3.531,47,1.665,81,2.196,88,0.004,89,0.004,109,1.355,152,1.255,171,2.173,205,0.507,245,1.601,271,2.154,516,2.004,524,2.161,609,2.707,629,3.764,749,3.959,863,2.995,919,5.093,1046,3.44,1437,2.759,1451,2.93,4077,5.497,4087,5.895,4088,4.432,4091,5.467,4092,4.627,4093,6.358,4094,4.261,4095,4.627,4096,4.261,4097,5.929,4098,5.467,4099,4.432]],["title/interfaces/NgxTooltipItem.html",[0,0.079,4096,3.141]],["body/interfaces/NgxTooltipItem.html",[0,0.155,2,0.951,3,0.059,4,0.075,5,0.059,10,0.147,11,0.204,12,0.843,16,0.225,17,0.006,19,0.214,27,0.088,29,0.937,39,3.364,47,1.616,81,2.092,88,0.004,89,0.004,109,1.462,152,1.331,171,2.037,205,0.483,245,1.526,271,2.471,516,1.944,524,2.059,609,2.579,629,4.063,749,4.155,863,3.434,919,4.723,1046,3.277,1437,2.629,1451,2.792,4077,5.378,4087,6.021,4088,4.222,4091,5.305,4092,4.409,4093,6.085,4094,4.059,4095,4.409,4096,5.1,4097,5.305,4098,5.305,4099,4.222]],["title/injectables/NgxTooltipService.html",[259,1.407,4070,3.781]],["body/injectables/NgxTooltipService.html",[3,0.031,4,0.027,5,0.031,10,0.076,11,0.129,12,0.466,16,0.178,17,0.006,19,0.209,27,0.031,28,0.623,31,2.407,32,1.128,34,1.447,37,2.106,39,2.676,42,2.27,44,1.728,49,2.125,57,1.423,61,2.55,66,1.452,73,2.196,74,1.106,81,1.089,83,1.483,88,0.003,89,0.003,90,0.31,96,0.63,102,1.623,106,1.384,109,1.186,135,1.612,137,0.826,152,0.681,162,1.368,174,0.99,180,0.814,183,0.913,184,1.414,187,1.123,193,1.231,196,1.242,203,1.976,205,0.251,206,0.975,233,1.75,234,1.907,238,1.906,259,1.447,261,1.395,271,2.128,272,0.805,300,1.652,308,1.078,311,2.795,317,1.514,324,1.976,329,2.941,345,3.541,349,2.83,366,2.221,369,2.461,373,3.02,379,0.927,399,4.567,412,3.361,476,2.439,501,0.878,502,3.013,513,1.549,516,2.092,524,1.071,629,3.815,724,0.99,729,1.022,749,2.844,792,2.059,824,1.452,830,2.317,831,2.317,863,2.696,868,4.469,919,3.545,958,2.399,975,3.359,977,4.234,989,2.543,1003,1.989,1013,2.916,1034,4.769,1046,3.545,1060,1.851,1126,2.037,1184,1.483,1186,1.705,1187,1.183,1273,3.888,1286,2.713,1353,2.407,1437,2.091,1451,2.221,1580,2.814,1726,1.75,1875,5.037,1922,1.549,1924,1.663,1938,2.197,1940,2.197,1961,2.713,1962,2.713,1963,2.713,1983,1.969,2514,4.922,2654,1.75,2657,5.062,3022,4.769,3209,1.907,3239,2.75,3288,4.149,3319,2.407,3450,2.941,3712,3.545,3935,4.56,3937,2.037,4070,3.888,4077,6.262,4087,2.037,4094,2.112,4096,4.391,4099,4.567,4107,6.115,4109,4.497,4128,2.941,4129,5.46,4138,3.287,4139,6.103,4140,6.834,4141,8.864,4142,6.103,4143,6.103,4144,6.103,4145,5.026,4146,3.287,4147,3.287,4148,3.287,4149,5.026,4150,3.287,4151,5.026,4152,5.026,4153,3.287,4154,3.287,4155,5.026,4156,3.287,4157,3.287,4158,5.026,4159,3.287,4160,3.287,4161,5.026,4162,3.287,4163,8.333,4164,8.333,4165,8.333,4166,8.333,4167,3.287,4168,3.287,4169,3.287,4170,5.026,4171,3.287,4172,3.287,4173,3.287,4174,5.026,4175,3.287,4176,3.287,4177,3.287,4178,6.103,4179,5.026,4180,5.026,4181,6.834,4182,5.026,4183,3.287,4184,3.287,4185,3.287,4186,3.287,4187,3.287,4188,3.287,4189,5.026,4190,3.287,4191,3.287,4192,5.026,4193,3.287,4194,6.103,4195,3.287,4196,5.026,4197,3.287,4198,2.941,4199,3.287,4200,2.941,4201,3.287,4202,3.287,4203,3.287,4204,3.287,4205,3.287,4206,3.287,4207,3.287,4208,3.287,4209,3.287,4210,6.103,4211,3.287,4212,3.287,4213,3.287,4214,3.287,4215,3.287,4216,3.287,4217,3.287,4218,3.287,4219,3.287,4220,2.941,4221,3.287,4222,3.287,4223,2.543]],["title/interfaces/NgxTourBackdropClipEvent.html",[0,0.079,4224,3.781]],["body/interfaces/NgxTourBackdropClipEvent.html",[0,0.122,2,0.716,3,0.044,4,0.039,5,0.044,7,2.019,10,0.153,11,0.169,12,0.896,15,3.08,16,0.213,17,0.006,19,0.23,27,0.088,28,1.248,29,0.706,37,1.291,39,3.505,88,0.004,89,0.004,90,0.449,102,2.349,106,1.812,109,1.153,135,1.526,137,1.082,152,1.228,190,3.11,194,2.657,205,0.364,237,2.85,245,1.149,255,2.793,268,2.046,271,1.253,272,1.166,273,1.502,292,0.706,294,1.149,308,1.053,317,0.865,343,2.349,379,0.877,380,3.32,467,2.679,485,2.739,511,4.593,512,2.329,516,2.22,521,4.152,612,2.909,616,2.06,629,2.793,631,3.484,642,2.194,654,1.871,661,3.18,702,1.101,710,2.85,762,2.741,803,4.168,842,3.057,868,3.484,972,2.761,990,2.679,991,3.18,1008,3.32,1013,3.819,1046,2.468,1081,2.468,1215,4.129,1217,2.679,1232,3.18,1233,3.057,1252,4.82,1303,2.85,1317,2.295,1437,1.98,1451,3.335,1466,3.706,1679,4.456,1721,4.676,1806,2.679,1895,2.243,1982,3.057,1983,3.943,2360,2.948,2654,2.534,2660,2.948,2833,4.399,2973,3.484,3022,4.593,3047,3.18,3163,3.18,3201,4.678,3319,3.484,3712,4.224,3935,4.456,4223,3.681,4224,5.092,4225,3.928,4226,6.84,4227,5.433,4228,5.433,4229,3.681,4230,5.092,4231,3.928,4232,5.838,4233,3.681,4234,3.928,4235,6.721,4236,5.092,4237,3.681,4238,3.928,4239,3.928,4240,5.433,4241,3.928,4242,3.928,4243,3.928,4244,3.928,4245,3.928,4246,6.84,4247,5.838,4248,3.928,4249,6.3,4250,6.475,4251,5.963,4252,3.681,4253,3.681,4254,3.484,4255,5.092,4256,3.681,4257,3.681,4258,3.681,4259,5.092,4260,5.092,4261,3.681,4262,3.681,4263,5.092,4264,3.681,4265,5.092]],["title/directives/NgxTourItemDirective.html",[292,0.725,612,2.16]],["body/directives/NgxTourItemDirective.html",[3,0.044,4,0.039,5,0.044,10,0.11,11,0.168,12,0.438,16,0.166,17,0.006,19,0.202,27,0.044,29,1.308,32,1.191,34,1.36,44,1.108,47,1.333,49,1.863,61,1.446,73,1.7,81,2.49,88,0.004,89,0.004,90,0.766,96,0.821,99,3.8,109,1.148,152,0.887,179,1.3,180,0.765,182,2.241,183,1.19,184,1.557,187,1.182,193,1.157,196,1.603,205,0.361,206,1.943,271,2.382,292,1.204,294,1.141,298,1.943,300,1.682,304,2.068,308,1.103,315,2.332,317,1.603,332,2.585,333,4.113,341,2.004,366,3.322,368,2.278,369,2.224,373,3.587,480,2.398,485,3.837,488,5.505,499,4.796,501,1.262,505,3.654,506,2.178,516,2.322,521,3.255,612,2.894,627,5.246,634,4.71,637,5.067,672,3.158,700,2.955,702,1.515,724,1.423,743,4.227,749,3.378,762,3.276,825,3.157,826,4.658,908,4.503,918,4.801,919,5.011,932,5.406,972,2.741,1026,4.362,1061,5.406,1070,2.741,1071,3.8,1102,2.515,1103,2.927,1231,5.406,1469,3.544,1543,2.178,1569,7.282,1581,6.205,1959,3.035,2492,6.726,2973,3.459,3168,3.654,4232,6.998,4251,4.796,4266,8.643,4267,9.66,4268,6.55,4269,6.55,4270,5.86,4271,6.55,4272,6.55,4273,4.724,4274,4.724,4275,6.55,4276,4.724,4277,4.724,4278,4.724,4279,6.55,4280,4.724,4281,4.724,4282,4.724,4283,3.654,4284,4.724,4285,6.55,4286,4.724,4287,4.724,4288,4.724,4289,4.724]],["title/interfaces/NgxTourRouteOptions.html",[0,0.079,4233,3.781]],["body/interfaces/NgxTourRouteOptions.html",[0,0.123,2,0.723,3,0.045,4,0.039,5,0.045,7,2.038,10,0.154,11,0.17,12,0.881,15,3.096,16,0.212,17,0.006,19,0.231,27,0.088,28,1.257,29,0.712,37,1.303,39,3.528,88,0.004,89,0.004,90,0.453,102,2.371,106,1.824,109,1.159,135,1.541,137,1.089,152,1.273,190,2.985,194,2.666,205,0.367,237,2.868,245,1.16,255,2.811,268,2.059,271,1.265,272,1.177,273,1.517,292,0.712,294,1.16,308,1.058,317,0.873,343,2.371,379,0.886,380,3.352,467,2.705,485,2.757,511,4.623,512,2.344,516,2.226,521,4.159,612,2.928,616,2.08,629,2.811,631,3.517,642,2.215,654,1.889,661,3.21,702,1.111,710,2.877,762,1.617,803,3.123,842,3.086,868,3.517,972,2.787,990,2.705,991,3.21,1008,3.352,1013,3.844,1046,2.492,1081,2.492,1215,4.15,1217,2.705,1232,5.464,1233,3.086,1252,4.852,1303,2.877,1317,2.316,1437,1.999,1451,3.351,1466,3.73,1679,4.474,1721,4.699,1806,2.705,1895,2.264,1982,3.086,1983,3.969,2360,2.976,2654,2.558,2660,2.976,2833,4.428,2973,3.517,3022,4.623,3047,3.21,3163,3.21,3201,3.625,3319,3.517,3712,4.241,3935,4.474,4223,3.716,4224,3.716,4225,3.965,4226,5.867,4227,6.749,4228,5.469,4229,3.716,4230,5.126,4231,3.965,4232,5.867,4233,5.126,4234,6.749,4235,6.749,4236,5.126,4237,3.716,4238,3.965,4239,3.965,4240,5.469,4241,3.965,4242,3.965,4243,3.965,4244,3.965,4245,3.965,4246,6.86,4247,5.867,4248,3.965,4249,6.325,4250,6.493,4251,5.987,4252,3.716,4253,3.716,4254,3.517,4255,5.126,4256,3.716,4257,3.716,4258,3.716,4259,5.126,4260,5.126,4261,3.716,4262,3.716,4263,5.126,4264,3.716,4265,5.126]],["title/directives/NgxTourShowWhenDirective.html",[292,0.725,614,2.304]],["body/directives/NgxTourShowWhenDirective.html",[3,0.037,4,0.033,5,0.037,10,0.159,11,0.148,16,0.198,17,0.006,19,0.202,27,0.037,32,1.162,38,2.663,42,1.157,48,4.158,49,1.638,55,2.152,61,1.768,73,1.425,82,4.993,83,3.077,88,0.003,89,0.003,90,0.373,96,0.496,174,1.193,179,1.09,183,1.05,184,1.413,187,1.184,191,2.054,196,1.239,205,0.303,206,1.714,238,1.501,272,0.97,292,1.234,294,0.956,298,1.714,300,1.187,304,1.824,308,1.076,317,1.512,338,2.297,341,2.087,366,3.013,368,3.844,369,2.532,373,3.312,392,2.222,412,2.842,424,2.297,485,3.463,488,4.993,499,4.229,501,1.058,505,3.063,506,1.825,509,2.556,513,1.866,614,2.723,715,3.077,717,4.242,724,2.055,762,2.295,824,1.75,919,4.134,958,2.681,960,4.242,982,4.381,1003,1.882,1007,2.996,1283,3.86,1331,2.544,1462,4.225,1469,2.723,1502,1.825,1503,3.579,1580,4.674,1733,3.366,1871,7.269,1895,3.533,1918,2.763,1922,1.866,1924,2.003,1942,3.711,2051,4.031,2114,4.758,2116,4.758,2117,5.521,2120,5.231,2124,3.839,2143,4.031,2149,4.758,2153,4.031,2155,3.711,2156,2.763,2157,3.711,2158,2.166,2170,2.371,2171,2.453,2179,3.46,2181,2.852,2182,4.229,2185,4.993,2190,4.993,2203,5.836,2222,4.993,2224,5.489,2229,4.993,2230,4.229,2428,2.763,2441,5.628,4035,5.168,4254,4.993,4266,8.635,4290,9.651,4291,3.959,4292,8.593,4293,7.971,4294,5.776,4295,5.776,4296,5.776,4297,3.959,4298,3.959,4299,3.959,4300,3.959,4301,3.959,4302,3.959,4303,3.959,4304,3.959,4305,3.959,4306,7.971,4307,3.959,4308,3.959,4309,3.959,4310,3.959,4311,3.959,4312,3.959,4313,3.959,4314,5.776,4315,3.959]],["title/interfaces/NgxTourStep.html",[0,0.079,4236,3.781]],["body/interfaces/NgxTourStep.html",[0,0.107,2,0.561,3,0.035,4,0.031,5,0.035,7,2.344,10,0.129,11,0.142,12,0.948,15,3.324,16,0.219,17,0.006,19,0.209,27,0.083,28,1.544,29,0.976,37,1.498,39,3.505,88,0.003,89,0.003,90,0.521,102,2.727,106,2.004,109,1.322,135,1.772,137,1.196,152,1.295,190,3.028,194,2.796,205,0.285,237,3.152,245,0.9,255,3.089,268,1.717,271,1.455,272,0.913,273,2.078,292,0.819,294,0.9,308,1.12,317,0.677,343,2.727,379,1.018,380,3.854,467,3.11,485,3.029,511,5.682,512,2.881,516,2.287,521,4.244,612,2.441,616,1.613,629,3.455,631,5.331,642,2.547,654,1.465,661,3.691,702,1.278,710,2.232,762,1.254,803,2.604,842,3.549,868,4.045,972,2.162,990,3.11,991,3.691,1008,3.854,1013,3.819,1046,1.933,1081,2.865,1215,4.456,1217,3.11,1232,2.49,1233,2.394,1252,5.331,1303,3.308,1317,2.664,1437,1.55,1451,3.435,1466,4.099,1679,4.736,1721,5.045,1806,3.11,1895,2.604,1982,3.549,1983,4.36,2360,3.422,2654,2.941,2660,3.422,2833,4.865,2973,2.728,3022,5.08,3047,3.691,3163,3.691,3201,3.602,3319,5.331,3712,4.372,3935,4.612,4223,4.273,4224,2.882,4225,3.075,4226,6.52,4227,4.559,4228,4.559,4229,2.882,4230,5.632,4231,3.075,4232,6.52,4233,2.882,4234,3.075,4235,7.426,4236,5.092,4237,4.273,4238,4.559,4239,4.559,4240,6.009,4241,6.009,4242,6.009,4243,6.009,4244,6.009,4245,4.559,4246,7.147,4247,6.299,4248,4.559,4249,6.696,4250,6.897,4251,6.338,4252,4.273,4253,4.273,4254,4.045,4255,5.632,4256,4.273,4257,4.273,4258,4.273,4259,5.632,4260,5.632,4261,4.273,4262,4.273,4263,5.632,4264,4.273,4265,5.632]],["title/directives/NgxTourStepComponent.html",[292,0.725,616,2.116]],["body/directives/NgxTourStepComponent.html",[3,0.033,4,0.029,5,0.033,7,1.488,10,0.164,11,0.181,12,0.588,16,0.156,17,0.006,19,0.19,27,0.033,28,1.613,32,1.058,42,1.856,44,0.823,47,1.621,49,1.656,55,1.967,68,1.162,72,2.925,88,0.003,89,0.003,90,0.86,96,0.44,109,1.216,135,1.125,137,1.245,152,0.86,162,1.459,183,0.96,184,1.601,187,1.218,191,1.819,194,1.973,196,1.154,203,2.778,205,0.268,206,1.567,249,2.448,253,2.568,271,2.402,292,0.783,294,0.847,300,1.74,304,1.667,305,2.973,308,0.98,315,2.607,317,1.377,319,3.684,320,3.575,334,2.155,340,2.101,341,1.943,357,4.649,367,2.993,369,1.601,377,2.173,426,1.919,485,3.909,488,4.649,499,3.866,501,0.937,505,4.085,506,1.617,511,6.605,512,3.008,516,2.259,521,4.366,524,2.469,568,2.103,616,2.286,625,6.78,626,6.78,627,5.556,628,5.681,629,3.691,630,5.681,631,5.549,632,6.78,633,6.321,634,4.099,635,4.722,636,5.466,637,4.085,638,4.085,641,5.681,642,2.928,643,5.681,648,3.978,650,3.135,654,2.496,655,4.912,658,4.085,660,2.889,661,3.529,662,4.724,663,4.179,665,4.358,666,4.724,668,4.724,669,4.431,670,3.665,672,3.062,673,3.474,693,2.973,729,1.09,749,1.459,795,2.448,825,2.344,826,3.934,833,1.975,908,3.803,950,2.254,986,1.868,1020,4.431,1061,2.895,1092,2.448,1110,2.035,1255,1.653,1353,2.568,1543,2.928,1692,1.868,1695,2.568,1798,2.895,2676,2.895,3110,2.713,3168,2.713,3174,2.713,3175,2.895,3188,1.975,3839,4.358,4071,4.724,4127,5.681,4229,2.713,4230,2.713,4283,2.713,4316,9.897,4317,9.897,4318,3.508,4319,4.724,4320,5.28,4321,5.28,4322,5.28,4323,5.28,4324,5.28,4325,5.28,4326,5.28,4327,5.28,4328,5.28,4329,3.508,4330,3.508,4331,3.508,4332,3.508,4333,3.508,4334,3.508,4335,3.508,4336,3.508,4337,3.508,4338,3.508,4339,3.508,4340,3.508,4341,3.508,4342,3.508,4343,3.508,4344,5.28,4345,3.508,4346,3.508,4347,3.508,4348,3.508,4349,3.508]],["title/interfaces/NgxTourTokenConfiguration.html",[0,0.079,4350,4.373]],["body/interfaces/NgxTourTokenConfiguration.html",[0,0.093,2,0.866,3,0.054,4,0.047,5,0.054,7,3.172,10,0.134,11,0.192,16,0.215,17,0.006,19,0.223,27,0.07,36,2.785,37,2.027,88,0.004,89,0.004,96,0.721,106,2.571,109,1.427,205,0.44,241,6.854,245,1.389,255,3.172,343,3.69,347,3.605,485,3.792,516,2.288,521,3.236,616,2.49,661,4.995,1008,5.216,1081,3.877,1252,5.473,1303,4.477,1317,3.605,1679,4.811,1806,4.209,1982,4.803,1983,4.477,2360,4.631,2654,3.98,2660,4.631,3022,6.135,3047,4.995,3712,4.845,3935,5.111,4226,5.782,4246,7.459,4247,5.782,4249,6.802,4250,7.296,4251,6.84,4252,5.782,4253,5.782,4254,5.473,4255,6.802,4256,5.782,4257,5.782,4258,5.782,4259,6.802,4260,6.802,4261,5.782,4262,5.782,4263,6.802,4264,5.782,4265,6.802,4350,7.43,4351,5.751,4352,7.43,4353,5.751,4354,5.751,4355,5.751,4356,5.751]],["title/directives/NgxTreeGridCellDirective.html",[292,0.725,617,2.254]],["body/directives/NgxTreeGridCellDirective.html",[3,0.025,4,0.022,5,0.025,10,0.175,11,0.111,12,0.622,15,1.103,16,0.158,17,0.006,19,0.181,27,0.025,29,0.64,32,0.752,34,1.242,38,2.482,39,3.271,42,1.796,44,1.012,47,1.529,48,1.147,49,1.704,57,1.868,66,1.194,72,1.665,73,1.552,76,1.025,81,0.895,88,0.002,89,0.002,90,0.255,96,0.675,122,2.138,137,1.606,171,1.012,179,0.744,180,0.872,182,1.476,183,0.784,184,1.418,187,1.222,193,1.319,194,1.341,196,1.679,205,0.207,206,1.28,292,0.911,294,0.653,298,1.28,300,1.492,304,1.362,305,2.429,308,0.696,310,1.979,311,2.502,315,4.23,317,1.766,325,1.979,330,4.527,334,1.103,340,1.619,341,0.827,342,2.419,367,2.033,369,2.272,379,1.238,385,2.231,431,1.439,453,4.783,476,1.429,481,1.665,501,0.722,516,2.131,592,3.801,617,1.989,619,2.482,621,2.896,634,3.565,639,4.229,663,2.182,676,6.056,679,4.783,694,2.772,700,1.947,702,0.625,714,2.13,724,2.263,729,0.84,749,2.557,750,4.783,752,3.159,755,4.164,756,3.597,757,3.159,759,4.753,762,1.812,763,4.106,766,1.979,770,1.979,771,1.979,803,2.537,840,3.948,908,3.224,919,1.402,948,3.337,954,1.675,964,5.116,965,6.512,967,3.337,972,1.568,1003,1.406,1007,2.792,1013,3.565,1037,3.86,1038,3.86,1039,3.86,1040,3.86,1046,3.187,1050,3.86,1052,3.86,1053,3.86,1058,3.86,1095,3.86,1119,2.091,1151,3.159,1401,3.159,1437,2.24,1451,2.379,1543,1.246,1548,3.561,1579,7.181,1582,1.886,1589,6.003,1679,1.479,1853,2.584,1983,4.498,1994,2.091,2271,4.816,2290,2.419,2436,1.402,2514,3.597,2694,2.231,2936,2.091,3021,2.297,3162,2.091,3163,1.806,3164,2.091,3165,2.091,3286,2.231,3287,2.419,3600,2.419,3871,3.561,4357,8.745,4358,8.745,4359,2.703,4360,3.86,4361,3.86,4362,8.04,4363,7.157,4364,6.145,4365,6.145,4366,4.314,4367,6.145,4368,6.145,4369,6.145,4370,4.314,4371,6.145,4372,6.145,4373,6.145,4374,6.145,4375,6.145,4376,4.314,4377,4.314,4378,4.314,4379,4.314,4380,4.314,4381,4.314,4382,4.314,4383,4.314,4384,4.314,4385,4.314,4386,4.314,4387,4.314,4388,4.314,4389,4.314,4390,4.314,4391,4.314,4392,4.314,4393,4.314,4394,4.314,4395,4.314,4396,2.703,4397,4.314,4398,7.51,4399,2.703,4400,4.314,4401,4.314,4402,4.314,4403,4.314,4404,4.314,4405,6.145,4406,6.145,4407,2.703,4408,4.314,4409,4.314,4410,4.314,4411,2.703,4412,2.703,4413,2.703,4414,2.703,4415,4.314,4416,2.703,4417,2.703,4418,2.703,4419,2.419,4420,2.703,4421,2.703,4422,2.703,4423,2.703,4424,2.703,4425,2.703,4426,2.703,4427,2.703,4428,2.703,4429,6.714,4430,4.314,4431,4.314,4432,2.703,4433,4.314,4434,2.703,4435,2.703,4436,2.703,4437,2.703,4438,2.703,4439,2.703,4440,2.703,4441,2.703,4442,2.703,4443,2.703,4444,2.703,4445,2.703,4446,2.703]],["title/directives/NgxTreeGridDirective.html",[292,0.725,619,2.254]],["body/directives/NgxTreeGridDirective.html",[3,0.037,4,0.032,5,0.037,10,0.212,11,0.147,12,0.735,16,0.194,17,0.006,19,0.182,27,0.037,32,0.946,34,2.283,38,2.64,44,1.861,47,1.517,48,1.66,49,1.48,57,2.479,66,1.728,72,2.21,88,0.003,89,0.003,90,0.369,96,1.039,137,0.643,179,1.077,180,1.285,182,1.959,183,1.04,184,1.578,187,1.181,190,3.014,193,1.943,196,1.727,205,0.299,206,1.699,237,2.479,292,1.105,294,0.944,298,1.699,300,1.443,304,1.807,308,0.876,315,1.931,317,1.556,330,2.583,341,1.197,369,1.707,379,1.528,426,2.14,432,4.196,481,2.614,535,3.706,617,3.436,619,2.64,621,4.398,637,4.429,663,2.896,676,5.257,694,3.678,702,2.03,709,2.583,715,1.51,724,2.04,762,2.279,830,1.804,831,1.804,948,4.429,964,3.322,965,4.429,967,4.429,975,3.826,979,4.429,986,3.968,1007,2.97,1008,3.995,1015,3.5,1548,4.725,1579,7.951,1589,6.201,2676,5.589,2690,6.668,2921,6.668,3021,3.048,3712,4.553,3840,7.065,3935,4.684,3960,4.429,4283,3.026,4357,8.619,4358,8.619,4360,8.501,4361,5.123,4419,3.5,4447,3.912,4448,5.725,4449,7.659,4450,7.932,4451,7.453,4452,7.453,4453,5.725,4454,5.725,4455,5.725,4456,5.725,4457,5.725,4458,5.725,4459,5.725,4460,6.772,4461,5.725,4462,3.912,4463,3.912,4464,5.725,4465,3.912,4466,5.725,4467,3.912,4468,3.912,4469,5.725,4470,3.912,4471,5.725,4472,3.912,4473,5.725,4474,3.912,4475,5.725,4476,3.912,4477,3.912,4478,3.912,4479,3.912,4480,3.912,4481,3.912,4482,5.725,4483,3.912,4484,3.912,4485,3.912,4486,3.912,4487,3.912,4488,3.912,4489,3.912]],["title/classes/NgxValidators.html",[90,0.461,4490,4.373]],["body/classes/NgxValidators.html",[1,5.809,3,0.059,4,0.029,5,0.032,7,2.986,8,3.114,10,0.081,12,0.887,13,3.114,14,8.021,15,2.873,16,0.187,17,0.006,18,6.211,19,0.222,20,6.922,21,2.085,27,0.032,28,0.996,29,0.516,30,8.04,31,3.844,32,1.212,33,7.915,34,2.678,35,3.728,36,1.956,37,1.424,38,2.42,39,2.795,40,3.844,41,2.474,43,3.114,44,1.934,45,8.04,46,4.697,47,0.709,48,2.228,67,4.333,68,3.171,70,6.399,72,3.351,73,3.052,76,2.669,83,2.369,88,0.003,89,0.003,90,0.596,92,2.157,96,1.033,106,1.445,152,1.281,167,4.333,180,1.286,183,0.954,187,0.98,190,2.542,191,2.723,192,6.811,193,2.078,196,1.74,308,1.027,317,0.633,379,1.754,382,6.27,383,3.508,408,1.605,432,3.963,539,4.236,642,2.42,702,1.628,808,3.253,1034,4.911,1126,3.253,1224,2.326,1568,6.681,1587,4.755,1679,3.851,1982,3.373,1990,5.217,2162,4.227,2360,3.253,2657,3.963,2813,4.697,3203,2.02,3417,4.697,3594,4.697,4220,4.697,4319,3.114,4490,4.697,4491,3.481,4492,5.25,4493,6.32,4494,6.32,4495,6.32,4496,5.25,4497,6.32,4498,5.25,4499,3.481,4500,5.25,4501,5.25,4502,5.25,4503,5.25,4504,3.481,4505,3.481,4506,8.986,4507,3.481,4508,7.553,4509,3.481,4510,5.25,4511,5.25,4512,5.25,4513,5.25,4514,6.32,4515,7.038,4516,8.483,4517,8.483,4518,8.483,4519,7.038,4520,6.32,4521,3.481,4522,7.038,4523,5.25,4524,5.25,4525,3.481,4526,5.25,4527,3.481,4528,5.25,4529,5.25,4530,7.553,4531,7.553,4532,7.038,4533,5.25,4534,3.481,4535,7.553,4536,7.553,4537,3.481,4538,5.655,4539,5.25,4540,5.25,4541,5.25,4542,3.481,4543,3.481,4544,6.32,4545,3.481,4546,3.481,4547,3.481,4548,3.481,4549,3.481,4550,3.481,4551,3.481,4552,3.481,4553,3.481,4554,3.481,4555,3.481,4556,3.481,4557,3.481,4558,3.481,4559,3.481,4560,3.481,4561,3.481,4562,3.481,4563,3.481,4564,3.481]],["title/injectables/NgxWindowService.html",[259,1.407,1415,2.674]],["body/injectables/NgxWindowService.html",[3,0.027,4,0.023,5,0.027,10,0.066,11,0.143,12,0.416,15,2.985,16,0.194,17,0.006,19,0.234,27,0.078,28,0.851,29,0.937,32,1.192,34,1.292,36,2.354,44,1.615,49,1.674,54,1.282,57,1.23,61,2.238,66,3.04,67,2.345,73,1.615,75,1.899,88,0.002,89,0.002,90,0.789,96,0.697,106,1.235,122,2.198,136,2.271,137,0.914,144,1.513,162,2.315,177,1.702,180,0.727,183,1.148,184,1.56,187,1.164,190,2.316,193,1.548,196,1.485,200,4.894,205,0.217,209,2.688,234,2.604,237,2.736,255,1.206,259,1.292,261,1.206,268,2.916,272,0.696,300,1.273,308,1.123,311,2.027,317,1.485,328,2.781,350,3.043,351,1.6,352,2.345,369,2.35,379,1.573,412,2.904,501,0.759,502,3.781,629,3.551,700,1.282,702,1.462,724,2.572,780,2.891,796,1.513,958,2.187,962,2.884,977,4.532,1003,0.926,1060,2.527,1091,1.513,1186,1.474,1187,1.023,1215,4.002,1216,2.456,1230,2.025,1231,3.705,1255,3.852,1304,3.472,1381,4.741,1390,3.196,1415,5.163,1416,4.238,1419,3.858,1420,2.081,1486,3.472,1543,2.069,1618,6.425,1707,2.542,1709,5.216,1724,7.699,1726,2.39,1727,3.705,1728,4.016,1731,1.899,1780,4.016,1891,1.702,1921,1.899,1922,1.339,2110,3.132,2247,3.705,2438,4.592,2491,3.132,2546,2.345,2654,1.513,2935,4.592,2957,6.157,3514,4.592,3712,2.885,3723,7.311,3724,7.311,3849,6.157,4198,8.442,4200,5.654,4250,5.813,4352,4.016,4538,2.542,4565,2.842,4566,5.654,4567,4.488,4568,8.368,4569,5.563,4570,5.563,4571,7.314,4572,5.563,4573,8.68,4574,5.563,4575,6.881,4576,7.314,4577,7.314,4578,6.881,4579,6.319,4580,4.488,4581,2.842,4582,2.842,4583,2.842,4584,6.881,4585,2.842,4586,2.842,4587,6.881,4588,4.488,4589,2.842,4590,2.842,4591,7.659,4592,4.488,4593,2.842,4594,4.488,4595,2.842,4596,4.488,4597,2.842,4598,4.488,4599,2.842,4600,4.488,4601,2.842,4602,4.488,4603,2.842,4604,4.488,4605,2.842,4606,6.881,4607,4.488,4608,2.842,4609,4.488,4610,2.842,4611,2.542,4612,2.542,4613,2.842,4614,2.842,4615,2.842,4616,2.842,4617,2.842,4618,2.842,4619,2.842,4620,5.563,4621,2.842,4622,6.319,4623,2.842,4624,5.563,4625,2.842,4626,2.842,4627,2.842,4628,5.563,4629,2.842,4630,4.488,4631,4.488,4632,2.842,4633,4.488,4634,5.563,4635,4.488,4636,2.842,4637,2.842,4638,2.842,4639,2.842,4640,4.488,4641,2.842,4642,2.842,4643,2.842,4644,2.842,4645,2.842,4646,2.842,4647,2.842,4648,2.842,4649,4.488,4650,2.842,4651,2.842]],["title/interfaces/SpecStoreAssets.html",[0,0.079,4652,4.373]],["body/interfaces/SpecStoreAssets.html",[0,0.108,2,1.236,3,0.062,4,0.055,5,0.062,10,0.155,11,0.211,16,0.21,17,0.006,19,0.221,26,3.46,27,0.083,42,2.399,66,2.947,81,2.209,88,0.004,89,0.004,127,6.031,128,2.947,130,3.755,131,3.551,148,5.226,152,1.112,171,1.926,271,1.757,273,2.106,283,5.16,286,5.751,1161,4.654,1378,7.866,3774,6.796,3775,6.776,3776,6.207,4652,7.346,4653,5.16,4654,8.527,4655,8.527,4656,8.527,4657,7.661,4658,6.776,4659,5.505,4660,6.67,4661,6.67,4662,6.67]],["title/injectables/SpecStoreService.html",[259,1.407,4663,4.373]],["body/injectables/SpecStoreService.html",[3,0.036,4,0.032,5,0.036,10,0.089,11,0.145,12,0.729,16,0.216,17,0.006,19,0.235,26,1.99,27,0.036,28,0.727,32,1.311,36,2.931,44,1.324,68,1.869,81,1.27,88,0.003,89,0.003,90,0.362,96,0.926,98,4.157,113,2.377,114,1.38,118,2.377,124,2.042,128,1.695,131,3.005,135,2.147,137,1.293,138,3.38,147,2.563,151,4.575,171,1.324,180,1.274,183,1.026,184,1.627,187,1.223,193,2.084,196,1.646,205,0.293,245,0.926,259,1.625,261,1.628,263,6.094,264,6.094,268,3.125,272,0.94,273,1.211,274,4.177,298,2.59,300,1.768,308,1.214,317,1.495,367,2.66,369,1.984,392,2.406,501,1.025,507,1.808,639,4.633,813,1.85,1138,2.099,1139,6.026,1180,5.049,1332,2.967,1378,5.526,2428,2.677,3261,5.049,3429,6.217,3620,4.366,3786,4.658,3787,4.658,3788,4.658,3789,4.658,3790,4.658,3793,3.166,3795,3.166,3797,3.166,3799,3.166,3800,3.166,3802,2.809,3804,3.166,4653,7.513,4654,5.991,4655,5.991,4656,5.991,4663,5.049,4664,3.836,4665,6.695,4666,6.695,4667,6.695,4668,6.695,4669,6.695,4670,6.695,4671,7.384,4672,7.384,4673,7.384,4674,5.644,4675,3.836,4676,3.836,4677,3.836,4678,3.836,4679,3.836,4680,5.644,4681,3.836,4682,3.432,4683,3.432,4684,3.432,4685,3.432,4686,8.229,4687,8.729,4688,3.836,4689,5.644,4690,3.836,4691,7.384,4692,3.836,4693,7.384,4694,3.836,4695,5.644,4696,3.836,4697,3.836,4698,5.644,4699,3.836,4700,8.229,4701,3.836,4702,5.644,4703,3.836,4704,3.836,4705,3.836,4706,3.432,4707,3.432,4708,5.526,4709,3.432,4710,5.644,4711,4.658,4712,3.836,4713,3.836,4714,3.836,4715,3.836,4716,3.836,4717,3.836,4718,3.836]],["title/interfaces/StoreAssetsOptions.html",[0,0.079,3773,4.034]],["body/interfaces/StoreAssetsOptions.html",[0,0.123,2,0.892,3,0.055,4,0.049,5,0.055,10,0.138,11,0.196,12,0.824,16,0.218,17,0.006,19,0.248,27,0.083,35,4.158,38,2.731,49,1.841,51,3.806,76,2.889,88,0.004,89,0.004,96,0.743,101,3.761,102,2.924,106,2.097,122,2.061,123,4.72,124,3.154,127,5.045,128,3.722,130,4.29,131,4.484,145,5.579,146,4.582,147,5.629,148,5.301,153,6.878,154,3.959,155,5.579,156,5.509,191,3.952,194,1.841,238,2.246,274,4.416,285,4.337,286,4.72,379,1.404,506,3.513,509,2.444,792,1.785,1354,7.339,1914,3.959,1921,5.092,2110,5.316,2723,4.889,3025,4.895,3643,6.167,3717,6.288,3766,4.582,3767,5.3,3768,5.3,3769,6.817,3770,6.288,3771,6.817,3772,7.955,3773,6.288,3774,6.511,3775,7.339,3776,4.133,3777,6.817,3778,8.23,3779,5.3,3780,5.3,3781,5.3,3782,5.3,3783,5.3,3784,5.3]],["title/injectables/StoreEffects.html",[259,1.407,4719,4.373]],["body/injectables/StoreEffects.html",[3,0.059,4,0.052,5,0.059,10,0.148,11,0.205,16,0.176,17,0.006,19,0.253,27,0.059,32,1.275,44,2.143,88,0.004,89,0.004,90,0.601,128,4.302,137,1.501,147,4.258,184,1.509,187,1.127,205,0.487,259,2.297,260,7.919,261,2.703,263,7.191,264,7.191,273,2.011,274,2.938,300,1.67,308,1.181,369,2.419,501,1.703,504,5.701,4709,7.14,4719,7.14,4720,6.371,4721,7.98,4722,6.371,4723,7.98,4724,6.371,4725,9.404,4726,9.132,4727,8.713,4728,7.98,4729,6.371,4730,7.98,4731,7.98,4732,6.371,4733,5.701,4734,6.371]],["title/interfaces/StoreState.html",[0,0.079,3802,3.579]],["body/interfaces/StoreState.html",[0,0.103,2,1.202,3,0.06,4,0.052,5,0.06,10,0.148,11,0.205,16,0.176,17,0.006,19,0.253,26,3.309,27,0.075,28,1.784,29,0.946,42,1.865,44,2.046,61,2.444,68,2.645,88,0.004,89,0.004,90,0.602,127,5.473,128,2.819,130,3.592,131,3.397,148,4.497,152,0.864,156,3.953,171,2.046,205,0.488,245,1.54,259,2.299,268,2.84,272,1.563,286,5.661,762,2.688,958,2.508,1332,6.744,2928,7.196,3429,5.573,3620,4.936,3774,5.848,3776,6.084,3802,5.848,4653,4.936,4657,6.592,4658,6.592,4659,5.266,4708,6.592,4711,5.266,4735,5.708,4736,8.418,4737,5.708,4738,5.266,4739,5.708,4740,5.708,4741,5.708,4742,7.146,4743,5.708,4744,5.708,4745,7.146,4746,7.146,4747,5.708,4748,5.708,4749,5.708,4750,5.708]],["title/injectables/StoreStateService.html",[259,1.407,4738,4.034]],["body/injectables/StoreStateService.html",[0,0.082,2,0.766,3,0.047,4,0.042,5,0.047,10,0.118,11,0.177,12,0.836,16,0.212,17,0.006,19,0.236,26,2.639,27,0.064,28,1.482,29,1.159,32,0.711,36,3.261,42,1.487,44,1.834,61,2.109,68,2.774,88,0.004,89,0.004,90,0.48,96,1.05,98,4.716,113,3.153,114,1.831,127,4.128,128,2.249,130,2.865,131,3.669,138,4.128,148,3.88,151,5.189,152,1.059,156,3.153,171,1.834,180,1.461,183,1.252,184,1.477,187,1.187,193,2.299,196,1.677,205,0.389,245,1.229,259,1.984,261,2.159,268,3.017,272,1.246,274,4.328,286,4.27,298,2.785,300,1.2,308,0.658,367,3.249,369,1.738,392,2.73,639,5.08,762,2.32,813,2.454,958,3.072,1138,2.784,1332,6.045,2928,6.45,3429,6.639,3620,3.936,3774,5.046,3776,4.809,3786,5.688,3787,5.688,3788,5.688,3789,5.688,3790,5.688,3793,4.2,3795,4.2,3797,4.2,3799,4.2,3800,4.2,3802,5.046,3804,4.2,4653,6.771,4657,5.688,4658,5.688,4659,4.2,4682,4.553,4683,4.553,4684,4.553,4685,4.553,4706,4.553,4707,4.553,4708,5.688,4711,4.2,4735,4.553,4736,6.166,4737,4.553,4738,5.688,4739,4.553,4740,7.494,4741,4.553,4742,6.166,4743,6.166,4744,4.553,4745,6.166,4746,6.166,4747,4.553,4748,6.166,4749,4.553,4750,4.553,4751,6.892,4752,6.892,4753,5.089,4754,5.089,4755,5.089,4756,5.089]],["title/interfaces/TableCellTemplate.html",[0,0.079,4757,4.373]],["body/interfaces/TableCellTemplate.html",[0,0.026,2,0.246,3,0.015,4,0.013,5,0.015,7,2.15,10,0.185,11,0.073,12,0.782,14,2.339,15,2.433,16,0.099,17,0.006,19,0.201,20,2.075,21,0.978,26,0.847,27,0.015,28,1.42,29,0.42,32,1.125,34,1.816,36,0.609,38,0.753,41,0.77,42,1.932,44,2.001,47,1.346,49,2.049,50,1.697,54,1.279,55,0.609,57,2.731,61,1.931,64,2.682,66,1.979,70,4.592,72,0.631,73,1.02,74,0.55,76,1.698,81,2.798,83,2.506,88,0.002,89,0.002,90,0.524,97,0.788,98,2.113,102,2.211,105,1.756,106,0.78,107,1.196,109,0.684,114,1.998,122,1.305,128,2.454,134,3.693,135,2.278,136,2.433,137,1.037,152,0.808,162,1.179,173,1.05,174,1.131,176,0.847,183,0.297,184,1.45,187,0.35,190,1.263,191,0.847,194,0.881,196,0.515,203,1.114,205,0.125,206,0.485,209,0.978,215,1.462,233,0.87,236,1.196,237,2.731,244,2.535,250,1.092,253,1.196,255,2.677,256,1.196,257,1.462,272,0.4,294,0.394,298,0.485,300,1.542,301,1.977,306,3.255,308,1.122,311,2.12,317,1.291,319,1.644,320,1.595,328,1.012,332,0.894,333,0.894,334,0.667,339,2.747,341,2.464,343,1.399,345,0.948,346,1.977,347,0.788,349,2.521,350,0.68,363,3.357,366,1.252,367,4.056,368,1.366,369,1.591,373,0.722,379,0.934,382,5.338,384,1.264,392,2.239,395,1.264,408,1.73,412,1.423,424,0.948,426,0.894,431,1.509,432,2.113,437,6.536,449,1.092,471,1.264,476,0.541,501,1.003,509,2.619,512,0.578,513,2.617,524,1.81,535,3.376,548,1.279,567,0.722,635,1.092,654,1.475,665,1.348,669,4.955,670,3.273,676,3.959,677,4.066,678,4.066,679,5.382,680,3.279,681,3.255,682,4.066,683,3.875,684,3.255,685,4.84,686,1.196,691,1.14,693,0.92,695,1.977,702,1.835,706,3.255,709,0.737,715,0.631,717,3.392,720,3.125,724,1.131,727,1.264,728,2.075,729,0.508,762,2.225,763,1.894,764,4.257,781,1.012,792,1.992,805,1.196,824,0.722,830,2.748,831,2.748,896,1.348,918,0.92,935,1.462,950,1.05,951,1.196,954,5.234,958,0.642,960,1.852,964,1.644,972,1.644,981,1.196,982,2.411,1003,0.923,1007,2.323,1013,1.644,1020,1.977,1021,0.92,1022,2.339,1026,0.948,1034,1.14,1060,0.92,1070,1.644,1071,0.948,1077,1.264,1081,2.323,1091,0.87,1093,1.14,1101,1.348,1102,2.384,1103,1.012,1107,1.462,1110,1.644,1111,1.05,1112,1.55,1114,3.357,1118,2.993,1120,2.339,1129,1.462,1141,1.348,1149,1.348,1151,1.196,1184,0.737,1215,0.894,1217,1.595,1224,1.092,1236,1.14,1279,1.47,1293,2.192,1303,1.697,1304,1.264,1401,1.196,1461,1.462,1469,1.769,1474,2.747,1483,2.747,1497,5.645,1544,3.464,1545,3.919,1580,0.753,1585,6.536,1589,5.688,1641,1.348,1675,1.348,1710,1.196,1726,0.87,1729,1.462,1733,2.741,1741,1.462,1806,2.113,1820,1.092,1895,1.336,1921,1.092,1922,1.769,1924,0.826,1940,2.508,1958,1.462,1959,1.05,1983,1.697,1994,1.264,1996,0.978,2001,1.47,2080,1.196,2101,3.711,2124,0.92,2152,1.264,2170,2.247,2181,0.806,2264,2.192,2267,4.16,2360,1.012,2428,1.14,2436,1.47,2448,2.618,2621,1.264,2623,5.456,2702,4.583,2726,2.535,2727,1.348,2820,1.462,2838,1.509,2843,2.339,2936,2.903,2971,1.462,3032,2.339,3156,1.462,3162,1.264,3163,1.092,3164,1.264,3165,1.264,3282,4.007,3286,1.348,3395,1.462,3536,2.535,3599,1.348,3834,5.861,3838,2.535,3839,1.348,3840,6.738,3842,1.462,3843,1.462,3845,1.462,3846,1.462,3847,1.462,3848,1.462,3850,1.462,3851,1.348,3852,1.462,3855,5.334,3856,4.533,3858,2.535,3865,2.339,3875,2.339,3895,2.339,3906,1.348,3907,1.462,3915,2.339,4237,3.464,4270,1.462,4283,1.264,4449,2.535,4566,1.462,4757,4.968,4758,1.634,4759,1.634,4760,2.833,4761,1.634,4762,2.833,4763,2.833,4764,5.553,4765,2.833,4766,2.833,4767,1.634,4768,1.634,4769,1.634,4770,2.833,4771,1.634,4772,1.634,4773,1.634,4774,1.634,4775,1.634,4776,1.634,4777,1.634,4778,2.833,4779,2.833,4780,1.634,4781,1.634,4782,1.634,4783,1.634,4784,1.634,4785,1.634,4786,1.634,4787,1.634,4788,3.752,4789,1.634,4790,1.634,4791,1.634,4792,1.634,4793,5.066,4794,1.634,4795,1.634,4796,1.634,4797,1.634,4798,1.634,4799,5.961,4800,4.478,4801,3.752,4802,3.752,4803,1.634,4804,4.478,4805,2.833,4806,1.634,4807,2.833,4808,3.752,4809,1.634,4810,1.634,4811,2.833,4812,3.752,4813,3.752,4814,2.833,4815,3.752,4816,2.833,4817,1.634,4818,1.634,4819,1.634,4820,1.634,4821,1.634,4822,1.634,4823,1.634,4824,1.634,4825,1.634,4826,1.634,4827,1.634,4828,1.634,4829,1.634,4830,1.634,4831,1.634,4832,1.634,4833,1.634,4834,1.634,4835,1.634,4836,1.634,4837,1.634,4838,1.634,4839,1.634,4840,1.634,4841,1.634,4842,1.634,4843,1.634,4844,1.634,4845,1.634,4846,2.833,4847,1.634,4848,1.634,4849,1.634,4850,1.634,4851,1.634,4852,1.634,4853,1.634,4854,1.634,4855,1.634,4856,2.833,4857,1.634,4858,1.634,4859,1.634,4860,1.634,4861,3.752,4862,1.634,4863,1.634,4864,1.634,4865,1.634,4866,1.634,4867,1.634,4868,1.634,4869,1.634,4870,1.634,4871,1.634,4872,1.634,4873,1.634,4874,1.634,4875,2.833,4876,1.634,4877,1.634,4878,2.833,4879,1.634,4880,1.634,4881,1.634,4882,1.634,4883,1.634,4884,1.634,4885,2.833,4886,1.634,4887,1.634,4888,3.752,4889,2.833,4890,1.634,4891,1.634,4892,1.634,4893,1.634,4894,1.634,4895,1.634,4896,1.634,4897,1.634,4898,1.634,4899,1.634,4900,1.634,4901,1.634,4902,2.833,4903,1.634,4904,1.634,4905,1.634,4906,1.634,4907,1.634,4908,1.634,4909,1.634,4910,2.833,4911,1.634,4912,1.634,4913,1.634,4914,1.634,4915,1.634,4916,1.634,4917,1.634,4918,1.634,4919,1.634,4920,1.634,4921,2.833,4922,2.833,4923,2.833,4924,2.833,4925,1.634,4926,1.634,4927,1.634,4928,1.634,4929,1.634,4930,1.634,4931,1.634,4932,1.634,4933,1.634,4934,1.634,4935,1.634,4936,1.634,4937,1.634,4938,1.634,4939,2.833,4940,1.634,4941,1.634,4942,1.634,4943,1.634,4944,1.634,4945,1.634,4946,1.634,4947,1.634,4948,1.634,4949,1.634,4950,1.634,4951,1.634,4952,1.634,4953,1.634,4954,1.634,4955,1.634,4956,1.634,4957,1.634,4958,1.634,4959,1.634,4960,1.634,4961,1.634,4962,1.634,4963,1.634,4964,1.634,4965,1.634,4966,1.634,4967,1.634,4968,1.634,4969,1.634,4970,1.634,4971,1.634,4972,1.634,4973,1.634,4974,1.634,4975,1.634,4976,1.634]],["title/components/TestDisplayContentComponent.html",[109,0.747,553,2.357]],["body/components/TestDisplayContentComponent.html",[3,0.043,4,0.038,5,0.043,10,0.108,11,0.166,17,0.006,19,0.228,27,0.082,28,1.707,47,1.64,68,2.668,88,0.003,89,0.003,90,0.827,109,1.403,114,2.68,171,1.89,179,1.278,180,1.636,182,2.757,187,0.798,205,0.355,245,1.121,292,0.688,293,2.188,294,1.121,298,3.107,300,1.475,304,2.043,341,2.465,361,2.188,478,2.238,479,2.544,480,1.699,481,1.792,484,3.194,485,2.692,507,4.574,509,2.888,512,3.185,514,2.292,515,2.983,516,1.585,517,3.977,518,2.292,519,2.292,520,2.238,521,2.01,522,2.292,523,2.238,524,3.162,525,2.292,526,2.238,527,2.292,528,3.194,529,2.292,530,3.12,531,3.194,532,2.238,533,2.051,534,2.238,535,3.488,536,2.292,537,3.977,538,2.238,539,2.188,540,2.238,541,2.095,542,2.292,543,2.188,544,2.188,545,2.292,546,2.238,547,2.188,548,2.095,549,2.292,550,2.238,551,1.895,552,2.292,553,3.885,554,2.292,555,3.12,556,3.194,557,3.12,558,3.12,559,2.292,560,3.12,561,2.292,562,3.12,563,2.641,564,2.292,565,2.292,566,2.292,567,2.051,568,1.537,569,2.14,570,2.14,571,2.292,572,2.188,573,2.292,574,2.292,575,2.292,576,2.188,577,2.292,578,2.14,579,2.188,580,2.292,581,3.723,582,3.906,583,2.292,584,2.292,585,2.095,586,2.188,587,2.292,588,2.188,589,2.292,590,2.188,591,2.292,592,2.14,593,2.14,594,2.188,595,2.292,596,2.188,597,2.292,598,2.188,599,2.292,600,1.76,601,2.188,602,2.14,603,2.188,604,2.14,605,2.14,606,2.14,607,1.859,608,1.895,609,1.895,610,2.14,611,2.292,612,2.051,613,2.292,614,2.188,615,2.292,616,2.01,617,2.14,618,2.292,619,2.14,620,2.292,621,2.188,622,2.292,623,2.292,650,2.292,729,1.443,1021,4.193,1091,2.472,1249,5.255,1466,2.614,1862,4.009,1867,2.983,1869,4.978,4977,5.197,4978,3.239,4979,6.47,4980,4.515,4981,3.239,4982,3.239]],["title/components/TestErrorComponent.html",[109,0.747,555,2.357]],["body/components/TestErrorComponent.html",[3,0.042,4,0.037,5,0.042,10,0.105,11,0.162,12,0.586,16,0.099,17,0.006,19,0.225,27,0.081,28,1.843,32,0.627,47,1.704,68,2.954,88,0.003,89,0.003,90,0.819,109,1.391,114,2.633,136,2.58,164,4.225,171,1.964,179,1.236,180,1.631,182,2.864,184,0.994,187,0.903,205,0.343,245,1.084,255,2.683,292,0.666,293,2.117,294,1.084,298,3.104,300,1.457,304,1.996,308,0.581,341,2.657,361,2.117,478,2.166,479,3.122,480,1.644,481,1.734,484,3.121,485,2.63,507,4.55,509,2.861,512,2.588,514,2.217,515,2.915,516,1.549,517,3.92,518,2.217,519,2.217,520,2.166,521,1.944,522,2.217,523,2.166,524,3.145,525,2.217,526,2.166,527,2.217,528,3.121,529,2.217,530,3.049,531,3.121,532,2.166,533,1.984,534,2.166,535,3.438,536,2.217,537,3.92,538,2.166,539,2.117,540,2.166,541,2.026,542,2.217,543,2.117,544,2.117,545,2.217,546,2.166,547,2.117,548,2.026,549,2.217,550,2.166,551,1.833,552,2.217,553,3.049,554,2.217,555,3.829,556,3.121,557,3.049,558,3.049,559,2.217,560,3.049,561,2.217,562,3.049,563,2.58,564,2.217,565,2.217,566,2.217,567,1.984,568,1.487,569,2.071,570,2.071,571,2.217,572,2.117,573,2.217,574,2.217,575,2.217,576,2.117,577,2.217,578,2.071,579,2.117,580,2.217,581,3.981,582,3.661,583,2.217,584,2.217,585,2.026,586,2.117,587,2.217,588,2.117,589,2.217,590,2.117,591,2.217,592,2.071,593,2.071,594,2.117,595,2.217,596,2.117,597,2.217,598,2.117,599,2.217,600,1.703,601,2.117,602,2.071,603,2.117,604,2.071,605,2.071,606,2.071,607,1.799,608,1.833,609,1.833,610,2.071,611,2.217,612,1.984,613,2.217,614,2.117,615,2.217,616,1.944,617,2.071,618,2.217,619,2.071,620,2.217,621,2.117,622,2.217,623,2.217,639,4.119,650,2.217,729,1.396,749,3.044,1021,3.559,1091,2.391,1249,3.787,1466,2.528,1779,3.917,1853,2.69,1862,3.917,1867,2.885,1869,3.001,4977,3.134,4978,3.134,4980,4.411,4981,3.134,4982,3.134,4983,4.891,4984,3.474]],["title/components/TestErrorDataComponent.html",[109,0.747,557,2.357]],["body/components/TestErrorDataComponent.html",[3,0.042,4,0.037,5,0.042,10,0.104,11,0.162,12,0.584,16,0.099,17,0.006,19,0.225,27,0.081,28,1.872,32,0.625,47,1.702,68,2.951,88,0.003,89,0.003,90,0.818,109,1.39,114,2.628,136,2.575,164,4.216,171,1.962,179,1.232,180,1.631,182,2.861,184,0.992,187,0.901,205,0.342,245,1.081,255,2.677,292,0.664,293,2.111,294,1.081,298,3.103,300,1.455,304,1.992,308,0.579,341,2.654,361,2.111,478,2.159,479,3.118,480,1.639,481,1.729,484,3.114,485,2.625,507,4.547,509,2.858,512,2.584,514,2.21,515,2.909,516,1.545,517,3.915,518,2.21,519,2.21,520,2.159,521,1.938,522,2.21,523,2.159,524,3.144,525,2.21,526,2.159,527,2.21,528,3.114,529,2.21,530,3.042,531,3.114,532,2.159,533,1.979,534,2.159,535,3.433,536,2.21,537,3.915,538,2.159,539,2.111,540,2.159,541,2.02,542,2.21,543,2.111,544,2.111,545,2.21,546,2.159,547,2.111,548,2.02,549,2.21,550,2.159,551,1.828,552,2.21,553,3.042,554,2.21,555,3.042,556,3.114,557,3.824,558,3.042,559,2.21,560,3.042,561,2.21,562,3.042,563,2.575,564,2.21,565,2.21,566,2.21,567,1.979,568,1.483,569,2.064,570,2.064,571,2.21,572,2.111,573,2.21,574,2.21,575,2.21,576,2.111,577,2.21,578,2.064,579,2.111,580,2.21,581,3.979,582,3.656,583,2.21,584,2.21,585,2.02,586,2.111,587,2.21,588,2.111,589,2.21,590,2.111,591,2.21,592,2.064,593,2.064,594,2.111,595,2.21,596,2.111,597,2.21,598,2.111,599,2.21,600,1.698,601,2.111,602,2.064,603,2.111,604,2.064,605,2.064,606,2.064,607,1.793,608,1.828,609,1.828,610,2.064,611,2.21,612,1.979,613,2.21,614,2.111,615,2.21,616,1.938,617,2.064,618,2.21,619,2.064,620,2.21,621,2.111,622,2.21,623,2.21,639,4.113,650,2.21,729,1.392,749,3.039,1021,3.552,1091,2.384,1249,3.779,1466,2.521,1779,3.909,1853,2.682,1862,3.909,1867,2.877,1869,2.992,4977,3.124,4978,3.124,4980,4.402,4981,3.124,4982,3.124,4983,4.88,4984,3.464]],["title/components/TestLoadingComponent.html",[109,0.747,558,2.357]],["body/components/TestLoadingComponent.html",[3,0.042,4,0.037,5,0.042,10,0.105,11,0.162,12,0.586,16,0.099,17,0.006,19,0.225,27,0.081,28,1.843,32,0.627,47,1.704,68,2.63,88,0.003,89,0.003,90,0.819,109,1.391,114,3.124,136,2.58,164,4.225,171,1.964,179,1.236,180,1.631,182,2.864,184,0.994,187,0.903,205,0.343,245,1.084,255,2.683,292,0.666,293,2.117,294,1.084,298,3.104,300,1.457,304,1.996,308,0.581,341,2.657,361,2.117,478,2.166,479,3.122,480,1.644,481,1.734,484,3.121,485,2.63,507,4.55,509,2.861,512,2.588,514,2.217,515,2.915,516,1.549,517,3.92,518,2.217,519,2.217,520,2.166,521,1.944,522,2.217,523,2.166,524,3.145,525,2.217,526,2.166,527,2.217,528,3.121,529,2.217,530,3.049,531,3.121,532,2.166,533,1.984,534,2.166,535,3.438,536,2.217,537,3.92,538,2.166,539,2.117,540,2.166,541,2.026,542,2.217,543,2.117,544,2.117,545,2.217,546,2.166,547,2.117,548,2.026,549,2.217,550,2.166,551,1.833,552,2.217,553,3.049,554,2.217,555,3.049,556,3.121,557,3.049,558,3.829,559,2.217,560,3.049,561,2.217,562,3.049,563,2.58,564,2.217,565,2.217,566,2.217,567,1.984,568,1.487,569,2.071,570,2.071,571,2.217,572,2.117,573,2.217,574,2.217,575,2.217,576,2.117,577,2.217,578,2.071,579,2.117,580,2.217,581,3.981,582,3.661,583,2.217,584,2.217,585,2.026,586,2.117,587,2.217,588,2.117,589,2.217,590,2.117,591,2.217,592,2.071,593,2.071,594,2.117,595,2.217,596,2.117,597,2.217,598,2.117,599,2.217,600,1.703,601,2.117,602,2.071,603,2.117,604,2.071,605,2.071,606,2.071,607,1.799,608,1.833,609,1.833,610,2.071,611,2.217,612,1.984,613,2.217,614,2.117,615,2.217,616,1.944,617,2.071,618,2.217,619,2.071,620,2.217,621,2.117,622,2.217,623,2.217,639,4.119,650,2.217,729,1.396,749,3.044,1021,3.559,1091,2.391,1249,3.787,1466,2.528,1779,3.917,1853,2.69,1862,3.917,1867,2.885,1869,3.001,4977,3.134,4978,3.134,4980,4.411,4981,3.134,4982,3.134,4983,4.891,4984,3.474]],["title/components/TestOfflineComponent.html",[109,0.747,560,2.357]],["body/components/TestOfflineComponent.html",[3,0.042,4,0.037,5,0.042,10,0.105,11,0.162,12,0.586,16,0.099,17,0.006,19,0.225,27,0.081,28,1.843,32,0.627,47,1.704,68,2.63,88,0.003,89,0.003,90,0.819,109,1.391,114,2.633,136,2.58,164,4.225,171,1.964,179,1.236,180,1.631,182,2.864,184,0.994,187,0.903,205,0.343,245,1.084,255,2.683,292,0.666,293,2.117,294,1.084,298,3.104,300,1.457,304,1.996,308,0.581,341,2.657,361,2.117,478,2.166,479,3.122,480,1.644,481,1.734,484,3.121,485,2.63,507,4.55,509,2.861,512,2.588,514,2.217,515,2.915,516,1.549,517,3.92,518,2.217,519,2.217,520,2.166,521,1.944,522,2.217,523,2.166,524,3.145,525,2.217,526,2.166,527,2.217,528,3.121,529,2.217,530,3.049,531,3.121,532,2.166,533,1.984,534,2.166,535,3.438,536,2.217,537,3.92,538,2.166,539,2.117,540,2.166,541,2.026,542,2.217,543,2.117,544,2.117,545,2.217,546,2.166,547,2.117,548,2.026,549,2.217,550,2.166,551,1.833,552,2.217,553,3.049,554,2.217,555,3.049,556,3.121,557,3.049,558,3.049,559,2.217,560,3.829,561,2.217,562,3.049,563,2.58,564,2.217,565,2.217,566,2.217,567,1.984,568,1.487,569,2.071,570,2.071,571,2.217,572,2.117,573,2.217,574,2.217,575,2.217,576,2.117,577,2.217,578,2.071,579,2.117,580,2.217,581,3.981,582,3.661,583,2.217,584,2.217,585,2.026,586,2.117,587,2.217,588,2.117,589,2.217,590,2.117,591,2.217,592,2.071,593,2.071,594,2.117,595,2.217,596,2.117,597,2.217,598,2.117,599,2.217,600,1.703,601,2.117,602,2.071,603,2.117,604,2.071,605,2.071,606,2.071,607,1.799,608,1.833,609,1.833,610,2.071,611,2.217,612,1.984,613,2.217,614,2.117,615,2.217,616,1.944,617,2.071,618,2.217,619,2.071,620,2.217,621,2.117,622,2.217,623,2.217,639,4.119,650,2.217,729,1.396,749,3.044,1021,3.559,1091,2.391,1249,3.787,1466,2.528,1779,3.917,1853,2.69,1862,5.186,1867,2.885,1869,3.001,4977,3.134,4978,3.134,4980,4.411,4981,3.134,4982,3.134,4983,4.891,4984,3.474]],["title/components/TestOverrideDisplayContentComponent.html",[109,0.747,562,2.357]],["body/components/TestOverrideDisplayContentComponent.html",[3,0.042,4,0.037,5,0.042,10,0.106,11,0.164,17,0.006,19,0.226,27,0.081,28,1.696,47,1.624,68,2.641,88,0.003,89,0.003,90,0.821,109,1.395,114,3.023,171,1.871,179,1.248,180,1.633,182,2.729,187,0.984,205,0.347,245,1.095,292,0.673,293,2.138,294,1.095,298,3.105,300,1.557,304,2.01,341,2.441,361,2.138,478,2.187,479,2.503,480,1.66,481,1.751,484,3.143,485,2.649,507,4.557,509,2.869,512,3.23,514,2.239,515,2.935,516,1.559,517,3.937,518,2.239,519,2.239,520,2.187,521,1.964,522,2.239,523,2.187,524,3.151,525,2.239,526,2.187,527,2.239,528,3.143,529,2.239,530,3.07,531,3.143,532,2.187,533,2.004,534,2.187,535,3.453,536,2.239,537,3.937,538,2.187,539,2.138,540,2.187,541,2.047,542,2.239,543,2.138,544,2.138,545,2.239,546,2.187,547,2.138,548,2.047,549,2.239,550,2.187,551,1.851,552,2.239,553,3.07,554,2.239,555,3.07,556,3.143,557,3.07,558,3.07,559,2.239,560,3.07,561,2.239,562,3.846,563,3.002,564,2.239,565,2.239,566,2.239,567,2.004,568,1.502,569,2.091,570,2.091,571,2.239,572,2.138,573,2.239,574,2.239,575,2.239,576,2.138,577,2.239,578,2.091,579,2.138,580,2.239,581,3.696,582,3.873,583,2.239,584,2.239,585,2.047,586,2.138,587,2.239,588,2.138,589,2.239,590,2.138,591,2.239,592,2.091,593,2.091,594,2.138,595,2.239,596,2.138,597,2.239,598,2.138,599,2.239,600,1.72,601,2.138,602,2.091,603,2.138,604,2.091,605,2.091,606,2.091,607,1.817,608,1.851,609,1.851,610,2.091,611,2.239,612,2.004,613,2.239,614,2.138,615,2.239,616,1.964,617,2.091,618,2.239,619,2.091,620,2.239,621,2.138,622,2.239,623,2.239,650,3.143,729,1.41,1021,4.141,1091,2.415,1249,5.217,1466,2.554,1862,3.944,1867,2.914,1869,5.614,4977,5.862,4978,3.165,4980,5.133,4981,3.165,4982,5.862,4985,6.366,4986,6.366,4987,4.536]],["title/pipes/TransformPipe.html",[174,1.473,4988,4.373]],["body/pipes/TransformPipe.html",[3,0.058,4,0.051,5,0.058,12,0.578,15,4.068,16,0.174,17,0.006,19,0.168,27,0.058,32,1.407,34,2.267,44,2.127,47,1.603,49,1.721,54,3.554,88,0.004,89,0.004,90,0.588,96,0.987,102,3.888,174,2.731,176,3.237,177,3.738,179,1.718,180,1.398,182,2.695,183,1.134,184,1.239,185,5.538,186,5.264,187,0.77,193,1.929,194,2.448,196,1.134,200,4.717,203,3.393,204,4.309,205,0.477,206,1.852,209,4.717,211,4.569,328,4.88,347,3.009,379,1.786,715,3.041,807,6.093,840,4.009,863,2.883,2496,4.827,3110,6.093,4988,8.11,4989,6.24,4990,9.804,4991,7.876,4992,7.876,4993,6.24,4994,8.63,4995,7.876,4996,7.876,4997,6.24,4998,6.24]],["title/interfaces/TranslationLoaderActionEntity.html",[0,0.079,2397,4.034]],["body/interfaces/TranslationLoaderActionEntity.html",[0,0.119,2,1.11,3,0.069,4,0.061,5,0.081,10,0.172,11,0.224,16,0.163,17,0.006,27,0.069,88,0.005,89,0.005,96,0.924,114,3.454,122,3.034,152,1.258,271,2.528,392,3.193,702,1.705,835,4.034,1612,4.772,1795,6.085,2378,6.085,2379,6.085,2381,6.481,2397,7.199,3025,4.737,4999,6.597,5000,7.803,5001,7.373]],["title/dependencies.html",[240,2.837,5002,4.86]],["body/dependencies.html",[17,0.006,21,4.211,22,5.439,23,5.439,88,0.005,89,0.005,124,3.743,154,4.699,205,0.537,272,1.722,524,2.291,539,3.314,800,3.314,826,4.356,1091,3.743,1221,5.148,1233,4.517,1255,3.314,1330,6.291,1416,3.647,1419,3.909,1613,4.699,1614,4.517,1820,4.699,2368,6.291,2468,5.803,2469,6.291,2470,6.291,2648,4.517,2650,4.699,3540,7.585,3625,5.439,4733,6.291,5002,5.803,5003,7.031,5004,7.031,5005,9.939,5006,7.031,5007,7.031,5008,7.031,5009,9.45,5010,7.031,5011,7.031,5012,7.031,5013,7.031,5014,7.031,5015,7.031,5016,7.031,5017,7.031,5018,7.031,5019,7.031,5020,7.031,5021,7.031,5022,7.031]],["title/miscellaneous/enumerations.html",[5023,3.145,5024,5.268]],["body/miscellaneous/enumerations.html",[10,0.178,17,0.005,32,1.356,88,0.005,89,0.005,114,3.391,122,2.655,392,2.487,712,5.719,1127,7.964,1128,7.964,1612,4.176,2378,6.3,2379,6.3,2381,6.211,4999,7.964,5000,7.964,5023,5.904,5024,6.829,5025,7.633,5026,8.901,5027,7.633,5028,7.633]],["title/miscellaneous/functions.html",[807,4.555,5023,3.145]],["body/miscellaneous/functions.html",[10,0.174,12,0.693,16,0.165,17,0.005,57,3.239,88,0.005,89,0.005,96,0.938,152,1.192,180,1.212,193,1.833,196,1.698,268,2.325,379,1.379,807,5.788,1013,5.104,1143,5,1159,6.521,1219,7.261,1221,6.843,1224,5,1416,4.847,5023,5.788,5029,7.482,5030,7.482,5031,8.798,5032,7.482,5033,7.482,5034,7.482,5035,7.482,5036,7.482,5037,8.798,5038,7.482,5039,7.482]],["title/index.html",[10,0.095,5040,3.637,5041,3.637]],["body/index.html",[4,0.057,7,2.191,17,0.004,26,4.563,41,3.281,49,1.721,54,2.33,61,1.58,88,0.004,89,0.004,97,2.49,122,1.796,134,3.199,135,1.656,180,1.127,191,2.678,203,3.458,207,4.262,209,4.716,240,6.79,272,1.705,274,3.209,311,1.656,335,4.162,379,0.952,382,3.603,404,5.384,412,1.958,431,2.749,479,2.736,485,2.148,533,3.479,541,3.141,693,2.907,702,1.194,715,2.687,795,3.603,813,2.49,900,2.549,954,4.878,1009,5.096,1046,2.678,1138,2.825,1140,2.825,1141,4.262,1215,2.825,1236,4.857,1241,5.096,1249,3.093,1255,4.439,1281,4.62,1317,2.49,1369,2.996,1416,4.084,1429,3.994,1582,3.603,1614,3.318,1620,2.996,1665,5.384,1687,7.261,1904,3.781,2162,2.749,2257,5.478,2286,5.384,2362,3.781,2381,3.603,2448,3.603,2496,3.994,2523,4.262,2628,4.62,2657,3.919,2711,3.994,2725,7.539,3023,4.262,3174,3.994,3238,2.907,3242,4.038,3523,4.62,3670,4.62,3720,4.62,3906,6.499,4029,4.262,4611,7.045,4612,4.62,5002,4.262,5042,6.96,5043,5.164,5044,6.96,5045,5.164,5046,7.045,5047,7.045,5048,7.045,5049,5.164,5050,5.164,5051,5.164,5052,5.164,5053,5.164,5054,5.164,5055,5.164,5056,5.164,5057,5.164,5058,5.164,5059,6.96,5060,5.164,5061,6.96,5062,5.164,5063,5.164,5064,5.164,5065,5.164,5066,5.164,5067,5.164,5068,5.164,5069,5.164,5070,5.164,5071,5.164,5072,5.164,5073,5.164,5074,5.164,5075,5.164,5076,5.164,5077,5.164,5078,5.164,5079,5.164,5080,5.164,5081,5.164,5082,5.164,5083,5.164,5084,5.164,5085,5.164,5086,5.164,5087,5.164,5088,5.164,5089,6.96,5090,5.164,5091,5.164,5092,5.164,5093,6.96,5094,5.164,5095,5.164,5096,6.96,5097,5.164,5098,5.164,5099,5.164,5100,5.164,5101,5.164,5102,5.164,5103,5.164,5104,5.164,5105,5.164,5106,5.164,5107,5.164,5108,5.164,5109,5.164,5110,5.164,5111,5.164,5112,5.164,5113,5.164,5114,5.164,5115,5.384,5116,4.262,5117,7.539,5118,6.228,5119,4.62,5120,4.62,5121,4.62,5122,4.62,5123,4.62,5124,4.62,5125,4.62,5126,4.62,5127,4.62,5128,8.538,5129,4.62,5130,4.62,5131,4.62,5132,6.228,5133,4.62,5134,4.62,5135,4.62,5136,4.62,5137,4.62,5138,4.62,5139,4.62,5140,4.62,5141,6.228,5142,4.62,5143,4.62,5144,4.62,5145,6.228,5146,6.228,5147,4.62,5148,4.62,5149,4.62,5150,4.62,5151,4.62,5152,4.62,5153,4.62,5154,4.62,5155,4.62,5156,4.62,5157,4.62,5158,4.62,5159,4.62,5160,4.62,5161,4.62,5162,4.62,5163,4.62,5164,4.62,5165,4.62,5166,4.62,5167,4.62,5168,4.62,5169,4.62,5170,4.62]],["title/license.html",[5040,3.637,5041,3.637,5115,3.145]],["body/license.html",[17,0.005,49,1.506,88,0.005,89,0.005,122,2.398,203,3.293,209,5.405,311,2.211,379,1.271,412,2.613,702,1.594,1046,3.575,1241,6.133,1249,4.128,1317,3.324,1429,5.332,1687,5.689,1904,5.047,2286,6.48,2362,5.047,2496,5.332,2523,5.689,4029,5.689,5046,6.167,5047,6.167,5048,6.167,5115,5.332,5116,5.689,5117,8.399,5118,7.495,5119,6.167,5120,6.167,5121,6.167,5122,6.167,5123,6.167,5124,6.167,5125,6.167,5126,6.167,5127,6.167,5128,9.002,5129,6.167,5130,6.167,5131,6.167,5132,7.495,5133,6.167,5134,6.167,5135,6.167,5136,6.167,5137,6.167,5138,6.167,5139,6.167,5140,6.167,5141,7.495,5142,6.167,5143,6.167,5144,6.167,5145,7.495,5146,7.495,5147,6.167,5148,6.167,5149,6.167,5150,6.167,5151,6.167,5152,6.167,5153,6.167,5154,6.167,5155,6.167,5156,6.167,5157,6.167,5158,6.167,5159,6.167,5160,6.167,5161,6.167,5162,6.167,5163,6.167,5164,6.167,5165,6.167,5166,6.167,5167,6.167,5168,6.167,5169,6.167,5170,6.167]],["title/modules.html",[2627,5.535]],["body/modules.html",[17,0.005,88,0.005,89,0.005,2627,6.693]],["title/overview.html",[5171,6]],["body/overview.html",[2,1.195,17,0.005,88,0.005,89,0.005,92,4.919,176,4.118,261,3.369,294,1.917,479,3.121,5171,7.103,5172,7.939,5173,7.939,5174,7.939,5175,7.939,5176,7.939,5177,7.939]],["title/properties.html",[11,0.151,240,2.837]],["body/properties.html",[11,0.206,17,0.005,88,0.005,89,0.005,1369,4.655,5115,6.206,5116,6.622,5178,8.023]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":66,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/TableCellTemplate.html":{}}}],["0.0.0",{"_index":5178,"title":{},"body":{"properties.html":{}}}],["0.15.0",{"_index":5022,"title":{},"body":{"dependencies.html":{}}}],["0754",{"_index":463,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["1",{"_index":1007,"title":{"injectables/NgxMediaQueryService-1.html":{}},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["1,2,3,4",{"_index":2666,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["1.0.0",{"_index":2368,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"dependencies.html":{}}}],["1.2.1",{"_index":5015,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":4223,"title":{},"body":{"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["11.1.0",{"_index":5019,"title":{},"body":{"dependencies.html":{}}}],["1200",{"_index":4606,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["13",{"_index":5175,"title":{},"body":{"overview.html":{}}}],["17.0.0",{"_index":5010,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":5172,"title":{},"body":{"overview.html":{}}}],["1].focus",{"_index":1012,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["1]?.focus",{"_index":1015,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["1fr",{"_index":1598,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["2",{"_index":2812,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["2.32.4",{"_index":5016,"title":{},"body":{"dependencies.html":{}}}],["20.0.0",{"_index":5009,"title":{},"body":{"dependencies.html":{}}}],["20.1.0",{"_index":5008,"title":{},"body":{"dependencies.html":{}}}],["20.2.0",{"_index":5004,"title":{},"body":{"dependencies.html":{}}}],["20.2.1",{"_index":5005,"title":{},"body":{"dependencies.html":{}}}],["2023",{"_index":5119,"title":{},"body":{"index.html":{},"license.html":{}}}],["2025",{"_index":5122,"title":{},"body":{"index.html":{},"license.html":{}}}],["24",{"_index":5174,"title":{},"body":{"overview.html":{}}}],["3",{"_index":2813,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"classes/NgxValidators.html":{}}}],["3.0.1",{"_index":5017,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":5020,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":223,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"injectables/NgxImageMarkerService.html":{}}}],["4.1.0",{"_index":5012,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":5014,"title":{},"body":{"dependencies.html":{}}}],["401",{"_index":2501,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["41",{"_index":5173,"title":{},"body":{"overview.html":{}}}],["4217",{"_index":1802,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["4217](https://en.wikipedia.org/wiki/iso_4217",{"_index":1812,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["474.603.875",{"_index":202,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["474603875",{"_index":201,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["5",{"_index":4057,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["5000",{"_index":4063,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["5100",{"_index":462,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["5px",{"_index":4248,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["7",{"_index":5176,"title":{},"body":{"overview.html":{}}}],["7.1.5",{"_index":5013,"title":{},"body":{"dependencies.html":{}}}],["7.8.0",{"_index":5018,"title":{},"body":{"dependencies.html":{}}}],["7061",{"_index":464,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["8",{"_index":225,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["87",{"_index":5177,"title":{},"body":{"overview.html":{}}}],["9",{"_index":219,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/NgxStorageService.html":{}}}],["9]*[,.]{0,1}[0",{"_index":3762,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["_",{"_index":2843,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/TableCellTemplate.html":{}}}],["_removedvalue",{"_index":1772,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["a11y",{"_index":336,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["a[data",{"_index":3520,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["abdurrahman",{"_index":5109,"title":{},"body":{"index.html":{}}}],["ability",{"_index":3572,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["above",{"_index":1046,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"index.html":{},"license.html":{}}}],["abstract",{"_index":568,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"classes/NgxI18nAbstractService.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTourStepComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["abstractcontrol",{"_index":389,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["abstraction",{"_index":3411,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["abstractions",{"_index":5064,"title":{},"body":{"index.html":{}}}],["abstracts",{"_index":245,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["accept",{"_index":1664,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["acceptcategory",{"_index":1652,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["acceptcategory(name",{"_index":1662,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["accepted",{"_index":1676,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxHasCookieDirective.html":{}}}],["acceptservice",{"_index":1653,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["acceptservice(category",{"_index":1667,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["accepttype",{"_index":1623,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["access",{"_index":4566,"title":{},"body":{"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["accessibility",{"_index":3168,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["accessible",{"_index":783,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["accessor",{"_index":363,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/TableCellTemplate.html":{}}}],["accessors",{"_index":99,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourItemDirective.html":{}}}],["accessors.length",{"_index":427,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["according",{"_index":694,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["accordingly",{"_index":1940,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["accordion",{"_index":527,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["accordion'},{'name",{"_index":525,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["accordion.component",{"_index":1094,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["account",{"_index":4258,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["acoolmethod",{"_index":4628,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["act",{"_index":1939,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["action",{"_index":122,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{}}}],["action.id",{"_index":2420,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["action.state",{"_index":2416,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["action/has",{"_index":2269,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["actioncreator",{"_index":119,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["actionfromresult",{"_index":2419,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["actionreducer",{"_index":123,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["actions",{"_index":128,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["actions.channel",{"_index":4709,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["actions.concat(action.id",{"_index":2417,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["actions.data",{"_index":4741,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["actions.filter((actionfromresult",{"_index":2418,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["actions.videos",{"_index":4714,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["actiontype",{"_index":3261,"title":{},"body":{"injectables/NgxModalService.html":{},"injectables/SpecStoreService.html":{}}}],["activatedroute",{"_index":3427,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["activatedroutesnapshot",{"_index":3575,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["active",{"_index":919,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["actives",{"_index":4191,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["activetooltip",{"_index":4139,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["acts",{"_index":3993,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["actual",{"_index":107,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/TableCellTemplate.html":{}}}],["actual_component",{"_index":623,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["actually",{"_index":2049,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxModalService.html":{}}}],["adapter",{"_index":159,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["add",{"_index":135,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["addcharatindex",{"_index":210,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["addcharatindex(value",{"_index":222,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["added",{"_index":333,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["additional",{"_index":1252,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["addloadedtranslations",{"_index":2388,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["addloadedtranslations(translations",{"_index":2393,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["adds",{"_index":805,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["adjust",{"_index":4338,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["adjusted",{"_index":2738,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["advantage",{"_index":3496,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["advertisement",{"_index":3236,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["affect",{"_index":3218,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["affects",{"_index":3214,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["aftercontentchecked",{"_index":4763,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["afterviewinit",{"_index":908,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["aftervisible",{"_index":4243,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["afterwards",{"_index":4337,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["again",{"_index":3534,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxToastService.html":{}}}],["alert",{"_index":3229,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{}}}],["alertdialog",{"_index":3189,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["alias",{"_index":901,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["allornothingrequired",{"_index":4492,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequired(control",{"_index":4498,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequirederror",{"_index":4503,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequiredvalidator",{"_index":4542,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequiredvalidator(control",{"_index":4556,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allow",{"_index":343,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["allowbeforeunloadhandler",{"_index":3581,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["allowclear",{"_index":2663,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["allowed",{"_index":2660,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["allowing",{"_index":3884,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["allowmultipleopenrows",{"_index":4844,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["allowmultiplerowsopen",{"_index":3844,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["allows",{"_index":323,"title":{},"body":{"directives/FocusClickDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{}}}],["allowzoom",{"_index":2661,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["along",{"_index":1966,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["alongside",{"_index":1467,"title":{},"body":{"directives/NgxButtonDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["already",{"_index":233,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["always",{"_index":1303,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["amount",{"_index":642,"title":{},"body":{"components/MockTourStepComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{}}}],["amountofsteps",{"_index":625,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["anchor",{"_index":3530,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["anchors",{"_index":3527,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["and/or",{"_index":5139,"title":{},"body":{"index.html":{},"license.html":{}}}],["angular",{"_index":2257,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{}}}],["angular's",{"_index":3212,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["angular/cdk",{"_index":5003,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/a11y",{"_index":820,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["angular/cdk/bidi",{"_index":3183,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["angular/cdk/dialog",{"_index":3185,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["angular/cdk/overlay",{"_index":4171,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["angular/cdk/portal",{"_index":4173,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["angular/cdk/table",{"_index":4761,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["angular/common",{"_index":1091,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":118,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/SpecStoreService.html":{}}}],["angular/compiler",{"_index":5006,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":205,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"dependencies.html":{}}}],["angular/core/rxjs",{"_index":2046,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{}}}],["angular/forms",{"_index":21,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":3540,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"dependencies.html":{}}}],["angular/router",{"_index":1233,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"dependencies.html":{}}}],["animation",{"_index":3965,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["api",{"_index":1160,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["app",{"_index":3498,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["app.component.ts",{"_index":3511,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["appcomponent",{"_index":3512,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["append",{"_index":2358,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["appending",{"_index":2363,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["application",{"_index":1230,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxWindowService.html":{}}}],["applications",{"_index":3066,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["applied",{"_index":3203,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"classes/NgxValidators.html":{}}}],["apply",{"_index":3943,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["approach",{"_index":3670,"title":{},"body":{"injectables/NgxStorageService.html":{},"index.html":{}}}],["approaches",{"_index":2555,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["area",{"_index":2823,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["aren't",{"_index":2485,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxToastContainerComponent.html":{}}}],["args",{"_index":246,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["args{constructorparameters",{"_index":1418,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["arguments",{"_index":310,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["aria",{"_index":672,"title":{},"body":{"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["ariadescribedby",{"_index":3147,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{}}}],["arialabel",{"_index":3327,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["arialabelledby",{"_index":3148,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{}}}],["arising",{"_index":5168,"title":{},"body":{"index.html":{},"license.html":{}}}],["around",{"_index":4247,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["array",{"_index":432,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxMediaQueryService-1.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["array.from(this.tablecelltemplates()).foreach((tablecelltemplate",{"_index":4920,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["array.from(this.tablecelltemplates()).some((celltemplate",{"_index":4931,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["array.isarray(id",{"_index":2947,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["array.isarray(open",{"_index":996,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["array.isarray(value",{"_index":2152,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxTableGetPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["arrayelementtype",{"_index":3629,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["arrowdown",{"_index":1032,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["arrowdown(event",{"_index":1049,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["arrowleft",{"_index":4425,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["arrowup",{"_index":1033,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["arrowup(event",{"_index":1051,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["ascending",{"_index":1127,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"miscellaneous/enumerations.html":{}}}],["aside",{"_index":3019,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["asideshown",{"_index":3035,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["asobservable",{"_index":492,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{}}}],["assertion",{"_index":3287,"title":{},"body":{"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["assertive",{"_index":1865,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["assets",{"_index":147,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{}}}],["assets.ts",{"_index":283,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/SpecStoreAssets.html":{}}}],["assigns",{"_index":4913,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["assistive",{"_index":784,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["associated",{"_index":5129,"title":{},"body":{"index.html":{},"license.html":{}}}],["async",{"_index":2249,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["atleastonerequired",{"_index":4493,"title":{},"body":{"classes/NgxValidators.html":{}}}],["atleastonerequired(options",{"_index":4504,"title":{},"body":{"classes/NgxValidators.html":{}}}],["atleastonerequirederror",{"_index":46,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["atleastonerequiredvalidator",{"_index":43,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["atleastonerequiredvalidator(options",{"_index":4559,"title":{},"body":{"classes/NgxValidators.html":{}}}],["atleastonerequiredvalidatoroptions",{"_index":1,"title":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["attach",{"_index":868,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["attached",{"_index":3209,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxTooltipService.html":{}}}],["attempt",{"_index":1288,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["attempted",{"_index":2578,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["attention",{"_index":3235,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["attr.aria",{"_index":4127,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["attr.class",{"_index":1506,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["attr.data",{"_index":1821,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["attr.role",{"_index":3960,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["attr.tabindex",{"_index":342,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["attribute",{"_index":4842,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["attributes",{"_index":3175,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourStepComponent.html":{}}}],["auth",{"_index":1256,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticated",{"_index":1143,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"miscellaneous/functions.html":{}}}],["authenticated.directive.ts",{"_index":2850,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:125",{"_index":2856,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:27",{"_index":2859,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:30",{"_index":2865,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:35",{"_index":2860,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:40",{"_index":2863,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:41",{"_index":2864,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:42",{"_index":2861,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:43",{"_index":2862,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:48",{"_index":2853,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:70",{"_index":2854,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:74",{"_index":2855,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:76",{"_index":2857,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:80",{"_index":2858,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated/is",{"_index":2849,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticatedcallhandler",{"_index":1213,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["authentication",{"_index":1221,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["authenticationresponse",{"_index":1329,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationresponsesubject",{"_index":1257,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationresponsetype",{"_index":1322,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationresponsetype['session']['permissions",{"_index":1360,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationservice",{"_index":2184,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticationstatussubject",{"_index":1258,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authorized",{"_index":2498,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["authors",{"_index":5159,"title":{},"body":{"index.html":{},"license.html":{}}}],["auto",{"_index":1586,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxToastComponent.html":{}}}],["autoclearcookies",{"_index":1630,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["autoclose",{"_index":3206,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["autodetect",{"_index":1617,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["autofocus",{"_index":3224,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["autofocustarget",{"_index":3184,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["autogenerated",{"_index":4125,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["automatically",{"_index":1979,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{}}}],["autoshow",{"_index":1627,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["available",{"_index":1280,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["availablelanguages",{"_index":2349,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["availablelanguagessubject",{"_index":2524,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["availabletranslations",{"_index":2476,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["availabletranslations[path",{"_index":2484,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["avoid",{"_index":744,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["axis",{"_index":4253,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["back",{"_index":710,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["backdrop",{"_index":3201,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["base",{"_index":101,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"interfaces/NgxStore.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["based",{"_index":715,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{}}}],["baseformaccessor",{"_index":91,"title":{"classes/BaseFormAccessor.html":{}},"body":{"classes/BaseFormAccessor.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{}}}],["basestore",{"_index":110,"title":{"interfaces/BaseStore.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["basestoreaction",{"_index":3782,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["basestoreactions",{"_index":129,"title":{"interfaces/BaseStoreActions.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["basestoreassets",{"_index":127,"title":{"interfaces/BaseStoreAssets.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["basestoreassetsgeneratoroptions",{"_index":145,"title":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{}},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["basestoreeffectsinterface",{"_index":125,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["basestoreselector",{"_index":3779,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["basestoreselectors",{"_index":132,"title":{"interfaces/BaseStoreSelectors.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["baseurl",{"_index":1146,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["baseurlhandler",{"_index":1188,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["basicentityadapteractions",{"_index":168,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["basicentityadapterreduceractions",{"_index":157,"title":{"interfaces/BasicEntityAdapterReducerActions.html":{}},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["basicentitystate",{"_index":170,"title":{"interfaces/BasicEntityState.html":{}},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["bc.onmessage",{"_index":1409,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["bc.onmessageerror",{"_index":1405,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["be62",{"_index":461,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["be62510007547061",{"_index":460,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["becomes",{"_index":4240,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["before",{"_index":2833,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["beforeunload",{"_index":3597,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["beforeunloadevent",{"_index":3590,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["beforevisible",{"_index":4241,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["behavior",{"_index":3599,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["behaviorsubject",{"_index":502,"title":{},"body":{"components/MockTourHolderComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["behaviorsubject('hello",{"_index":496,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["behaviorsubject('unset",{"_index":1275,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["behaviorsubject(0",{"_index":4594,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["behaviorsubject(1200",{"_index":4607,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["behaviorsubject(false",{"_index":2411,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{}}}],["behaviorsubject(this.parsevalue(value",{"_index":3760,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["behaviorsubject(true",{"_index":4602,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["behaviorsubject(undefined",{"_index":1273,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{}}}],["behaviour",{"_index":4971,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["being",{"_index":1111,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["belgian",{"_index":197,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["below",{"_index":39,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{}}}],["benoit",{"_index":4901,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["benoît",{"_index":5105,"title":{},"body":{"index.html":{}}}],["best",{"_index":696,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["better",{"_index":3903,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["between",{"_index":4220,"title":{},"body":{"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{}}}],["bind(this",{"_index":2796,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["blob",{"_index":1198,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["blocked",{"_index":359,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["blueprint",{"_index":3771,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["blur",{"_index":757,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["body",{"_index":1174,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{}}}],["body.createelement(element",{"_index":3554,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["body.queryselector(selector.replace('{{id",{"_index":3551,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["boolean",{"_index":29,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["boolean(action",{"_index":3305,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["boolean(availabletranslations[path",{"_index":2481,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["boolean(celltemplate.footertemplate",{"_index":4932,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["boolean(closed",{"_index":3306,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["boolean(get(layout",{"_index":3142,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["boolean(tour?.[index",{"_index":4314,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["both",{"_index":2654,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["bottom",{"_index":3935,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridDirective.html":{}}}],["branch",{"_index":5089,"title":{},"body":{"index.html":{}}}],["break",{"_index":3871,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["breaking",{"_index":4614,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["brief",{"_index":3181,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["broadcast",{"_index":1392,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broadcastchannel",{"_index":1377,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broadcastchannel's",{"_index":1431,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broadcastchannel(...args",{"_index":1424,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broken",{"_index":2503,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["browser",{"_index":1419,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"dependencies.html":{}}}],["browserdocument",{"_index":4634,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["browserwindow",{"_index":2935,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxWindowService.html":{}}}],["browserwindow.matchmedia(query",{"_index":2939,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["btw",{"_index":181,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["btwpipe",{"_index":175,"title":{"pipes/BtwPipe.html":{}},"body":{"pipes/BtwPipe.html":{}}}],["bubbling",{"_index":4423,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["bug",{"_index":5102,"title":{},"body":{"index.html":{}}}],["build",{"_index":5073,"title":{},"body":{"index.html":{}}}],["bump",{"_index":5097,"title":{},"body":{"index.html":{}}}],["bundle",{"_index":3938,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["bundled",{"_index":3939,"title":{},"body":{"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["bundledcomponent",{"_index":3976,"title":{},"body":{"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{}}}],["bundler.component.ts",{"_index":3952,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["bundler.component.ts:11",{"_index":3959,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["bundler.component.ts:16",{"_index":3955,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["bundler.component.ts:21",{"_index":3956,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["busting",{"_index":2356,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["busy",{"_index":1898,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["button",{"_index":339,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/TableCellTemplate.html":{}}}],["buttonclasses",{"_index":1456,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["buttons",{"_index":4872,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["buttontype",{"_index":1457,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["bypass",{"_index":3573,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["bypasssaveonexit",{"_index":3569,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["c",{"_index":5118,"title":{},"body":{"index.html":{},"license.html":{}}}],["cache",{"_index":2355,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["cachebust",{"_index":2350,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["call",{"_index":1163,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["callback",{"_index":4633,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["called",{"_index":351,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxWindowService.html":{}}}],["calling",{"_index":2630,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxStorageService.html":{}}}],["calls",{"_index":1145,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["came",{"_index":2482,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["cancelled",{"_index":845,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["canedit",{"_index":2678,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["case",{"_index":83,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxButtonDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxTableHasObserversPipe.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["cases",{"_index":3906,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["casing",{"_index":3509,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["cast",{"_index":1351,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["catcherror",{"_index":2472,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["catcherror((res",{"_index":2494,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["categories",{"_index":1666,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["category",{"_index":1609,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{}}}],["causing",{"_index":4991,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["cdk",{"_index":235,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxModalService.html":{}}}],["cdkdialog",{"_index":3198,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["cdktablemodule",{"_index":4760,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cdref",{"_index":1026,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cell",{"_index":676,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cell'},{'name",{"_index":537,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["cell.component.ts",{"_index":1784,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:25",{"_index":1800,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["cell.component.ts:37",{"_index":1842,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:42",{"_index":1838,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:47",{"_index":1832,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:52",{"_index":1834,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.directive",{"_index":1811,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["cell.directive.ts",{"_index":3828,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["cell.resetsortdirection",{"_index":4939,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cell.sortdirection",{"_index":1130,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["cell.sortdirection.tolocalelowercase",{"_index":1131,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["cellclass",{"_index":677,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cellname",{"_index":4937,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cells",{"_index":4788,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["celltemplate",{"_index":678,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["center",{"_index":3022,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["certain",{"_index":1675,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["change",{"_index":2246,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxStorageService.html":{}}}],["changed",{"_index":1695,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxTourStepComponent.html":{}}}],["changedcategories",{"_index":1636,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["changedetection",{"_index":950,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedetectionstrategy",{"_index":981,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedetectionstrategy.onpush",{"_index":951,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedetectorref",{"_index":1070,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedservices",{"_index":1637,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["changer",{"_index":393,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["changes",{"_index":1102,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["channel",{"_index":1378,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["channel.service.ts",{"_index":1375,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:115",{"_index":1403,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:15",{"_index":1414,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:20",{"_index":1410,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:29",{"_index":1395,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:55",{"_index":1388,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:72",{"_index":1399,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:93",{"_index":1408,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel/broadcast",{"_index":1374,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channelerror",{"_index":4665,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["channelerrormessage",{"_index":4666,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["channelloading",{"_index":4667,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["channelname",{"_index":1391,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channelname{string",{"_index":1425,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channels",{"_index":1412,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["char",{"_index":212,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["charge",{"_index":2523,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"index.html":{},"license.html":{}}}],["check",{"_index":73,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["checkbox",{"_index":3856,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["checkboxtemplate",{"_index":4834,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["checked",{"_index":2971,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{},"interfaces/TableCellTemplate.html":{}}}],["checks",{"_index":31,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{}}}],["child",{"_index":4432,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["children",{"_index":4437,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["choice",{"_index":1708,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["chronological",{"_index":4546,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldates",{"_index":4494,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldates(startcontrolkey",{"_index":4507,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldatesvalidator",{"_index":4545,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldatesvalidator(startcontrolkey",{"_index":4562,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologically",{"_index":4510,"title":{},"body":{"classes/NgxValidators.html":{}}}],["circular",{"_index":745,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["claim",{"_index":5162,"title":{},"body":{"index.html":{},"license.html":{}}}],["class",{"_index":90,"title":{"classes/BaseFormAccessor.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"classes/NgxValidators.html":{}},"body":{"classes/BaseFormAccessor.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["class.ngx",{"_index":4270,"title":{},"body":{"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["classes",{"_index":92,"title":{},"body":{"classes/BaseFormAccessor.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"classes/NgxI18nAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"classes/NgxValidators.html":{},"overview.html":{}}}],["classic",{"_index":1453,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["clean",{"_index":22,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxMobileLayoutService.html":{},"dependencies.html":{}}}],["clean(group.value",{"_index":59,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedformvalue",{"_index":58,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedkeys",{"_index":60,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedkeys.has(key",{"_index":80,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedkeys.size",{"_index":65,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clear",{"_index":139,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["clearchannel",{"_index":4671,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["cleardata",{"_index":3373,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["cleared",{"_index":3722,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["clearformerror",{"_index":24,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clearformerror(control",{"_index":87,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clearing",{"_index":2662,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["clears",{"_index":3380,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["clearstorage",{"_index":3675,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["clearstorage(storage",{"_index":3680,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["clearvideos",{"_index":4672,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["click",{"_index":306,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["click.directive.ts",{"_index":297,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:12",{"_index":309,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:24",{"_index":321,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:28",{"_index":312,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:37",{"_index":313,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click/focus",{"_index":296,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["clicked",{"_index":2702,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/TableCellTemplate.html":{}}}],["clicking",{"_index":326,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["clicks",{"_index":2774,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["client.service.ts",{"_index":1136,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:120",{"_index":1177,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:14",{"_index":1181,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:143",{"_index":1179,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:16",{"_index":1152,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:166",{"_index":1175,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:29",{"_index":1172,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:41",{"_index":1170,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:61",{"_index":1166,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:99",{"_index":1157,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client/authenticated",{"_index":1135,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["clone",{"_index":5050,"title":{},"body":{"index.html":{}}}],["close",{"_index":654,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["close(onclose",{"_index":3257,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["closeaside",{"_index":3073,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["closechannel",{"_index":1382,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["closechannel(channelname",{"_index":1387,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["closed",{"_index":2838,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["closeflyout",{"_index":3074,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["closeondestroy",{"_index":3345,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["closeonnavigation",{"_index":3200,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["closeonoverlaydetachments",{"_index":3346,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["closer",{"_index":4260,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["closes",{"_index":1389,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxModalService.html":{}}}],["closing",{"_index":3222,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["code",{"_index":5094,"title":{},"body":{"index.html":{}}}],["collection",{"_index":5071,"title":{},"body":{"index.html":{}}}],["column",{"_index":679,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["columninput",{"_index":4921,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["columnkey",{"_index":3914,"title":{},"body":{"interfaces/NgxTableSortEvent.html":{}}}],["columns",{"_index":1585,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["combination",{"_index":2375,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["combinelatest",{"_index":1331,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["combinelatest([this.getsession",{"_index":1346,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["combinelatest([this.queue",{"_index":4024,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["comma",{"_index":4532,"title":{},"body":{"classes/NgxValidators.html":{}}}],["comma.validator",{"_index":4553,"title":{},"body":{"classes/NgxValidators.html":{}}}],["comma/decimals",{"_index":4552,"title":{},"body":{"classes/NgxValidators.html":{}}}],["commit",{"_index":5093,"title":{},"body":{"index.html":{}}}],["common",{"_index":5061,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":4980,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["complete",{"_index":2740,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{}}}],["completed",{"_index":2431,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxStorageService.html":{}}}],["completes",{"_index":3682,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["complex",{"_index":5063,"title":{},"body":{"index.html":{}}}],["compliant",{"_index":946,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTooltipDirective.html":{}}}],["compodoc",{"_index":5057,"title":{},"body":{"index.html":{}}}],["component",{"_index":109,"title":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}},"body":{"classes/BaseFormAccessor.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["component'},{'name",{"_index":522,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["component.component.html",{"_index":450,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["component/empty.component.ts",{"_index":2373,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["component_template",{"_index":518,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["componentclass",{"_index":4776,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["componentportal",{"_index":4172,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["componentportal(component",{"_index":4211,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["componentref",{"_index":1490,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["componentref.setinput('data",{"_index":1968,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["components",{"_index":479,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTableConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{},"overview.html":{}}}],["componenttype",{"_index":247,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["componenttypewrapper",{"_index":226,"title":{"interfaces/ComponentTypeWrapper.html":{}},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["computed",{"_index":1474,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{}}}],["concatmap",{"_index":4034,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["concatmap((event",{"_index":4039,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["condition",{"_index":1871,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["conditionalfunction",{"_index":13,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["conditionalfunction(group.value",{"_index":69,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["conditions",{"_index":1249,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxDisplayContentDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{},"license.html":{}}}],["config",{"_index":2001,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["config.token.ts",{"_index":3836,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["configurable",{"_index":530,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["configuration",{"_index":37,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{}}}],["configuration.allowclear",{"_index":2817,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.allowzoom",{"_index":2808,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.autoclose",{"_index":3312,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration.component",{"_index":3296,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration.defaultstate",{"_index":2834,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.markertypes.view",{"_index":2800,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.markertypes?.edit",{"_index":2818,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.markertypes?.view",{"_index":2798,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.mode",{"_index":2787,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.role",{"_index":3355,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration.ts",{"_index":1601,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxHasCookieConfiguration.html":{}}}],["configuration.types.ts",{"_index":1212,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["configuration.zoom?.current",{"_index":2815,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.zoom?.levels",{"_index":2811,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration?.autoclose",{"_index":3311,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration?.closeonnavigation",{"_index":3343,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration?.direction",{"_index":3336,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration?.role",{"_index":3325,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configurationvalue",{"_index":3267,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configure",{"_index":1492,"title":{},"body":{"directives/NgxButtonDirective.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["configured",{"_index":3239,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["connect",{"_index":4345,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["connectedposition",{"_index":4169,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["connection",{"_index":5169,"title":{},"body":{"index.html":{},"license.html":{}}}],["consent",{"_index":1702,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["consentchanged",{"_index":1704,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["console.error",{"_index":833,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourStepComponent.html":{}}}],["console.error('ngxforms",{"_index":2057,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["console.error(res.message",{"_index":2497,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["console.warn",{"_index":428,"title":{},"body":{"directives/FormAccessorContainer.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["console.warn('browser",{"_index":4647,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["const",{"_index":42,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["constructor",{"_index":958,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["constructor(private",{"_index":3724,"title":{},"body":{"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["constructor(selectors",{"_index":3791,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["constructorparameters",{"_index":1394,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["constructs",{"_index":1158,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["consult",{"_index":5056,"title":{},"body":{"index.html":{}}}],["container",{"_index":865,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxToastContainerComponent.html":{}}}],["container'},{'name",{"_index":552,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["container(s",{"_index":897,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["container.component.html",{"_index":3974,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.scss",{"_index":3975,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts",{"_index":3973,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:23",{"_index":3987,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:28",{"_index":3982,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:35",{"_index":3986,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:40",{"_index":3984,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:45",{"_index":3980,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:52",{"_index":3978,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.directive",{"_index":936,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["container.directive.ts",{"_index":893,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["container.directive.ts:15",{"_index":903,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["container.directive.ts:20",{"_index":906,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["container.index",{"_index":939,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["container.ts",{"_index":365,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:18",{"_index":407,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:23",{"_index":413,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:33",{"_index":391,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:47",{"_index":397,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:59",{"_index":401,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:75",{"_index":398,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:85",{"_index":376,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container/form",{"_index":364,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container/toast",{"_index":3972,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["containers",{"_index":910,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["containing",{"_index":4515,"title":{},"body":{"classes/NgxValidators.html":{}}}],["contains",{"_index":2546,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["content",{"_index":512,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["content.component.ts",{"_index":1849,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["content.component.ts:13",{"_index":1852,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["content.component.ts:8",{"_index":1854,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["content.directive",{"_index":4981,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["content.directive.ts",{"_index":1870,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:118",{"_index":1888,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:168",{"_index":1889,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:179",{"_index":1893,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:214",{"_index":1890,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:223",{"_index":1903,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:237",{"_index":1901,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:277",{"_index":1897,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:36",{"_index":1912,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:37",{"_index":1919,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:38",{"_index":1905,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:39",{"_index":1923,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:40",{"_index":1916,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:41",{"_index":1909,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:48",{"_index":1913,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:53",{"_index":1920,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:58",{"_index":1917,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:63",{"_index":1906,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:68",{"_index":1885,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:73",{"_index":1887,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:81",{"_index":1884,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.types.ts",{"_index":1857,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["content/components/display",{"_index":4977,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["content/display",{"_index":1848,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["contentchild",{"_index":1093,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["contentchild('celltmpl",{"_index":3829,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["contentchild('footertmpl",{"_index":1804,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["contentchild('headertmpl",{"_index":1807,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["contentchild>('checkboxtmpl",{"_index":4835,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('contenttmpl",{"_index":1073,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxMobileLayoutComponent.html":{}}}],["contentchild>('detailrowtmpl",{"_index":4829,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('emptytmpl",{"_index":4831,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('headertmpl",{"_index":1079,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["contentchild>('loadingtmpl",{"_index":4833,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('openrowstatetmpl",{"_index":4841,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('radiotmpl",{"_index":4837,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('sorttmpl",{"_index":4839,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchildren",{"_index":935,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["contentchildren(ngxabstracttablecelldirective",{"_index":4827,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchildren(ngxaccessibledraganddropcontainerdirective",{"_index":923,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["contentcustom",{"_index":4987,"title":{},"body":{"components/TestOverrideDisplayContentComponent.html":{}}}],["contenttemplate",{"_index":1027,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxMobileLayoutComponent.html":{}}}],["context",{"_index":1155,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["continue",{"_index":4183,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["contract",{"_index":5165,"title":{},"body":{"index.html":{},"license.html":{}}}],["contribute",{"_index":5087,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":5086,"title":{},"body":{"index.html":{}}}],["contributors",{"_index":5104,"title":{},"body":{"index.html":{}}}],["control",{"_index":70,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["control?.value",{"_index":4880,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["controlnames",{"_index":4557,"title":{},"body":{"classes/NgxValidators.html":{}}}],["controls",{"_index":14,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["controlvalueaccessor",{"_index":2726,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["convenient",{"_index":4613,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["convert",{"_index":195,"title":{},"body":{"pipes/BtwPipe.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["converts",{"_index":189,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["converttoarray",{"_index":2212,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["converttoarray(this.permission",{"_index":2325,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["cookie",{"_index":1633,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{}}}],["cookie(s",{"_index":2112,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts",{"_index":2108,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:148",{"_index":2123,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:158",{"_index":2129,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:168",{"_index":2126,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:34",{"_index":2137,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:36",{"_index":2141,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:37",{"_index":2144,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:38",{"_index":2140,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:39",{"_index":2132,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:40",{"_index":2134,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:48",{"_index":2142,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:49",{"_index":2138,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:54",{"_index":2135,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:59",{"_index":2136,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:64",{"_index":2122,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:70",{"_index":2121,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:89",{"_index":2125,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:96",{"_index":2130,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.name",{"_index":1766,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookie.services",{"_index":2160,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.services.map((service",{"_index":2163,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.ts",{"_index":1774,"title":{},"body":{"interfaces/NgxCookieValue.html":{}}}],["cookie.value",{"_index":1767,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookie/has",{"_index":2107,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookieconsent",{"_index":1614,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"dependencies.html":{},"index.html":{}}}],["cookieconsent.acceptcategory(name",{"_index":1754,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.acceptedcategory(name",{"_index":1753,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.acceptedservice(name",{"_index":1755,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.acceptservice(name",{"_index":1756,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.getcookie('data",{"_index":1758,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.run",{"_index":1750,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.setcookiedata",{"_index":1765,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.show(true",{"_index":1757,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookies",{"_index":1665,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxHasCookieDirective.html":{},"index.html":{}}}],["cookieschanged",{"_index":1642,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieschangedsubject",{"_index":1643,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsentchanged",{"_index":1644,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsentchangedsubject",{"_index":1645,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsented",{"_index":1646,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsentedsubject",{"_index":1647,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookievalue",{"_index":1610,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["copies",{"_index":5141,"title":{},"body":{"index.html":{},"license.html":{}}}],["copy",{"_index":2286,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{},"license.html":{}}}],["copyright",{"_index":5117,"title":{},"body":{"index.html":{},"license.html":{}}}],["core",{"_index":1416,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["correct",{"_index":191,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["correctly",{"_index":2080,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["corresponding",{"_index":842,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["corresponds",{"_index":2492,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxTourItemDirective.html":{}}}],["couple",{"_index":3502,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["create",{"_index":238,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["createaccessorproviders",{"_index":252,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["createbasestoreassets",{"_index":4657,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createcustomelement(linkcomponent",{"_index":3515,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["created",{"_index":2711,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{},"index.html":{}}}],["createeffect",{"_index":4725,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["createentityadapterstoreassets",{"_index":4658,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createimagemakeredit",{"_index":2759,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createimagemakeredit(id",{"_index":2764,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createimagemarker",{"_index":2760,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createimagemarker(image",{"_index":2769,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarker",{"_index":2689,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["createmarkerclickedlistener",{"_index":2761,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarkerclickedlistener(marker",{"_index":2771,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarkervaluechanges",{"_index":2762,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarkervaluechanges(marker",{"_index":2775,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmodalcomponent",{"_index":3254,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["createmodalcomponent(options",{"_index":3259,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["createreadonlyimagemarker",{"_index":2763,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createreadonlyimagemarker(id",{"_index":2778,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["creates",{"_index":2705,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{}}}],["createstoreassets",{"_index":4659,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createstoreassets('state",{"_index":4737,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createstoreassets(storeslice",{"_index":4662,"title":{},"body":{"interfaces/SpecStoreAssets.html":{}}}],["currency",{"_index":536,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["currencypipe",{"_index":1785,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["current",{"_index":724,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["currentcookies",{"_index":1771,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["currentgrid",{"_index":1556,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["currentlanguage",{"_index":790,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["currentlanguagesubject",{"_index":2525,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["currently",{"_index":1469,"title":{},"body":{"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxToastBundlerComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["currentmarker",{"_index":2679,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["currentquerymatch",{"_index":2912,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["currentroute",{"_index":3578,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["currentscrollposition",{"_index":4568,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["currentscrollpositionsubject",{"_index":4569,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["currentsorting",{"_index":1129,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["currentsortingevent",{"_index":4783,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["currentstep",{"_index":626,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["currentvalue",{"_index":1980,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["currentzoomlevel",{"_index":2680,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["custom",{"_index":650,"title":{},"body":{"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTourStepComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["customelements.define('ngx",{"_index":3517,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["custommessages",{"_index":786,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["cutout",{"_index":4246,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["cutoutmargin",{"_index":4226,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["cy",{"_index":1822,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["cypress",{"_index":695,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cypress/playwright",{"_index":2214,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["cypress/playwrite",{"_index":2786,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["cypressdatatags",{"_index":680,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cypressdatatagsinput",{"_index":4923,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cypresstag",{"_index":1816,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["cypresstag]'},{'name",{"_index":580,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["damages",{"_index":5163,"title":{},"body":{"index.html":{},"license.html":{}}}],["danger",{"_index":1446,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{}}}],["darkmode",{"_index":4654,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["darr",{"_index":3925,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["data",{"_index":28,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["data'},{'name",{"_index":554,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["data)formaccessor",{"_index":251,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{}}}],["data)formaccessors",{"_index":430,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["data.from",{"_index":853,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.fromlabel",{"_index":851,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.item",{"_index":849,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.itemlabel",{"_index":847,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.to",{"_index":855,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.tolabel",{"_index":854,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data[current",{"_index":3453,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["dataformaccessor",{"_index":564,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["dataformaccessors",{"_index":409,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["datasourcesubject",{"_index":487,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["datatype",{"_index":273,"title":{},"body":{"injectables/EffectsService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["date",{"_index":539,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"classes/NgxValidators.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"dependencies.html":{}}}],["datepipe",{"_index":1824,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["daterangevalidator",{"_index":4495,"title":{},"body":{"classes/NgxValidators.html":{}}}],["daterangevalidator(min",{"_index":4520,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dates",{"_index":4519,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dates.validator",{"_index":4548,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dates/chronological",{"_index":4547,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dd",{"_index":4518,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dd/mm/yyyy",{"_index":1843,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["de",{"_index":5047,"title":{},"body":{"index.html":{},"license.html":{}}}],["deal",{"_index":5130,"title":{},"body":{"index.html":{},"license.html":{}}}],["dealings",{"_index":5170,"title":{},"body":{"index.html":{},"license.html":{}}}],["decimals",{"_index":4531,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercomma",{"_index":4496,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercomma(max",{"_index":4526,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercommavalidator",{"_index":4551,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercommavalidator(max",{"_index":4561,"title":{},"body":{"classes/NgxValidators.html":{}}}],["declare",{"_index":3292,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["decorators",{"_index":315,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["deepmerge",{"_index":2469,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"dependencies.html":{}}}],["deepmerge(...response.map((item",{"_index":2517,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["default",{"_index":308,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["defaultassetpaths",{"_index":2351,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["defaultlanguage",{"_index":2352,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["defaultlayout",{"_index":3067,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["defaultposition",{"_index":4095,"title":{},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["defaultprojectorfn",{"_index":120,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["defaultrowopen",{"_index":4858,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["defaults",{"_index":3849,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["defaultstate",{"_index":2658,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["defaultvalue",{"_index":3264,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["define",{"_index":1545,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["defined",{"_index":187,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["definedcolumns",{"_index":4810,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["defines",{"_index":3839,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["delay",{"_index":3319,"title":{},"body":{"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["delete",{"_index":161,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["delete(url",{"_index":1153,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["denis",{"_index":207,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/NgxI18nService.html":{},"index.html":{}}}],["depend",{"_index":4540,"title":{},"body":{"classes/NgxValidators.html":{}}}],["depended",{"_index":4538,"title":{},"body":{"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{}}}],["dependedcontrol",{"_index":4541,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedcontrolkey",{"_index":4535,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequired",{"_index":4497,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequired(controls",{"_index":4534,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequiredvalidator",{"_index":4554,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequiredvalidator(controls",{"_index":4560,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependencies",{"_index":5002,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":239,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["depending",{"_index":1293,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/TableCellTemplate.html":{}}}],["depends",{"_index":1780,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{},"injectables/NgxWindowService.html":{}}}],["deprecated",{"_index":418,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["depth",{"_index":5054,"title":{},"body":{"index.html":{}}}],["descendants",{"_index":924,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["descending",{"_index":1128,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"miscellaneous/enumerations.html":{}}}],["describedby",{"_index":871,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTooltipDirective.html":{}}}],["describedbyid",{"_index":3246,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["describes",{"_index":648,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{}}}],["describing",{"_index":928,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["description",{"_index":96,"title":{},"body":{"classes/BaseFormAccessor.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreStateService.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/functions.html":{}}}],["descriptions",{"_index":3245,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["deselect",{"_index":4820,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["deselected",{"_index":844,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["destroy",{"_index":399,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["destroyed",{"_index":368,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["destroyedsubject",{"_index":952,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["destroyref",{"_index":2002,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["destruction",{"_index":2263,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["detail",{"_index":2623,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["detailed",{"_index":5082,"title":{},"body":{"index.html":{}}}],["detailrowtemplate",{"_index":4828,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["details",{"_index":1061,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["detailselement",{"_index":1028,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["detailselement?.nativeelement",{"_index":1109,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["detect",{"_index":1959,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["detectchanges",{"_index":1956,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["detected",{"_index":3440,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["detection",{"_index":3215,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["detector",{"_index":2247,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxWindowService.html":{}}}],["determine",{"_index":4849,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["developers",{"_index":5062,"title":{},"body":{"index.html":{}}}],["dialog",{"_index":3188,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{}}}],["dialogref",{"_index":3323,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentinstance",{"_index":3347,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentref.setinput",{"_index":3348,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentref.setinput('ariadescribedby",{"_index":3351,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentref.setinput('arialabelledby",{"_index":3352,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogservice",{"_index":3251,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["direction",{"_index":709,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["direction.enum",{"_index":726,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{}}}],["direction.enum.ts",{"_index":5026,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directions",{"_index":4948,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["directive",{"_index":292,"title":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["directives",{"_index":294,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"overview.html":{}}}],["directly",{"_index":3710,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["dirty",{"_index":387,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["disable",{"_index":3163,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["disablebackdrop",{"_index":4244,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["disableclose",{"_index":3331,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["disabled",{"_index":301,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["dismiss",{"_index":3233,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["dispatch",{"_index":2399,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["dispatchdatatosignalstore",{"_index":3647,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["dispatchdatatostore",{"_index":4708,"title":{},"body":{"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["dispatchdatatostore(actions.data",{"_index":4744,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["dispatchdatatostore(actions.iscompleted",{"_index":4749,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["dispatches",{"_index":4151,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["dispatching",{"_index":3414,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["dispatchtranslationloaderaction",{"_index":2389,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["dispatchtranslationloaderaction(action",{"_index":2396,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["display",{"_index":1466,"title":{},"body":{"directives/NgxButtonDirective.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["displaycontent",{"_index":1872,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["displaycontent]'},{'name",{"_index":583,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["displaycontentarialive",{"_index":1873,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["displaycontentconfiguration",{"_index":1874,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["displayed",{"_index":3047,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["displays",{"_index":4010,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["dispose",{"_index":2117,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["disposition').split('.')[1",{"_index":1204,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["distinctuntilchanged",{"_index":1283,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["distribute",{"_index":5137,"title":{},"body":{"index.html":{},"license.html":{}}}],["docs",{"_index":3180,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalBaseOptions.html":{}}}],["docs](https://developer.mozilla.org/en",{"_index":3193,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["document",{"_index":1618,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["document.createelement('p",{"_index":861,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["document.getelementbyid(arialabelledby",{"_index":3172,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["document:keydown.escape",{"_index":638,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["document?.activeelement",{"_index":4440,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["documentation",{"_index":1687,"title":{},"body":{"injectables/NgxCookieService.html":{},"index.html":{},"license.html":{}}}],["doesn't",{"_index":3870,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["dom",{"_index":480,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["domain",{"_index":1602,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["domparser",{"_index":3543,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["domsanitizer",{"_index":3539,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["don't",{"_index":236,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["done",{"_index":2050,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["dossoine",{"_index":5106,"title":{},"body":{"index.html":{}}}],["down",{"_index":963,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxModalService.html":{}}}],["download",{"_index":1147,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["download(url",{"_index":1165,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["downloading",{"_index":1168,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["drag",{"_index":782,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["draganddropservice",{"_index":911,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["draggable",{"_index":774,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["draw",{"_index":2768,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["drop",{"_index":742,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["drop.service.ts",{"_index":779,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:119",{"_index":804,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:161",{"_index":819,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:20",{"_index":799,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:25",{"_index":815,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:32",{"_index":793,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:39",{"_index":812,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.types.ts",{"_index":877,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["drop/drag",{"_index":741,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["drop/has",{"_index":2277,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["due",{"_index":3536,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["dummy",{"_index":2374,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["duplicate",{"_index":2986,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["duplicatequery",{"_index":2988,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["duplicatequery[0",{"_index":2990,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["duplicatequery[1",{"_index":2991,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["duplicates",{"_index":4027,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["during",{"_index":4268,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["dynamic",{"_index":5007,"title":{},"body":{"dependencies.html":{}}}],["dynamically",{"_index":4957,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["e.g",{"_index":3232,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["each",{"_index":431,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService-1.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["earlier",{"_index":1958,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["early",{"_index":830,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["easier",{"_index":3065,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["easy",{"_index":1141,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["edit",{"_index":2645,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["editable",{"_index":681,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["editableinput",{"_index":4924,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["editabletablecellrecord",{"_index":4790,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["effect",{"_index":982,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["effects",{"_index":126,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effects.service",{"_index":4734,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["effectsinterface['add",{"_index":289,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsinterface['delete",{"_index":291,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsinterface['set",{"_index":140,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsinterface['update",{"_index":290,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsservice",{"_index":260,"title":{"injectables/EffectsService.html":{}},"body":{"injectables/EffectsService.html":{},"injectables/StoreEffects.html":{}}}],["ekinci",{"_index":5110,"title":{},"body":{"index.html":{}}}],["element",{"_index":516,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["element.focus",{"_index":4439,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["element.innertext",{"_index":866,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["element.setattribute('id",{"_index":867,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["elementid",{"_index":627,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["elementref",{"_index":749,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["elements",{"_index":700,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{}}}],["elements.pipe.ts",{"_index":3483,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.pipe.ts:15",{"_index":3490,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.pipe.ts:16",{"_index":3493,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.pipe.ts:24",{"_index":3486,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.types.ts",{"_index":3474,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["elements/replace",{"_index":3482,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elsetemplateref",{"_index":2114,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["elseviewref",{"_index":2185,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["embeddedviewref",{"_index":2203,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["emit",{"_index":349,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["emitdatatype",{"_index":3192,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["emitevent",{"_index":437,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{},"interfaces/TableCellTemplate.html":{}}}],["emits",{"_index":660,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["emitted",{"_index":3190,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxStorageService.html":{}}}],["emitter",{"_index":3155,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["emitting",{"_index":4962,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["emitvalueonsingleitem",{"_index":3846,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["empty",{"_index":64,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["empty'},{'name",{"_index":542,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["emptydata",{"_index":4860,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["emptylabel",{"_index":1829,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["emptytemplate",{"_index":4830,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["emsens",{"_index":5112,"title":{},"body":{"index.html":{}}}],["en",{"_index":410,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["enabled",{"_index":1730,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["encountered",{"_index":1950,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["end",{"_index":1034,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["endcontrol",{"_index":4513,"title":{},"body":{"classes/NgxValidators.html":{}}}],["endcontrolkey",{"_index":4508,"title":{},"body":{"classes/NgxValidators.html":{}}}],["ended",{"_index":4591,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["enhancement",{"_index":5101,"title":{},"body":{"index.html":{}}}],["ensures",{"_index":1370,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["enter",{"_index":329,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["entering",{"_index":4186,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["entire",{"_index":3063,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["entity",{"_index":285,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystate",{"_index":163,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["entitystatus",{"_index":172,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["entitystoreaction",{"_index":3783,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystoreactions",{"_index":282,"title":{"interfaces/EntityStoreActions.html":{}},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["entitystoreassets",{"_index":286,"title":{"interfaces/EntityStoreAssets.html":{}},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["entitystoreassetsgeneratoroptions",{"_index":155,"title":{"interfaces/EntityStoreAssetsGeneratorOptions.html":{}},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystoreeffectsinterface",{"_index":284,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["entitystoreselector",{"_index":3780,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystoreselectors",{"_index":287,"title":{"interfaces/EntityStoreSelectors.html":{}},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["enum",{"_index":5001,"title":{},"body":{"interfaces/TranslationLoaderActionEntity.html":{}}}],["enumerations",{"_index":5024,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":3922,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["enums/sort",{"_index":725,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{}}}],["environment",{"_index":2241,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["equal",{"_index":1566,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["equiv",{"_index":3923,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["error",{"_index":68,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["error'},{'name",{"_index":556,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["error('this",{"_index":4742,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["errorcomponent",{"_index":2003,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["errordata",{"_index":4982,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["errorinterface",{"_index":116,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["errorkeys",{"_index":1986,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["errormessage",{"_index":113,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["errors",{"_index":86,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["errorselement",{"_index":2004,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["escape",{"_index":655,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["eslint",{"_index":3162,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["eslint/no",{"_index":3165,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["essence",{"_index":3182,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["essential",{"_index":2625,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["essentially",{"_index":2783,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["etc",{"_index":5078,"title":{},"body":{"index.html":{}}}],["eur",{"_index":1803,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["even",{"_index":4255,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["event",{"_index":311,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{},"license.html":{}}}],["event.active",{"_index":4222,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["event.direction",{"_index":4947,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["event.preventdefault",{"_index":1096,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["event.returnvalue",{"_index":3607,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["event.stopimmediatepropagation",{"_index":1097,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["event.stoppropagation",{"_index":4427,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["event.ts",{"_index":3913,"title":{},"body":{"interfaces/NgxTableSortEvent.html":{}}}],["eventemitter",{"_index":445,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["eventhandler",{"_index":353,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["eventlisteners",{"_index":3006,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["events",{"_index":345,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["eventtype",{"_index":1557,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["example",{"_index":200,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"pipes/TransformPipe.html":{}}}],["exceeded",{"_index":4529,"title":{},"body":{"classes/NgxValidators.html":{}}}],["execute",{"_index":325,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["executed",{"_index":348,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["exist",{"_index":1428,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxStorageService.html":{}}}],["existing",{"_index":732,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxStorageService.html":{}}}],["exists",{"_index":234,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["exit",{"_index":831,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["exit.component.abstract",{"_index":3577,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit.component.abstract.ts",{"_index":3580,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:12",{"_index":3586,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:22",{"_index":3604,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:27",{"_index":3603,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:33",{"_index":3596,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:38",{"_index":3592,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:43",{"_index":3593,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:45",{"_index":3595,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.service.abstract.ts",{"_index":3568,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit.service.abstract.ts:10",{"_index":3574,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit.service.abstract.ts:15",{"_index":3571,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit/save",{"_index":3567,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["exits",{"_index":3745,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["expandablerows",{"_index":4460,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["expanded",{"_index":4907,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["expiresafterdays",{"_index":1603,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["explaining",{"_index":806,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["explanations",{"_index":5083,"title":{},"body":{"index.html":{}}}],["explicitly",{"_index":3143,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["export",{"_index":27,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["exportas",{"_index":899,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["exported",{"_index":167,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"classes/NgxValidators.html":{}}}],["exposes",{"_index":2957,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxWindowService.html":{}}}],["express",{"_index":5151,"title":{},"body":{"index.html":{},"license.html":{}}}],["expresses",{"_index":1716,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["extend",{"_index":3226,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["extended",{"_index":2806,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["extender",{"_index":3826,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["extends",{"_index":171,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["external",{"_index":3501,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["extra",{"_index":991,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["extract",{"_index":3777,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["extracts",{"_index":3638,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["extras",{"_index":4234,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["fab",{"_index":1449,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["facilitate",{"_index":5060,"title":{},"body":{"index.html":{}}}],["failed",{"_index":2407,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["fall",{"_index":3144,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["fallback",{"_index":1779,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["fallback.component.ts",{"_index":1777,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["fallback.component.ts:13",{"_index":1781,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["fallback/cookie",{"_index":1776,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["fallbackcomponent",{"_index":2128,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["fallbacks",{"_index":1851,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["fallbacktemplate",{"_index":2127,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["false",{"_index":81,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["falsy",{"_index":208,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["faulty",{"_index":4821,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["feat(package",{"_index":5099,"title":{},"body":{"index.html":{}}}],["feat/package/feature",{"_index":5092,"title":{},"body":{"index.html":{}}}],["feature",{"_index":1236,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"injectables/NgxI18nService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["feature(s",{"_index":2180,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["feature.directive.ts",{"_index":2178,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:116",{"_index":2196,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:123",{"_index":2197,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:175",{"_index":2195,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:33",{"_index":2208,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:37",{"_index":2211,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:41",{"_index":2199,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:47",{"_index":2200,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:52",{"_index":2201,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:57",{"_index":2209,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:58",{"_index":2210,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:59",{"_index":2202,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:60",{"_index":2204,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:65",{"_index":2205,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:70",{"_index":2207,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:75",{"_index":2206,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:80",{"_index":2192,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:85",{"_index":2193,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:90",{"_index":2194,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:95",{"_index":2191,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.pipe.ts",{"_index":2233,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:16",{"_index":2243,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:17",{"_index":2244,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:22",{"_index":2251,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:26",{"_index":2252,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:31",{"_index":2245,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:40",{"_index":2235,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:53",{"_index":2240,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:64",{"_index":2237,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:88",{"_index":2234,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature/has",{"_index":2177,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["features",{"_index":1234,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFeatureDirective.html":{}}}],["featuretype",{"_index":1237,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["femke",{"_index":5113,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":834,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxModalService.html":{}}}],["fetchchannel",{"_index":263,"title":{},"body":{"injectables/EffectsService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["fetchchannel(ispublic",{"_index":265,"title":{},"body":{"injectables/EffectsService.html":{}}}],["fetched",{"_index":2486,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxStorageService.html":{}}}],["fetches",{"_index":2401,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["fetching",{"_index":2442,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["fetchpath",{"_index":2487,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["fetchvideos",{"_index":264,"title":{},"body":{"injectables/EffectsService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["fetchvideos(id",{"_index":269,"title":{},"body":{"injectables/EffectsService.html":{}}}],["field",{"_index":4501,"title":{},"body":{"classes/NgxValidators.html":{}}}],["fields",{"_index":4502,"title":{},"body":{"classes/NgxValidators.html":{}}}],["figured",{"_index":2287,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxImageMarkerComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["files",{"_index":2362,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"index.html":{},"license.html":{}}}],["filetype",{"_index":1202,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["fill",{"_index":1565,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["filled",{"_index":33,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["filling",{"_index":1584,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["filter",{"_index":821,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxToastService.html":{}}}],["filter(([action",{"_index":3304,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["filter((length",{"_index":4051,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["filter((queryid",{"_index":3003,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["filter((translation",{"_index":2511,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["filter(boolean",{"_index":837,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["filtered",{"_index":3395,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["filters",{"_index":3410,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["filtersform",{"_index":3424,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["finalize",{"_index":2638,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["find",{"_index":1009,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{}}}],["find/replace",{"_index":3546,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["findfocusableelement",{"_index":4364,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["findindex",{"_index":4863,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["fired",{"_index":3205,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["first",{"_index":964,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["firstcookiesconsented",{"_index":1648,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["firstcookiesconsentedsubject",{"_index":1649,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["fit",{"_index":1564,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["fitness",{"_index":5155,"title":{},"body":{"index.html":{},"license.html":{}}}],["fix",{"_index":5096,"title":{},"body":{"index.html":{}}}],["fix(package",{"_index":5098,"title":{},"body":{"index.html":{}}}],["fix/package/feature",{"_index":5091,"title":{},"body":{"index.html":{}}}],["flag",{"_index":759,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["flatten",{"_index":2145,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["flatten(hascookies).every((hascookie",{"_index":2166,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["flexibleconnectedto(elementref",{"_index":4206,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["flip",{"_index":3908,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["flow",{"_index":1914,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["flows",{"_index":894,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["flyout",{"_index":3020,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["flyoutshown",{"_index":3036,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["fn",{"_index":4885,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["fns",{"_index":5011,"title":{},"body":{"dependencies.html":{}}}],["focus",{"_index":330,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["focus.directive",{"_index":777,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["focus.directive.ts",{"_index":2270,"title":{},"body":{"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:13",{"_index":2276,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:15",{"_index":2285,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:18",{"_index":2273,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:20",{"_index":2279,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:25",{"_index":2272,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:31",{"_index":2278,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:34",{"_index":2274,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:39",{"_index":2284,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:41",{"_index":2280,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:43",{"_index":2275,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:45",{"_index":2282,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:47",{"_index":2283,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:54",{"_index":2281,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focusable",{"_index":4398,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["focusableelement",{"_index":4433,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["focusclick",{"_index":299,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["focusclick]'},{'name",{"_index":565,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["focusclickdirective",{"_index":293,"title":{"directives/FocusClickDirective.html":{}},"body":{"directives/FocusClickDirective.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["focused",{"_index":3221,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["focussed",{"_index":763,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxToastService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["focussedcell",{"_index":4824,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["focussedrow",{"_index":4823,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["following",{"_index":2496,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["footer",{"_index":1806,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["footertemplate",{"_index":682,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["force",{"_index":2361,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["foreach((marker",{"_index":2847,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["forkjoin",{"_index":2471,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["forkjoin(requestedtranslations).pipe",{"_index":2507,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["form",{"_index":382,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["form.accessor",{"_index":417,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["form.accessor.ts",{"_index":95,"title":{},"body":{"classes/BaseFormAccessor.html":{}}}],["form/base",{"_index":94,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{}}}],["formaccessor",{"_index":566,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["formaccessorcontainer",{"_index":361,"title":{"directives/FormAccessorContainer.html":{}},"body":{"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["formaccessors",{"_index":411,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxImageMarkerComponent.html":{}}}],["format",{"_index":192,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"classes/NgxValidators.html":{}}}],["formcontainer",{"_index":100,"title":{},"body":{"classes/BaseFormAccessor.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{}}}],["formcontrol",{"_index":1544,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["formgenerated",{"_index":4782,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["formgroup",{"_index":20,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["formgroupdirective",{"_index":2005,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["formgroupname",{"_index":2036,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["formnamedirective",{"_index":2006,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["formrecord",{"_index":4765,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["forms",{"_index":404,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"index.html":{}}}],["formstateoptionsentity",{"_index":390,"title":{"interfaces/FormStateOptionsEntity.html":{}},"body":{"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{}}}],["formtype",{"_index":3386,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["forwardref",{"_index":242,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["found",{"_index":426,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["free",{"_index":5125,"title":{},"body":{"index.html":{},"license.html":{}}}],["friendly",{"_index":337,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["fromevent",{"_index":1417,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxOnlineService.html":{}}}],["fromevent(window",{"_index":3365,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["fromevent>(this.broadcastchannel[channelname",{"_index":1432,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["fromstore",{"_index":2480,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["frontend",{"_index":3869,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["function",{"_index":15,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/IbanPipe.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxModalBaseOptions.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["functional",{"_index":108,"title":{},"body":{"classes/BaseFormAccessor.html":{}}}],["functionalities",{"_index":5079,"title":{},"body":{"index.html":{}}}],["functions",{"_index":807,"title":{"miscellaneous/functions.html":{}},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["furnished",{"_index":5144,"title":{},"body":{"index.html":{},"license.html":{}}}],["gdpr",{"_index":3418,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["generate",{"_index":253,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["generated",{"_index":1483,"title":{},"body":{"directives/NgxButtonDirective.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{}}}],["generatengxtableform",{"_index":4767,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["generatengxtableform(this.rowsformgroup",{"_index":4803,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["generates",{"_index":248,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["generator",{"_index":148,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["generator.ts",{"_index":3767,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["generator.types",{"_index":3633,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["generic",{"_index":1794,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{}}}],["get(selectablekey",{"_index":4941,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["get(url",{"_index":1169,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["get(value",{"_index":3874,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["getauthenticationresponse",{"_index":1262,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getavailablelanguages",{"_index":2605,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["getchannel",{"_index":4673,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["getcomponent",{"_index":3075,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["getcomponent(component",{"_index":3083,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["getcontainer",{"_index":912,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["getcontainer(index",{"_index":914,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["getcookie",{"_index":1654,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcookie(cookie",{"_index":1669,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcookieobservable",{"_index":1655,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcookieobservable(cookie",{"_index":1671,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcurrentlanguage",{"_index":814,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["getdefaultlanguage",{"_index":2607,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["getelementid",{"_index":4281,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["geterrors",{"_index":2008,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["geterrors(data",{"_index":2012,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["getfirstrow",{"_index":4451,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["getitem",{"_index":3654,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["getitem(key",{"_index":3684,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getitemobservable",{"_index":3655,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["getitemobservable(key",{"_index":3686,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getlastrow",{"_index":4452,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["getlocalstorage",{"_index":3704,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getmatchingquery",{"_index":2961,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["getmatchingquery$(id",{"_index":2967,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["getmessagerecord",{"_index":818,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["getmetadata",{"_index":1327,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getnewlanguage",{"_index":2527,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["getnewlanguage(language",{"_index":2532,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["getprop",{"_index":1827,"title":{},"body":{"components/NgxDateTableCellComponent.html":{},"pipes/NgxTableGetPipe.html":{}}}],["getrow",{"_index":4453,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["getrow(index",{"_index":4464,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["gets",{"_index":332,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["getsession",{"_index":1263,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getsessionstorage",{"_index":3706,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getstate",{"_index":3615,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{}}}],["getting",{"_index":5040,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettranslation",{"_index":2454,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{}}}],["gettranslation(key",{"_index":2589,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["gettranslation(lang",{"_index":2464,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["gettranslationobservable",{"_index":2587,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["gettranslationobservable(key",{"_index":2592,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["gettranslations",{"_index":2390,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["getuser",{"_index":1324,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getvalue",{"_index":2579,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{}}}],["getvalue(configurationvalue",{"_index":3262,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["getvideos",{"_index":4674,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["getvideos(actiontype",{"_index":4680,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["give",{"_index":4287,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["given",{"_index":4996,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["global",{"_index":1279,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["globalfeatures",{"_index":1348,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["globalfeaturessubject",{"_index":1259,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["globally",{"_index":3837,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["go",{"_index":1008,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridDirective.html":{}}}],["grab",{"_index":1588,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["grabs",{"_index":3697,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["granted",{"_index":5124,"title":{},"body":{"index.html":{},"license.html":{}}}],["grid",{"_index":1579,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["grid.cell.directive",{"_index":4477,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.cell.directive.ts",{"_index":4359,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:102",{"_index":4390,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:109",{"_index":4388,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:116",{"_index":4382,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:121",{"_index":4383,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:126",{"_index":4399,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:143",{"_index":4407,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:152",{"_index":4396,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:174",{"_index":4411,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:24",{"_index":4416,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:27",{"_index":4414,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:32",{"_index":4417,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:37",{"_index":4385,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:53",{"_index":4386,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:60",{"_index":4387,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:67",{"_index":4384,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:74",{"_index":4393,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:81",{"_index":4391,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:88",{"_index":4389,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:95",{"_index":4392,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.directive",{"_index":4420,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.directive.ts",{"_index":4447,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:19",{"_index":4476,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:21",{"_index":4461,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:26",{"_index":4458,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:31",{"_index":4459,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:38",{"_index":4472,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:47",{"_index":4474,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:56",{"_index":4465,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:69",{"_index":4462,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:76",{"_index":4463,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:85",{"_index":4467,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:94",{"_index":4470,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:98",{"_index":4468,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid/tree",{"_index":4358,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["group",{"_index":45,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["groups",{"_index":472,"title":{},"body":{"pipes/IbanPipe.html":{},"injectables/NgxI18nLoadingService.html":{}}}],["guard",{"_index":2629,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"classes/NgxSaveOnExitAbstractService.html":{}}}],["guards",{"_index":1248,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["guided",{"_index":5074,"title":{},"body":{"index.html":{}}}],["guioptions",{"_index":1611,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["handle",{"_index":57,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/functions.html":{}}}],["handleaccessorsaction",{"_index":370,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleaccessorsaction(action",{"_index":375,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handlecomponentrender",{"_index":2009,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handlecomponentrender(shouldshow",{"_index":2014,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handlecontentscroll",{"_index":4575,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["handlecurrentsort(event",{"_index":4944,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handledatachanges",{"_index":3374,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledatachanges(data",{"_index":3381,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledatachanges(value",{"_index":3431,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledatachanges?(data",{"_index":3469,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledirtystate",{"_index":3570,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["handleeffect",{"_index":4727,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["handleeffect(actions.videos",{"_index":4730,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["handleformaccessormarkasdirty",{"_index":414,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessormarkasdirty(form",{"_index":420,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessormarkastouched",{"_index":415,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessormarkastouched(form",{"_index":422,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessorupdatevalueandvalidity",{"_index":416,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleicon",{"_index":1463,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["handleinteraction",{"_index":628,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["handleloading",{"_index":1464,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["handlengxtableheadervaluechanges",{"_index":4768,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlengxtableheadervaluechanges(this.rowsformgroup",{"_index":4975,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlengxtablevaluechanges",{"_index":4769,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlenocomponentflow",{"_index":2010,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handlenocomponentflow(shouldshow",{"_index":2018,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handler",{"_index":338,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["handlerowclicked(row",{"_index":4897,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlerowcolumns",{"_index":4952,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlerowstate(index",{"_index":4908,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlers",{"_index":1222,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["handles",{"_index":705,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["handlesort",{"_index":687,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["handlesort(column",{"_index":4934,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handletablecelltemplates",{"_index":4914,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handleunloadevent",{"_index":3582,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["handleunloadevent(event",{"_index":3589,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["handleurl",{"_index":1148,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["handleurl(url",{"_index":1171,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["handlewhenfocussed",{"_index":752,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["handlewhenfocussed(action",{"_index":766,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["handling",{"_index":254,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["happens",{"_index":3384,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["hasacceptedcategory",{"_index":1656,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasacceptedcategory(name",{"_index":1673,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasacceptedservice",{"_index":1657,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasacceptedservice(category",{"_index":1677,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasactivemodal",{"_index":3252,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasauthenticated",{"_index":1260,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["hasbackdrop",{"_index":3202,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["hasbundledtoasts",{"_index":3977,"title":{},"body":{"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{}}}],["haschanges",{"_index":2731,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["hascookie",{"_index":2113,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["hascookie]'},{'name",{"_index":589,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["hascookieelse",{"_index":2115,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["hasdependedrequirederror",{"_index":4539,"title":{},"body":{"classes/NgxValidators.html":{}}}],["hasdocument",{"_index":4576,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["haselement",{"_index":3076,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["haselement(element",{"_index":3085,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["haserrors",{"_index":2007,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["hasfeature",{"_index":1264,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["hasfeature(converttoarray(this.feature",{"_index":2226,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["hasfeature(requiredfeatures",{"_index":1294,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["hasfocus",{"_index":750,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hasfootertemplates",{"_index":4818,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["hasform",{"_index":4798,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["hasmodal",{"_index":3318,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasmodalsubject",{"_index":3253,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasnext",{"_index":4315,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["hasobservers",{"_index":443,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["hasobserverspipe",{"_index":439,"title":{"pipes/HasObserversPipe.html":{}},"body":{"pipes/HasObserversPipe.html":{}}}],["hasone",{"_index":79,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["hasonekey",{"_index":77,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["haspermission",{"_index":1265,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["haspermission(requiredpermissions",{"_index":1298,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["hasprevious",{"_index":4313,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["haspriority",{"_index":3933,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["hasrequireddescription",{"_index":3255,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasrequireddescription(options",{"_index":3268,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["header",{"_index":1081,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["header.${keyof",{"_index":3027,"title":{},"body":{"interfaces/NgxMobileLayout.html":{}}}],["header.pipe.ts",{"_index":3898,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["header.pipe.ts:18",{"_index":3901,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["header/show",{"_index":3897,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["headercontrol",{"_index":4808,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["headertemplate",{"_index":683,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["heirstrate",{"_index":5108,"title":{},"body":{"index.html":{}}}],["hello",{"_index":494,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/NgxStorageService.html":{}}}],["helpers",{"_index":3863,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["here",{"_index":1353,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{}}}],["hereby",{"_index":5123,"title":{},"body":{"index.html":{},"license.html":{}}}],["hidden",{"_index":3907,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["hide",{"_index":872,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["hideelement",{"_index":829,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["hideelement(element",{"_index":873,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["hidefrombots",{"_index":1631,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["hideheaderrowoption",{"_index":3851,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["hideheaderrowoptions",{"_index":3854,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["hideheaderrowwhen",{"_index":3900,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["hideheaderwhen",{"_index":3848,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["hides/renders",{"_index":2131,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{}}}],["hidewhennotemplateprovided",{"_index":1858,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["highest",{"_index":1977,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["highlight",{"_index":4237,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["highlighted",{"_index":4251,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["highlightkey",{"_index":3850,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["hold",{"_index":977,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxCookieService.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["holder",{"_index":486,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/NgxCookieService.html":{}}}],["holder'},{'name",{"_index":519,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["holder.component.mock.ts",{"_index":483,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:14",{"_index":500,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:16",{"_index":498,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:18",{"_index":495,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:22",{"_index":490,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holders",{"_index":5160,"title":{},"body":{"index.html":{},"license.html":{}}}],["holding",{"_index":1411,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["holds",{"_index":1907,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxStoreService.html":{}}}],["home",{"_index":1035,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["host",{"_index":334,"title":{},"body":{"directives/FocusClickDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["host.directive.ts",{"_index":907,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:19",{"_index":931,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:20",{"_index":933,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:25",{"_index":934,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:30",{"_index":925,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:35",{"_index":927,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:42",{"_index":917,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:51",{"_index":915,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:55",{"_index":920,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:62",{"_index":922,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["hostbinding",{"_index":4283,"title":{},"body":{"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["hostbinding('attr.role",{"_index":4475,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["hostbinding('class",{"_index":665,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["hostbinding('class.ngx",{"_index":4279,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["hostbindings",{"_index":637,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["hostdirective",{"_index":747,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["hostlistener",{"_index":340,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('blur",{"_index":770,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('click",{"_index":316,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["hostlistener('document:keydown.escape",{"_index":658,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["hostlistener('focus",{"_index":771,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowdown",{"_index":1050,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowleft",{"_index":4401,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowright",{"_index":4402,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowup",{"_index":1052,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.control.end",{"_index":4403,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.control.home",{"_index":4409,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.end",{"_index":1053,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.enter",{"_index":318,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["hostlistener('keydown.home",{"_index":1058,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.pagedown",{"_index":4410,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.pageup",{"_index":4408,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('mouseenter",{"_index":4084,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["hostlistener('mouseleave",{"_index":4083,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["hostlistener('window:beforeunload",{"_index":3591,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["hostlisteners",{"_index":305,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hover",{"_index":4020,"title":{},"body":{"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{}}}],["html",{"_index":515,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxButtonConfiguration.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["htmlelement",{"_index":803,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["htmlimageelement",{"_index":2765,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["htmlparagraphelement",{"_index":860,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["htmlspanelement",{"_index":1508,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["http",{"_index":1134,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["httpbackend",{"_index":2451,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["httpclient",{"_index":1139,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/SpecStoreService.html":{}}}],["httpclient(this.httpbackend).get(fetchpath).pipe",{"_index":2490,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["httpclientconfiguration",{"_index":1225,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["httpcontext",{"_index":1156,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["httperrorresponse",{"_index":117,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["httphandler",{"_index":5039,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httphandlerfn",{"_index":5037,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httpinterceptorfn",{"_index":1218,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["httprequest",{"_index":1219,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"miscellaneous/functions.html":{}}}],["httpresponse",{"_index":1182,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["https://cookieconsent.orestbida.com",{"_index":1640,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["https://cookieconsent.orestbida.com/essential/getting",{"_index":1688,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["https://developer.mozilla.org/en",{"_index":1379,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["https://docs.cypress.io/guides/references/best",{"_index":698,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["https://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts",{"_index":2250,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts",{"_index":2182,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["https://markerjs.com",{"_index":2675,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["https://www.w3.org/wai/aria/apg/patterns/accordion",{"_index":949,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{}}}],["https://www.w3.org/wai/aria/apg/patterns/treegrid",{"_index":4361,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["hyperdrive",{"_index":5121,"title":{},"body":{"index.html":{},"license.html":{}}}],["i18n",{"_index":541,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{}}}],["i18n.service",{"_index":2609,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["i18n.service.ts",{"_index":2522,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:120",{"_index":2539,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:129",{"_index":2533,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:17",{"_index":2548,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:22",{"_index":2553,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:27",{"_index":2551,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:34",{"_index":2547,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:41",{"_index":2545,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:48",{"_index":2552,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:53",{"_index":2531,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:65",{"_index":2550,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:71",{"_index":2554,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:80",{"_index":2541,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:98",{"_index":2535,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.types",{"_index":2473,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["i18n/root",{"_index":2521,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["i18nloadingservice",{"_index":2631,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["i18nservice",{"_index":2632,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ian",{"_index":5111,"title":{},"body":{"index.html":{}}}],["iban",{"_index":458,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["ibannumber",{"_index":465,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["ibanpipe",{"_index":456,"title":{"pipes/IbanPipe.html":{}},"body":{"pipes/IbanPipe.html":{}}}],["iben",{"_index":49,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["ibenvandeveire",{"_index":5042,"title":{},"body":{"index.html":{}}}],["ibenvandeveire/ngx",{"_index":1255,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTourStepComponent.html":{},"injectables/NgxWindowService.html":{},"dependencies.html":{},"index.html":{}}}],["ibenvandeveire/rxjs",{"_index":5080,"title":{},"body":{"index.html":{}}}],["ibenvandeveire/types",{"_index":1330,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"dependencies.html":{}}}],["icon",{"_index":1435,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxTableSortIconPipe.html":{}}}],["icon.pipe.ts",{"_index":3918,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["icon.pipe.ts:15",{"_index":3921,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["icon/sort",{"_index":3917,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["iconcomponent",{"_index":1458,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["iconelement",{"_index":1459,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["iconposition",{"_index":1436,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["id",{"_index":271,"title":{},"body":{"injectables/EffectsService.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxMediaQuery.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["id={{id",{"_index":3521,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ideal",{"_index":3409,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["identifier",{"_index":3531,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["identify",{"_index":3524,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ids",{"_index":2946,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ids.every((item",{"_index":2948,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["idselector",{"_index":153,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["if(contenttemplate",{"_index":3058,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(hasbundledtoasts",{"_index":3991,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["if(layout",{"_index":3052,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().aside",{"_index":3057,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().flyout",{"_index":3059,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().footer",{"_index":3060,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().header",{"_index":3053,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().header.left",{"_index":3054,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().header.right",{"_index":3055,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().navigation",{"_index":3056,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(toasts().length",{"_index":3989,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["ignore",{"_index":344,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ignored",{"_index":434,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["image",{"_index":544,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["imagedescription",{"_index":2681,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["imageelement",{"_index":2682,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["imagemarkerservice",{"_index":2683,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["img[data",{"_index":3522,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["implement",{"_index":2213,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["implementation",{"_index":947,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["implementations",{"_index":2556,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{}}}],["implemented",{"_index":2248,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{}}}],["implementing",{"_index":1850,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["implements",{"_index":206,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["implied",{"_index":5152,"title":{},"body":{"index.html":{},"license.html":{}}}],["import",{"_index":19,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["important",{"_index":104,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["imports",{"_index":1021,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["improve",{"_index":5065,"title":{},"body":{"index.html":{}}}],["in/from",{"_index":3721,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["inactive",{"_index":1581,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTourItemDirective.html":{}}}],["include",{"_index":3523,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"index.html":{}}}],["included",{"_index":1429,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{},"license.html":{}}}],["includeinnerhtml",{"_index":3475,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["including",{"_index":5132,"title":{},"body":{"index.html":{},"license.html":{}}}],["incorrectchronologicaldate",{"_index":4512,"title":{},"body":{"classes/NgxValidators.html":{}}}],["incorrectchronologicaldates",{"_index":4511,"title":{},"body":{"classes/NgxValidators.html":{}}}],["independent",{"_index":5058,"title":{},"body":{"index.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["index).concat(this.rows.slice(index",{"_index":4481,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["indexes",{"_index":995,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["indexes.foreach((index",{"_index":997,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["indicate",{"_index":1795,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["indicates",{"_index":3228,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["indicator",{"_index":3843,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["indices",{"_index":4792,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["indirectly",{"_index":3211,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["individual",{"_index":2162,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"classes/NgxValidators.html":{},"index.html":{}}}],["infinite",{"_index":4963,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["inform",{"_index":3174,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTourStepComponent.html":{},"index.html":{}}}],["information",{"_index":796,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxWindowService.html":{}}}],["informing",{"_index":3825,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["inheritdoc",{"_index":4355,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["inherited",{"_index":639,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["initchannel",{"_index":1383,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["initchannel(...args",{"_index":1393,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["initform",{"_index":3375,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["initi18n",{"_index":2588,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["initi18n(language",{"_index":2595,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["initial",{"_index":1891,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["initialdata",{"_index":3637,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["initialize",{"_index":1422,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["initializelanguage",{"_index":2528,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["initializes",{"_index":1396,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxI18nService.html":{}}}],["initiallayoutset",{"_index":3068,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["initiallayoutsetsubject",{"_index":3069,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["initially",{"_index":4442,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["initialstatevalue",{"_index":150,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{}}}],["initialvalue",{"_index":3775,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["inject",{"_index":501,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/TableCellTemplate.html":{}}}],["inject('selectors",{"_index":3806,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["inject(actions",{"_index":4721,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["inject(activatedroute",{"_index":3404,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["inject(changedetectorref",{"_index":1071,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["inject(destroyref",{"_index":2029,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inject(dialog",{"_index":3278,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["inject(document",{"_index":4596,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["inject(domsanitizer",{"_index":3492,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["inject(effectsservice",{"_index":4723,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["inject(elementref",{"_index":1853,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["inject(formgroupdirective",{"_index":2034,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inject(formgroupname",{"_index":2037,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inject(httpbackend",{"_index":2458,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["inject(httpclient",{"_index":1180,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/SpecStoreService.html":{}}}],["inject(liveannouncer",{"_index":798,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["inject(ngxaccessibledraganddropabstractservice",{"_index":930,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["inject(ngxaccordioncomponent",{"_index":1084,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["inject(ngxauthenticationservicetoken",{"_index":2242,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["inject(ngxauthenticationurlhandlertoken",{"_index":1189,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["inject(ngxbuttonconfigurationtoken",{"_index":1487,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["inject(ngxcookieservice",{"_index":2139,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["inject(ngxi18nconfigurationtoken",{"_index":2455,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["inject(ngxi18nloadingservice",{"_index":2460,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["inject(ngxi18nrootservice",{"_index":2597,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["inject(ngxi18nservice",{"_index":2636,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["inject(ngxi18ntranslationpathstoken",{"_index":2462,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["inject(ngximagemarkerservice",{"_index":2716,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["inject(ngxmediaqueriestoken",{"_index":2925,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["inject(ngxmediaqueryservice",{"_index":2893,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["inject(ngxmobilelayoutservice",{"_index":3048,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["inject(ngxmodalconfigurationtoken",{"_index":3276,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["inject(ngxonlineservice",{"_index":1915,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["inject(ngxreplaceelementsconfigurationtoken",{"_index":3489,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["inject(ngxtableconfigurationtoken",{"_index":4775,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["inject(ngxtoastservice",{"_index":3958,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{}}}],["inject(ngxtooltipconfigurationtoken",{"_index":4155,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["inject(ngxtooltipservice",{"_index":4085,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["inject(ngxtourservice",{"_index":499,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["inject(ngxtreegriddirective",{"_index":4415,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["inject(ngxwindowservice",{"_index":1413,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{}}}],["inject(overlay",{"_index":4161,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["inject(overlaypositionbuilder",{"_index":4158,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["inject(platform_id",{"_index":4598,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["inject(renderer2",{"_index":1087,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["inject(router",{"_index":3406,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["inject(store",{"_index":3804,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["inject(templateref",{"_index":2042,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["inject(translateservice",{"_index":2601,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["inject(viewcontainerref",{"_index":1503,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["inject>(elementref",{"_index":932,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTourItemDirective.html":{}}}],["inject>(templateref",{"_index":1918,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["injectable",{"_index":259,"title":{"injectables/EffectsService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{}},"body":{"injectables/EffectsService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["injectables",{"_index":261,"title":{},"body":{"injectables/EffectsService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"overview.html":{}}}],["injection",{"_index":1216,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxWindowService.html":{}}}],["injectiontoken",{"_index":3853,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["injector",{"_index":3186,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["innerhtml",{"_index":1514,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["innertext",{"_index":3525,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["input",{"_index":341,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["input('checkbox",{"_index":4848,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["input('dd/mm/yyyy",{"_index":1841,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["input('empty",{"_index":1837,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["input('eur",{"_index":1799,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["input('polite",{"_index":1910,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["input('primary",{"_index":1499,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["input('regular",{"_index":1484,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["input(false",{"_index":346,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["input(true",{"_index":2727,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["input(undefined",{"_index":904,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxMediaQueryDirective.html":{}}}],["input(uuid",{"_index":4123,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["input.required",{"_index":663,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxHasCookieDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["inputs",{"_index":304,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["inputsignal",{"_index":960,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["inputted",{"_index":4528,"title":{},"body":{"classes/NgxValidators.html":{}}}],["insert",{"_index":2093,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inserts",{"_index":1475,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["inside",{"_index":3217,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["install",{"_index":5052,"title":{},"body":{"index.html":{}}}],["installation",{"_index":5049,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1390,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxWindowService.html":{}}}],["instances",{"_index":2582,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["instant",{"_index":2591,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["instantiated",{"_index":3216,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["instantiation",{"_index":3208,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["instead",{"_index":384,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/NgxTableGetPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["intentional",{"_index":433,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["interact",{"_index":3413,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["interaction",{"_index":3231,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["interactions",{"_index":662,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["intercepted",{"_index":3598,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["interceptor",{"_index":5038,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interceptors",{"_index":1214,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/ComponentTypeWrapper.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/FormStateOptionsEntity.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxMediaQuery.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/ComponentTypeWrapper.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/FormStateOptionsEntity.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxMediaQuery.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/ComponentTypeWrapper.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxMediaQuery.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"overview.html":{}}}],["internal",{"_index":231,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["internally",{"_index":4632,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["interop",{"_index":2047,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{}}}],["interrupted",{"_index":3601,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["invalid",{"_index":1839,"title":{},"body":{"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["invaliddecimalsaftercomma",{"_index":4533,"title":{},"body":{"classes/NgxValidators.html":{}}}],["invalidrange",{"_index":4524,"title":{},"body":{"classes/NgxValidators.html":{}}}],["invisible",{"_index":3135,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["irrelevant",{"_index":4066,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["isactive",{"_index":1569,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"directives/NgxTourItemDirective.html":{}}}],["isauthenticated",{"_index":1261,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["isbrowser",{"_index":4577,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["isclicked",{"_index":302,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["isclicked(event",{"_index":314,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["iscompleted",{"_index":4736,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["isdirty",{"_index":3583,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["isdisabled",{"_index":4889,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["isempty",{"_index":3865,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/TableCellTemplate.html":{}}}],["isentered",{"_index":303,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["isfocussed",{"_index":3994,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["isfocussedon",{"_index":2271,"title":{},"body":{"directives/NgxHasFocusDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["isloading",{"_index":1899,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["isn't",{"_index":358,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxToastService.html":{}}}],["iso",{"_index":1801,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["isopen",{"_index":1029,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["isplatformbrowser",{"_index":4630,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["isplatformbrowser(this.platformid",{"_index":4646,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["ispublic",{"_index":267,"title":{},"body":{"injectables/EffectsService.html":{}}}],["isset",{"_index":1764,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["issues",{"_index":3110,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourStepComponent.html":{},"pipes/TransformPipe.html":{}}}],["isvalid",{"_index":3584,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["it's",{"_index":215,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["item",{"_index":762,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["item'},{'name",{"_index":528,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["item.component",{"_index":985,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["item.component.html",{"_index":1023,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.scss",{"_index":1025,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts",{"_index":1019,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:107",{"_index":1041,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:112",{"_index":1082,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:117",{"_index":1083,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:122",{"_index":1078,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:127",{"_index":1067,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:137",{"_index":1054,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:146",{"_index":1065,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:153",{"_index":1063,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:160",{"_index":1059,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:184",{"_index":1062,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:19",{"_index":1546,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:193",{"_index":1056,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:24",{"_index":1547,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:29",{"_index":1551,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:40",{"_index":1085,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:41",{"_index":1072,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:42",{"_index":1088,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:47",{"_index":1076,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:52",{"_index":1090,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:57",{"_index":1074,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:62",{"_index":1080,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:67",{"_index":1045,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:78",{"_index":1043,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:89",{"_index":1048,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:98",{"_index":1047,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.data",{"_index":3555,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["item.directive.ts",{"_index":743,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:13",{"_index":772,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["item.directive.ts:14",{"_index":4278,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:15",{"_index":4280,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:16",{"_index":4277,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:18",{"_index":761,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["item.directive.ts:21",{"_index":4272,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:26",{"_index":4271,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:33",{"_index":4276,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:44",{"_index":4282,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:48",{"_index":4273,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:58",{"_index":4274,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.filter((key",{"_index":1594,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["item.id",{"_index":1002,"title":{},"body":{"components/NgxAccordionComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxToastService.html":{}}}],["item.translations",{"_index":2518,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["item.updateaccordionitemstate(true",{"_index":994,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["item/accordion",{"_index":984,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["item/configurable",{"_index":1541,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item/items",{"_index":3816,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["item/tour",{"_index":4267,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item[itemkey",{"_index":1831,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["itemdirective",{"_index":746,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["itemid",{"_index":748,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["itemkey",{"_index":1830,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["itemregisteredsubject",{"_index":953,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["items",{"_index":50,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{}}}],["items.foreach((item",{"_index":3549,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["items.length",{"_index":3542,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["itemsize",{"_index":1576,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["itself",{"_index":383,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxToastComponent.html":{},"classes/NgxValidators.html":{}}}],["join",{"_index":2504,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["json",{"_index":2449,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["json.parse(data[current",{"_index":3454,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["json.parse(value",{"_index":3765,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["json.stringify(item",{"_index":3749,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["json.stringify(parseddata[current",{"_index":3467,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["keep",{"_index":2430,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["keeps",{"_index":3282,"title":{},"body":{"injectables/NgxModalService.html":{},"interfaces/TableCellTemplate.html":{}}}],["key",{"_index":76,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FocusClickDirective.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["key.isactive",{"_index":1595,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["keydown",{"_index":356,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["keydown.arrowdown",{"_index":1037,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowdown(event",{"_index":1042,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["keydown.arrowleft",{"_index":4376,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowright",{"_index":4377,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowup",{"_index":1038,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowup(event",{"_index":1044,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["keydown.control.end",{"_index":4378,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.control.home",{"_index":4379,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.end",{"_index":1039,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.enter",{"_index":307,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["keydown.home",{"_index":1040,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.pagedown",{"_index":4380,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.pageup",{"_index":4381,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keyof",{"_index":3025,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["keys",{"_index":51,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["keys.reduce((hasone",{"_index":78,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["keys].map((item",{"_index":1593,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["keytype",{"_index":18,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"classes/NgxValidators.html":{}}}],["key}error",{"_index":3812,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["key}errormessage",{"_index":3814,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["key}loading",{"_index":3810,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["kind",{"_index":5150,"title":{},"body":{"index.html":{},"license.html":{}}}],["know",{"_index":1921,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["labbledby",{"_index":4346,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["label",{"_index":900,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["labelledby",{"_index":673,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{}}}],["labelledbyid",{"_index":3178,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["labels",{"_index":3169,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["labelwrapper",{"_index":1438,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{}}}],["lang",{"_index":2467,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["language",{"_index":817,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["languagerouteparam",{"_index":2353,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{}}}],["languages",{"_index":2354,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["languages?.length",{"_index":2544,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["largest",{"_index":1590,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["last",{"_index":965,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["lastly",{"_index":3518,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["later",{"_index":2805,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["latest",{"_index":2238,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["lax",{"_index":1607,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["layer",{"_index":2791,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["layout",{"_index":533,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{}}}],["layout'},{'name",{"_index":531,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["layout.component.html",{"_index":3034,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts",{"_index":3031,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:21",{"_index":3049,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:26",{"_index":3046,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:31",{"_index":3044,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:36",{"_index":3040,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:41",{"_index":3041,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:43",{"_index":3038,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.header?.left",{"_index":3119,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.header?.main",{"_index":3121,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.header?.right",{"_index":3123,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.navigation",{"_index":3125,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts",{"_index":3062,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:127",{"_index":3089,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:143",{"_index":3082,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:151",{"_index":3087,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:158",{"_index":3081,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:165",{"_index":3093,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:180",{"_index":3086,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:19",{"_index":3103,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:194",{"_index":3084,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:26",{"_index":3102,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:31",{"_index":3098,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:39",{"_index":3106,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:45",{"_index":3108,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:50",{"_index":3107,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:55",{"_index":3105,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:60",{"_index":3100,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:65",{"_index":3096,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:72",{"_index":3091,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.ts",{"_index":1555,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["layout.types.ts",{"_index":3017,"title":{},"body":{"interfaces/NgxMobileLayout.html":{}}}],["layout/mobile",{"_index":3030,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["layoutservice",{"_index":3037,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layoutsubject",{"_index":3070,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["lazy",{"_index":2628,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"index.html":{}}}],["lazyhtmlgeneration",{"_index":1632,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["leaks",{"_index":2256,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["leave",{"_index":4189,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["leaving",{"_index":4118,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["left",{"_index":1437,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["legend",{"_index":514,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["length",{"_index":218,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxToastService.html":{}}}],["level",{"_index":2694,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["levels",{"_index":2665,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["liability",{"_index":5164,"title":{},"body":{"index.html":{},"license.html":{}}}],["liable",{"_index":5161,"title":{},"body":{"index.html":{},"license.html":{}}}],["lib",{"_index":2148,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nRootService.html":{}}}],["libs/.../authentication.interceptor.ts",{"_index":5032,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../authentication.ts",{"_index":5029,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../core.ts",{"_index":5030,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../i18n",{"_index":5027,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/.../sort",{"_index":5025,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts",{"_index":1254,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:103",{"_index":1325,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:114",{"_index":1326,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:125",{"_index":1328,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:138",{"_index":1307,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:158",{"_index":1316,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:177",{"_index":1296,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:199",{"_index":1302,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:211",{"_index":1299,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:232",{"_index":1292,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:34",{"_index":1274,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:40",{"_index":1276,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:46",{"_index":1278,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:53",{"_index":1287,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:61",{"_index":1290,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:71",{"_index":1313,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:80",{"_index":1320,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:89",{"_index":1323,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:96",{"_index":1291,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/directives/has",{"_index":2176,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["libs/angular/authentication/src/lib/directives/is",{"_index":2848,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["libs/angular/authentication/src/lib/interceptors/authentication/authentication.interceptor.ts",{"_index":5035,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/angular/authentication/src/lib/pipes/has",{"_index":2232,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["libs/angular/authentication/src/lib/services/authenticated",{"_index":1133,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["libs/angular/authentication/src/lib/types/authenticated",{"_index":1227,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["libs/angular/authentication/src/lib/types/authentication",{"_index":1211,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["libs/angular/cookies/src/lib/abstracts/cookie",{"_index":1775,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["libs/angular/cookies/src/lib/directives/has",{"_index":2106,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts",{"_index":1639,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:166",{"_index":1674,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:184",{"_index":1663,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:194",{"_index":1678,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:213",{"_index":1668,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:220",{"_index":1691,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:229",{"_index":1670,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:238",{"_index":1672,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:256",{"_index":1684,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:277",{"_index":1681,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:31",{"_index":1717,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:36",{"_index":1711,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:41",{"_index":1703,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:46",{"_index":1722,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:53",{"_index":1696,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:58",{"_index":1723,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:63",{"_index":1714,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:69",{"_index":1706,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:75",{"_index":1698,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:81",{"_index":1720,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:86",{"_index":1694,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:99",{"_index":1686,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/types/cookie",{"_index":1600,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["libs/angular/cookies/src/lib/types/has",{"_index":2105,"title":{},"body":{"interfaces/NgxHasCookieConfiguration.html":{}}}],["libs/angular/cookies/src/lib/types/set",{"_index":1773,"title":{},"body":{"interfaces/NgxCookieValue.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts",{"_index":4565,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:106",{"_index":4583,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:115",{"_index":4586,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:136",{"_index":4581,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:15",{"_index":4597,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:20",{"_index":4599,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:25",{"_index":4608,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:30",{"_index":4603,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:35",{"_index":4595,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:40",{"_index":4605,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:45",{"_index":4601,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:50",{"_index":4593,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:56",{"_index":4590,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:61",{"_index":4580,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:89",{"_index":4589,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:99",{"_index":4582,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/forms/src/lib/abstracts/base",{"_index":93,"title":{},"body":{"classes/BaseFormAccessor.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts",{"_index":1985,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:13",{"_index":1988,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:17",{"_index":1987,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:9",{"_index":1989,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/form",{"_index":362,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["libs/angular/forms/src/lib/abstracts/save",{"_index":3566,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts",{"_index":1999,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:100",{"_index":2021,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:105",{"_index":2033,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:110",{"_index":2032,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:115",{"_index":2023,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:120",{"_index":2028,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:122",{"_index":2011,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:129",{"_index":2020,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:206",{"_index":2015,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:243",{"_index":2019,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:280",{"_index":2013,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:40",{"_index":2035,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:47",{"_index":2038,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:52",{"_index":2026,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:60",{"_index":2044,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:65",{"_index":2031,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:70",{"_index":2040,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:75",{"_index":2043,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:80",{"_index":2022,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:85",{"_index":2030,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:90",{"_index":2039,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:95",{"_index":2041,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/interfaces/errors.interface.ts",{"_index":1992,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}}}],["libs/angular/forms/src/lib/interfaces/form",{"_index":435,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{}}}],["libs/angular/forms/src/lib/utils/accessor",{"_index":227,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["libs/angular/forms/src/lib/validators/at",{"_index":6,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts",{"_index":4491,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:100",{"_index":4521,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:27",{"_index":4499,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:40",{"_index":4505,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:55",{"_index":4537,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:70",{"_index":4527,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:83",{"_index":4509,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/i18n/src/lib/abstracts/i18n",{"_index":2343,"title":{},"body":{"classes/NgxI18nAbstractService.html":{}}}],["libs/angular/i18n/src/lib/components/empty",{"_index":2372,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["libs/angular/i18n/src/lib/i18n.types.ts",{"_index":2347,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["libs/angular/i18n/src/lib/loader/multi",{"_index":2445,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts",{"_index":2620,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:16",{"_index":2637,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:20",{"_index":2635,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:22",{"_index":2634,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/services/i18n",{"_index":2378,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts",{"_index":2581,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:16",{"_index":2602,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:21",{"_index":2598,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:26",{"_index":2604,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:33",{"_index":2606,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:40",{"_index":2608,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:49",{"_index":2596,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:65",{"_index":2600,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:76",{"_index":2590,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:87",{"_index":2593,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/root",{"_index":2520,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts",{"_index":3145,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:22",{"_index":3159,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:23",{"_index":3158,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:28",{"_index":3152,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:35",{"_index":3150,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:40",{"_index":3149,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:45",{"_index":3151,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:50",{"_index":3154,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:56",{"_index":3157,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:58",{"_index":3153,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast",{"_index":3951,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast.component.ts",{"_index":3962,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:15",{"_index":3968,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:20",{"_index":3963,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:22",{"_index":3967,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:30",{"_index":3964,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts",{"_index":4069,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:17",{"_index":4086,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:22",{"_index":4081,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:33",{"_index":4082,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:47",{"_index":4079,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:55",{"_index":4076,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:60",{"_index":4078,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:65",{"_index":4080,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tour",{"_index":4316,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["libs/angular/inform/src/lib/components/toast",{"_index":3971,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts",{"_index":4100,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:114",{"_index":4119,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:23",{"_index":4126,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:24",{"_index":4121,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:29",{"_index":4116,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:36",{"_index":4115,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:43",{"_index":4117,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:50",{"_index":4113,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:57",{"_index":4114,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:67",{"_index":4124,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:72",{"_index":4110,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:77",{"_index":4122,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:83",{"_index":4112,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:88",{"_index":4111,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:93",{"_index":4120,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tour",{"_index":4266,"title":{},"body":{"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["libs/angular/inform/src/lib/mocks/tour",{"_index":482,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts",{"_index":3250,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:124",{"_index":3258,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:146",{"_index":3274,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:177",{"_index":3260,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:222",{"_index":3269,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:244",{"_index":3265,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:29",{"_index":3277,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:32",{"_index":3279,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:37",{"_index":3283,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:42",{"_index":3281,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:49",{"_index":3271,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts",{"_index":3992,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:155",{"_index":4009,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:186",{"_index":4005,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:213",{"_index":4006,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:222",{"_index":4003,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:243",{"_index":4007,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:37",{"_index":4013,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:44",{"_index":4021,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:49",{"_index":4023,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:54",{"_index":4022,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:59",{"_index":4019,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:64",{"_index":4032,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:84",{"_index":4018,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:95",{"_index":4012,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:96",{"_index":4001,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts",{"_index":4138,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:122",{"_index":4153,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:169",{"_index":4148,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:184",{"_index":4150,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:197",{"_index":4147,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:23",{"_index":4156,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:24",{"_index":4162,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:25",{"_index":4159,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:28",{"_index":4154,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:33",{"_index":4168,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:39",{"_index":4157,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:44",{"_index":4160,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:49",{"_index":4167,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:54",{"_index":4146,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/types/modal.types.ts",{"_index":3177,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["libs/angular/inform/src/lib/types/toast.types.ts",{"_index":3929,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["libs/angular/inform/src/lib/types/tooltip.types.ts",{"_index":4092,"title":{},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["libs/angular/inform/src/lib/types/tour.token.type.ts",{"_index":4351,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["libs/angular/inform/src/lib/types/tour.types.ts",{"_index":4225,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["libs/angular/layout/src/lib/abstracts/display",{"_index":1847,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["libs/angular/layout/src/lib/abstracts/drag",{"_index":740,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["libs/angular/layout/src/lib/abstracts/table/open",{"_index":3882,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["libs/angular/layout/src/lib/abstracts/table/select",{"_index":3890,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["libs/angular/layout/src/lib/abstracts/table/sort",{"_index":3926,"title":{},"body":{"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts",{"_index":944,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:111",{"_index":966,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:128",{"_index":969,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:33",{"_index":978,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:38",{"_index":976,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:43",{"_index":980,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48",{"_index":959,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:82",{"_index":971,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:92",{"_index":974,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/item/accordion",{"_index":1018,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts",{"_index":675,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:14",{"_index":723,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:19",{"_index":719,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:20",{"_index":721,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:21",{"_index":718,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:26",{"_index":716,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:31",{"_index":690,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:36",{"_index":703,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:42",{"_index":692,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:47",{"_index":701,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:52",{"_index":722,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:57",{"_index":704,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:82",{"_index":707,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:91",{"_index":713,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/currency",{"_index":1783,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["libs/angular/layout/src/lib/components/cell/date",{"_index":1823,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["libs/angular/layout/src/lib/components/cell/generic",{"_index":3827,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/configurable",{"_index":1540,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["libs/angular/layout/src/lib/components/image",{"_index":2672,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["libs/angular/layout/src/lib/components/mobile",{"_index":3029,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["libs/angular/layout/src/lib/components/table/ngx",{"_index":4758,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts",{"_index":1452,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:101",{"_index":1485,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:106",{"_index":1500,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:111",{"_index":1465,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:116",{"_index":1495,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:120",{"_index":1473,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:136",{"_index":1472,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:159",{"_index":1471,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:37",{"_index":1504,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:42",{"_index":1489,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:49",{"_index":1501,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:54",{"_index":1488,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:61",{"_index":1493,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:66",{"_index":1491,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:68",{"_index":1498,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:73",{"_index":1482,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:91",{"_index":1468,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:96",{"_index":1470,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/display",{"_index":1869,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["libs/angular/layout/src/lib/directives/drag",{"_index":892,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["libs/angular/layout/src/lib/directives/has",{"_index":2268,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["libs/angular/layout/src/lib/directives/media",{"_index":2874,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["libs/angular/layout/src/lib/directives/tree",{"_index":4357,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["libs/angular/layout/src/lib/enums/sort",{"_index":5028,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/angular/layout/src/lib/pipes/aria",{"_index":1121,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/get",{"_index":3866,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/has",{"_index":3876,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/item",{"_index":1571,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["libs/angular/layout/src/lib/pipes/show",{"_index":3896,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/sort",{"_index":3916,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["libs/angular/layout/src/lib/services/image",{"_index":2756,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["libs/angular/layout/src/lib/services/media",{"_index":2908,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["libs/angular/layout/src/lib/services/mobile",{"_index":3061,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["libs/angular/layout/src/lib/services/online",{"_index":3356,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["libs/angular/layout/src/lib/tokens/ngx",{"_index":3835,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["libs/angular/layout/src/lib/types/button.types.ts",{"_index":1434,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{}}}],["libs/angular/layout/src/lib/types/configurable",{"_index":1554,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["libs/angular/layout/src/lib/types/display",{"_index":1856,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["libs/angular/layout/src/lib/types/drag",{"_index":876,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["libs/angular/layout/src/lib/types/image",{"_index":2643,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["libs/angular/layout/src/lib/types/media",{"_index":2872,"title":{},"body":{"interfaces/NgxMediaQuery.html":{}}}],["libs/angular/layout/src/lib/types/mobile",{"_index":3016,"title":{},"body":{"interfaces/NgxMobileLayout.html":{}}}],["libs/angular/layout/src/lib/types/show",{"_index":3860,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["libs/angular/layout/src/lib/types/sort",{"_index":3912,"title":{},"body":{"interfaces/NgxTableSortEvent.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts",{"_index":3785,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:13",{"_index":3803,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:15",{"_index":3792,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:42",{"_index":3798,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:51",{"_index":3801,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:60",{"_index":3794,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:69",{"_index":3796,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:78",{"_index":3805,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/base",{"_index":111,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/entity",{"_index":158,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/store",{"_index":146,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.service.ts",{"_index":262,"title":{},"body":{"injectables/EffectsService.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.service.ts:17",{"_index":270,"title":{},"body":{"injectables/EffectsService.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.service.ts:9",{"_index":266,"title":{},"body":{"injectables/EffectsService.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts",{"_index":4720,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:11",{"_index":4722,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:12",{"_index":4724,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:14",{"_index":4729,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:24",{"_index":4732,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/store",{"_index":4653,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["libs/angular/store/src/lib/signal/abstracts/store.service.ts",{"_index":3611,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["libs/angular/store/src/lib/signal/abstracts/store.service.ts:13",{"_index":3613,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["libs/angular/store/src/lib/signal/abstracts/store.service.ts:18",{"_index":3616,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["libs/angular/store/src/lib/signal/types/signal",{"_index":3622,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["libs/angular/utils/src/lib/abstracts/query",{"_index":3368,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["libs/angular/utils/src/lib/directives/cypress",{"_index":1813,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["libs/angular/utils/src/lib/directives/focus",{"_index":295,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts",{"_index":178,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts:13",{"_index":188,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/has",{"_index":440,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts",{"_index":457,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts:8",{"_index":459,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/replace",{"_index":3481,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts",{"_index":4989,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts:17",{"_index":4993,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["libs/angular/utils/src/lib/services/broadcast",{"_index":1373,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["libs/angular/utils/src/lib/services/media",{"_index":2955,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["libs/angular/utils/src/lib/services/storage",{"_index":3667,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["libs/angular/utils/src/lib/types/replace",{"_index":3473,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["libs/angular/utils/src/lib/types/storage.types.ts",{"_index":3653,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["libs/javascript/core/src/lib/core.ts",{"_index":5034,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/javascript/types/authentication/src/lib/authentication.ts",{"_index":5033,"title":{},"body":{"miscellaneous/functions.html":{}}}],["license",{"_index":5115,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["lifecycle",{"_index":4955,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["limit",{"_index":2100,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["limitation",{"_index":5133,"title":{},"body":{"index.html":{},"license.html":{}}}],["limited",{"_index":4029,"title":{},"body":{"injectables/NgxToastService.html":{},"index.html":{},"license.html":{}}}],["line",{"_index":3164,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["link",{"_index":1486,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["link.\"the",{"_index":3528,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["linkcomponent",{"_index":3505,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["linkedsignal",{"_index":4764,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["links",{"_index":3499,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["list",{"_index":408,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["listen",{"_index":1060,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["listened",{"_index":2970,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["listener",{"_index":1736,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["listeners",{"_index":1769,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["listens",{"_index":4047,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["listentoonlinestatus",{"_index":1859,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["listing",{"_index":3708,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["lists",{"_index":3244,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["literal",{"_index":144,"title":{},"body":{"interfaces/BaseStoreActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"pipes/NgxAriaSortPipe.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["live",{"_index":800,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"dependencies.html":{}}}],["liveannouncer",{"_index":797,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["liveregionservice",{"_index":787,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["load",{"_index":1710,"title":{},"body":{"injectables/NgxCookieService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/TableCellTemplate.html":{}}}],["loaded",{"_index":2381,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loader",{"_index":2371,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["loading",{"_index":114,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["loading'},{'name",{"_index":559,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["loading.service.ts",{"_index":2380,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:15",{"_index":2408,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:21",{"_index":2425,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:23",{"_index":2412,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:25",{"_index":2424,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:28",{"_index":2423,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:40",{"_index":2410,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:48",{"_index":2398,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:57",{"_index":2394,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:67",{"_index":2400,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:77",{"_index":2403,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:91",{"_index":2406,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.types",{"_index":2429,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.types.ts",{"_index":4999,"title":{},"body":{"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["loading/i18n",{"_index":2379,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["loadingcomponent",{"_index":1460,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["loadingdata",{"_index":1461,"title":{},"body":{"directives/NgxButtonDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["loadingtemplate",{"_index":4832,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["loadtranslations",{"_index":2391,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loadtranslations(paths",{"_index":2402,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["local",{"_index":2536,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["locale",{"_index":1621,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["localstorage",{"_index":2568,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{}}}],["localstorage.getitem('ngx",{"_index":2572,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["localstorage.setitem('ngx",{"_index":2570,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["localstorage/sessionstorage",{"_index":3716,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["localstoragerecord",{"_index":3671,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["location",{"_index":1246,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["lodash",{"_index":1820,"title":{},"body":{"directives/NgxCypressTagDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxTableGetPipe.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{},"dependencies.html":{}}}],["log",{"_index":2055,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["logical",{"_index":3213,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["logs",{"_index":3729,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["longer",{"_index":380,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["longestrow",{"_index":1591,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["loop",{"_index":2936,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["lower",{"_index":3508,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["lowercase",{"_index":3538,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["lowercased",{"_index":3510,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["made",{"_index":1164,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["main",{"_index":3023,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"index.html":{}}}],["maintained",{"_index":5045,"title":{},"body":{"index.html":{}}}],["make",{"_index":781,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["makes",{"_index":4264,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["managescripttags",{"_index":1629,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["map",{"_index":822,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{}}}],["map(([action",{"_index":3307,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["map(([toasts",{"_index":4026,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["map((action",{"_index":3314,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["map((hascookies",{"_index":2165,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["map((key",{"_index":2102,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["map((layout",{"_index":3141,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["map((query",{"_index":2953,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["map((response",{"_index":1201,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["map((result",{"_index":2421,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["map((status",{"_index":1284,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["map((toasts",{"_index":4049,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["map((translations",{"_index":2493,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["maps",{"_index":3012,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["mark",{"_index":918,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["markallasdirty",{"_index":371,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markallasdirty(form",{"_index":388,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markallastouched",{"_index":372,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markallastouched(form",{"_index":396,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markasactive",{"_index":751,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["markasactive(id",{"_index":916,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["markasdirty",{"_index":381,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markasinitial",{"_index":3094,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["markasrendered",{"_index":3998,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["markasrendered(toast",{"_index":4002,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["markastouched",{"_index":394,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["marked",{"_index":4343,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["marker",{"_index":2651,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["marker'},{'name",{"_index":545,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["marker.addeventlistener('select",{"_index":2842,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.addeventlistener('statechange",{"_index":2836,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.all_marker_types",{"_index":2819,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.availablemarkertypes",{"_index":2799,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.close",{"_index":2794,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.component.scss",{"_index":2677,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts",{"_index":2674,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:104",{"_index":2703,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:109",{"_index":2701,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:111",{"_index":2706,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:116",{"_index":2708,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:137",{"_index":2709,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:149",{"_index":2704,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:47",{"_index":2717,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:48",{"_index":2719,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:49",{"_index":2712,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:54",{"_index":2710,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:59",{"_index":2718,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:64",{"_index":2714,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:69",{"_index":2695,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:74",{"_index":2696,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:79",{"_index":2700,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:84",{"_index":2692,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:89",{"_index":2693,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:94",{"_index":2720,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:99",{"_index":2698,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.removeeventlistener('select",{"_index":2793,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.removeeventlistener('statechange",{"_index":2803,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.restorestate(configuration.defaultstate",{"_index":2835,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts",{"_index":2757,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:117",{"_index":2767,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:188",{"_index":2777,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:207",{"_index":2773,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:221",{"_index":2780,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:26",{"_index":2782,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:31",{"_index":2781,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:40",{"_index":2770,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:66",{"_index":2779,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.show",{"_index":2832,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.show(configuration.defaultstate",{"_index":2801,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.targetroot",{"_index":2792,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.types.ts",{"_index":2644,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["marker.uistylesettings.clearbuttonvisible",{"_index":2816,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.notesareastyleclassname",{"_index":2821,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolbaractivebuttonstylecolorsclassname",{"_index":2829,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolbarbuttonstylecolorsclassname",{"_index":2828,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolbarstylecolorsclassname",{"_index":2824,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolboxactivebuttonstylecolorsclassname",{"_index":2831,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolboxbuttonstylecolorsclassname",{"_index":2830,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolboxstylecolorsclassname",{"_index":2826,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.zoombuttonvisible",{"_index":2807,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.zoomoutbuttonvisible",{"_index":2809,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.zoomlevel",{"_index":2814,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.zoomsteps",{"_index":2810,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker/image",{"_index":2673,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["markerarea",{"_index":2776,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["markerarea(image",{"_index":2802,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["markerareastate",{"_index":2649,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["markerbase",{"_index":2646,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["markerclicked",{"_index":2684,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["markerdestroyedsubject",{"_index":2685,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["markerjs",{"_index":2648,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"dependencies.html":{}}}],["markerjs2",{"_index":2650,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"dependencies.html":{}}}],["markers",{"_index":2699,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["markertypes",{"_index":2664,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["markerview",{"_index":2772,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["markerview(image",{"_index":2790,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marks",{"_index":385,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["marktranslationsloadedasfailed",{"_index":2392,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["match",{"_index":471,"title":{},"body":{"pipes/IbanPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/TableCellTemplate.html":{}}}],["matched",{"_index":82,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["matchedquery",{"_index":2993,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["matchedquery.addeventlistener('change",{"_index":2998,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["matches",{"_index":2878,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["matchesquery",{"_index":2907,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{}}}],["matchesquery(id",{"_index":2916,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["matchesquery(this.ngxmediaquery",{"_index":2904,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["matchfunction",{"_index":4536,"title":{},"body":{"classes/NgxValidators.html":{}}}],["matching",{"_index":89,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["matchingset",{"_index":2950,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["matchingset.has(query",{"_index":2954,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["math.max",{"_index":1592,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["max",{"_index":1587,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"classes/NgxValidators.html":{}}}],["maxamount",{"_index":3945,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["maxdate",{"_index":4564,"title":{},"body":{"classes/NgxValidators.html":{}}}],["maximum",{"_index":4530,"title":{},"body":{"classes/NgxValidators.html":{}}}],["maxtime",{"_index":3946,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["meant",{"_index":895,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["mechanic",{"_index":4850,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["media",{"_index":2910,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["mediaqueries",{"_index":2913,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylist",{"_index":2933,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["mediaquerylist.addeventlistener('change",{"_index":2945,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylist.matches",{"_index":2940,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylist.removeeventlistener('change",{"_index":2934,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylistenermap",{"_index":2962,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["mediaquerylistevent",{"_index":2943,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["mediaqueryservice",{"_index":2879,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["memberof",{"_index":352,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["memoizedselector",{"_index":121,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["memory",{"_index":2255,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["merchantability",{"_index":5154,"title":{},"body":{"index.html":{},"license.html":{}}}],["merge",{"_index":1904,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"index.html":{},"license.html":{}}}],["message",{"_index":813,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"index.html":{}}}],["messageerror",{"_index":1404,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["messagerecord",{"_index":791,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["messages",{"_index":794,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxFormsErrorAbstractComponent.html":{}}}],["messagetype",{"_index":1398,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["message{any",{"_index":1427,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["met",{"_index":1250,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxModalService.html":{}}}],["metadata",{"_index":179,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["method",{"_index":350,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxToastService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["methods",{"_index":183,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["methodsdictionary",{"_index":3626,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["milestone",{"_index":5103,"title":{},"body":{"index.html":{}}}],["min",{"_index":4525,"title":{},"body":{"classes/NgxValidators.html":{}}}],["mind",{"_index":3506,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["mindate",{"_index":4563,"title":{},"body":{"classes/NgxValidators.html":{}}}],["minimum",{"_index":4319,"title":{},"body":{"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{}}}],["minmax(0",{"_index":1597,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["miscellaneous",{"_index":5023,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["missing",{"_index":3442,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["mit",{"_index":5116,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mm",{"_index":4517,"title":{},"body":{"classes/NgxValidators.html":{}}}],["mobile",{"_index":547,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mock",{"_index":484,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mockchannel",{"_index":275,"title":{},"body":{"injectables/EffectsService.html":{}}}],["mocked",{"_index":2785,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["mockprivatechannel",{"_index":276,"title":{},"body":{"injectables/EffectsService.html":{}}}],["mocktourholdercomponent",{"_index":478,"title":{"components/MockTourHolderComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mocktourstepcomponent",{"_index":520,"title":{"components/MockTourStepComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mockvideos",{"_index":277,"title":{},"body":{"injectables/EffectsService.html":{}}}],["modal",{"_index":1692,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{}}}],["modals",{"_index":3238,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["modalvisible",{"_index":1650,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["modalvisiblesubject",{"_index":1651,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["mode",{"_index":1625,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["models",{"_index":3628,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["modifies",{"_index":1700,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["modify",{"_index":5135,"title":{},"body":{"index.html":{},"license.html":{}}}],["modular",{"_index":5068,"title":{},"body":{"index.html":{}}}],["module",{"_index":2624,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["modules",{"_index":2627,"title":{"modules.html":{}},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"modules.html":{}}}],["moment",{"_index":2622,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["mono",{"_index":5043,"title":{},"body":{"index.html":{}}}],["more",{"_index":41,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["mouse",{"_index":327,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["mouseenter",{"_index":4074,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["mouseleave",{"_index":4075,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["move",{"_index":968,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["moved",{"_index":850,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["movedown",{"_index":4365,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movefocus",{"_index":955,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["movefocus(id",{"_index":961,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["moveleft",{"_index":4366,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moveleft(event",{"_index":4400,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moveright",{"_index":4367,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moves",{"_index":967,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["moveto",{"_index":4454,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["moveto(direction",{"_index":4466,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["movetobottomcontrolend",{"_index":4368,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetobottomend",{"_index":4369,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetocell",{"_index":4370,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetocell(cell",{"_index":4404,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetofirstcellofgrid",{"_index":4371,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetofirstcolumnofgrid",{"_index":4372,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetofirstofrow",{"_index":4373,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetolastcellofgrid",{"_index":4374,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moveup",{"_index":4375,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moving",{"_index":1562,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["mozilla",{"_index":3179,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ms",{"_index":4239,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["multi",{"_index":257,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/TableCellTemplate.html":{}}}],["multiple",{"_index":2448,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["multiselect",{"_index":4970,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["multitranslationloader",{"_index":2495,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["mycomponent",{"_index":451,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["name",{"_index":180,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["named",{"_index":5090,"title":{},"body":{"index.html":{}}}],["names",{"_index":2820,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"interfaces/TableCellTemplate.html":{}}}],["native",{"_index":3166,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["nature",{"_index":3537,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["navigate",{"_index":3450,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["navigating",{"_index":4424,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["navigation",{"_index":3021,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["navigationextras",{"_index":4227,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["near",{"_index":4201,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["necessary",{"_index":249,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTourStepComponent.html":{}}}],["need",{"_index":74,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["needed",{"_index":55,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["needs",{"_index":1224,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/functions.html":{}}}],["negative",{"_index":4261,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["nested",{"_index":1833,"title":{},"body":{"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["never",{"_index":105,"title":{},"body":{"classes/BaseFormAccessor.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["new",{"_index":61,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["newcontainer",{"_index":891,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["newindex",{"_index":889,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["newlanguage",{"_index":2565,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["newly",{"_index":2395,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["newsortdirection",{"_index":730,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["newvalue",{"_index":3662,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["next",{"_index":1013,"title":{},"body":{"components/NgxAccordionComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/functions.html":{}}}],["next.active",{"_index":4178,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["next.id",{"_index":4182,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["next.path",{"_index":2515,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["next.source",{"_index":4179,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["next.translations",{"_index":2516,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["nextstate",{"_index":3579,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["ng_validators",{"_index":243,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["ng_value_accessor",{"_index":244,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngaftercontentchecked",{"_index":4956,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngafterviewinit",{"_index":634,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["ngclass",{"_index":4762,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngcomponentoutlet",{"_index":3032,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngif",{"_index":2051,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["ngonchanges",{"_index":2690,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["ngonchanges(changes",{"_index":2707,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["ngondestroy",{"_index":373,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngoninit",{"_index":635,"title":{},"body":{"components/MockTourStepComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngrx/effects",{"_index":4733,"title":{},"body":{"injectables/StoreEffects.html":{},"dependencies.html":{}}}],["ngrx/entity",{"_index":154,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"dependencies.html":{}}}],["ngrx/signals",{"_index":3625,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"dependencies.html":{}}}],["ngrx/store",{"_index":124,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"dependencies.html":{}}}],["ngtemplateoutlet",{"_index":1022,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngx",{"_index":524,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"dependencies.html":{}}}],["ngxabstracttablecelldirective",{"_index":567,"title":{"directives/NgxAbstractTableCellDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxabstracttablecelldirective:14",{"_index":1810,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:21",{"_index":3832,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:26",{"_index":3833,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:27",{"_index":3830,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:31",{"_index":1786,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:32",{"_index":1808,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:33",{"_index":3831,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:36",{"_index":1789,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:38",{"_index":1805,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:42",{"_index":1787,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:44",{"_index":1797,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:47",{"_index":1788,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:49",{"_index":1793,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:52",{"_index":1809,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:57",{"_index":1790,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:59",{"_index":1844,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:65",{"_index":1840,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:72",{"_index":1836,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:77",{"_index":1835,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:82",{"_index":1791,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:91",{"_index":1792,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxaccessibleabstractdraganddropitemdirective",{"_index":569,"title":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropabstractservice",{"_index":778,"title":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["ngxaccessibledraganddropbasemessage",{"_index":875,"title":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{}},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddropcontainer",{"_index":898,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["ngxaccessibledraganddropcontainer]'},{'name",{"_index":571,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropcontainerdirective",{"_index":570,"title":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropcontainerindex",{"_index":902,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["ngxaccessibledraganddropcontainerlabel",{"_index":905,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["ngxaccessibledraganddropfromtomessage",{"_index":878,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddrophost",{"_index":909,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["ngxaccessibledraganddrophost]'},{'name",{"_index":573,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddrophostdescription",{"_index":926,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["ngxaccessibledraganddrophostdirective",{"_index":572,"title":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropitem]'},{'name",{"_index":575,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropitemdirective",{"_index":574,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropmessage",{"_index":811,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddropmessagerecord",{"_index":828,"title":{"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{}},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddropmessagerecords",{"_index":827,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["ngxaccessibledraganddropmoveevent",{"_index":887,"title":{"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddropmovetype",{"_index":886,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccordioncomponent",{"_index":523,"title":{"components/NgxAccordionComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccordionitemcomponent",{"_index":526,"title":{"components/NgxAccordionItemComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccordionopenbehavior",{"_index":983,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["ngxariasort",{"_index":1124,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["ngxariasortpipe",{"_index":1120,"title":{"pipes/NgxAriaSortPipe.html":{}},"body":{"pipes/NgxAriaSortPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxauthenticatedhttpclient",{"_index":1132,"title":{"injectables/NgxAuthenticatedHttpClient.html":{}},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["ngxauthenticatedhttpclientconfiguration",{"_index":1185,"title":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{}},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["ngxauthenticatedhttpinterceptor",{"_index":5031,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ngxauthenticatedhttpinterceptor(request",{"_index":5036,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ngxauthenticatedroute",{"_index":1226,"title":{"interfaces/NgxAuthenticatedRoute.html":{}},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxauthenticatedroutes",{"_index":1253,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxauthenticationabstractservice",{"_index":1220,"title":{"classes/NgxAuthenticationAbstractService.html":{}},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxauthenticationconfiguration",{"_index":1223,"title":{"interfaces/NgxAuthenticationConfiguration.html":{}},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["ngxauthenticationresponsefeature",{"_index":1295,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["ngxauthenticationservicetoken",{"_index":2198,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxauthenticationstatus",{"_index":1333,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["ngxauthenticationurlhandlertoken",{"_index":1183,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["ngxbroadcastchannelservice",{"_index":1372,"title":{"injectables/NgxBroadcastChannelService.html":{}},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["ngxbutton",{"_index":1455,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["ngxbutton]'},{'name",{"_index":577,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxbuttonconfiguration",{"_index":1433,"title":{"interfaces/NgxButtonConfiguration.html":{}},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["ngxbuttonconfigurationtoken",{"_index":1505,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["ngxbuttondirective",{"_index":576,"title":{"directives/NgxButtonDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxbuttoniconposition",{"_index":1440,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["ngxbuttonpriority",{"_index":1442,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["ngxbuttontype",{"_index":1447,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["ngxconfigurablelayoutcomponent",{"_index":529,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxconfigurablelayoutgrid",{"_index":1560,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["ngxconfigurablelayoutitemcomponent",{"_index":532,"title":{"components/NgxConfigurableLayoutItemComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxconfigurablelayoutitemdropevent",{"_index":1553,"title":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{}},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["ngxconfigurablelayoutitementity",{"_index":1561,"title":{"interfaces/NgxConfigurableLayoutItemEntity.html":{}},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["ngxconfigurablelayoutitemsize",{"_index":1574,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["ngxconfigurablelayoutitemsizeoption",{"_index":1563,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["ngxconfigurablelayoutitemsizepipe",{"_index":1570,"title":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["ngxconfigurablelayouttype",{"_index":1567,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["ngxcookie",{"_index":1599,"title":{"interfaces/NgxCookie.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["ngxcookiecategories",{"_index":1615,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookiechangedevent",{"_index":1635,"title":{"interfaces/NgxCookieChangedEvent.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookieconfiguration",{"_index":1624,"title":{"interfaces/NgxCookieConfiguration.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookieevent",{"_index":1634,"title":{"interfaces/NgxCookieEvent.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookielanguageconfiguration",{"_index":1616,"title":{"interfaces/NgxCookieLanguageConfiguration.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookies",{"_index":1735,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["ngxcookieservice",{"_index":1638,"title":{"injectables/NgxCookieService.html":{}},"body":{"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{}}}],["ngxcookiesfallbackcomponent",{"_index":578,"title":{"directives/NgxCookiesFallBackComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasCookieDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxcookiesfallbackcomponenttoken",{"_index":2133,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["ngxcookievalue",{"_index":1683,"title":{"interfaces/NgxCookieValue.html":{}},"body":{"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{}}}],["ngxcurrencytablecellcomponent",{"_index":534,"title":{"components/NgxCurrencyTableCellComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxcypresstagdirective",{"_index":579,"title":{"directives/NgxCypressTagDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdatetablecellcomponent",{"_index":538,"title":{"components/NgxDateTableCellComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentarialive",{"_index":1863,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["ngxdisplaycontentcomponent",{"_index":581,"title":{"directives/NgxDisplayContentComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentcomponent:13",{"_index":4983,"title":{},"body":{"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["ngxdisplaycontentcomponent:8",{"_index":4984,"title":{},"body":{"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["ngxdisplaycontentcomponentconfiguration",{"_index":1860,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["ngxdisplaycontentconditions",{"_index":1867,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentconfiguration",{"_index":1855,"title":{"interfaces/NgxDisplayContentConfiguration.html":{}},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["ngxdisplaycontentconfigurationtoken",{"_index":1908,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["ngxdisplaycontentdirective",{"_index":582,"title":{"directives/NgxDisplayContentDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentoverrideconfiguration",{"_index":1868,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["ngxdisplaycontentrecord",{"_index":1866,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["ngxdisplaycontentstatus",{"_index":1861,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["ngxforms",{"_index":429,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["ngxformscontrolvalueaccessor",{"_index":584,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserror",{"_index":2027,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrorabstractcomponent",{"_index":585,"title":{"directives/NgxFormsErrorAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorconfigurationoptions",{"_index":1991,"title":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrordirective",{"_index":2058,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrors",{"_index":2000,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrors]'},{'name",{"_index":587,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorsconfigurationtoken",{"_index":2025,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrorsdirective",{"_index":586,"title":{"directives/NgxFormsErrorsDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorshowsettings",{"_index":1997,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}}}],["ngxformserrorshowwhensettings",{"_index":1998,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}}}],["ngxhascookieconfiguration",{"_index":1782,"title":{"interfaces/NgxHasCookieConfiguration.html":{}},"body":{"directives/NgxCookiesFallBackComponent.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{}}}],["ngxhascookiedirective",{"_index":588,"title":{"directives/NgxHasCookieDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasCookieDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfeature",{"_index":2183,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["ngxhasfeature]'},{'name",{"_index":591,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfeaturedirective",{"_index":590,"title":{"directives/NgxHasFeatureDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFeatureDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfeatureelse",{"_index":2186,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["ngxhasfeatureguard",{"_index":1235,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxhasfeaturepipe",{"_index":2231,"title":{"pipes/NgxHasFeaturePipe.html":{}},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["ngxhasfeatureshouldhaveallfeatures",{"_index":2187,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["ngxhasfeatureshouldhavefeature",{"_index":2188,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["ngxhasfocusdirective",{"_index":592,"title":{"directives/NgxHasFocusDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFocusDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfocusdirective:13",{"_index":4418,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:18",{"_index":4395,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:25",{"_index":4394,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:34",{"_index":4412,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:43",{"_index":4413,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective",{"_index":593,"title":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfocusdraganddropabstractdirective:15",{"_index":776,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:20",{"_index":760,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:31",{"_index":758,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:39",{"_index":775,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:41",{"_index":765,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:45",{"_index":768,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:47",{"_index":769,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:54",{"_index":767,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhaspermission",{"_index":2294,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["ngxhaspermission]'},{'name",{"_index":595,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhaspermissiondirective",{"_index":594,"title":{"directives/NgxHasPermissionDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhaspermissionelse",{"_index":2295,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["ngxhaspermissionguard",{"_index":1240,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxhaspermissionpipe",{"_index":2327,"title":{"pipes/NgxHasPermissionPipe.html":{}},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["ngxhaspermissionshouldhaveallpermissions",{"_index":2296,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["ngxhaspermissionshouldhavepermission",{"_index":2297,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["ngxi18n",{"_index":2577,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["ngxi18nabstractservice",{"_index":2342,"title":{"classes/NgxI18nAbstractService.html":{}},"body":{"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nService.html":{}}}],["ngxi18nconfiguration",{"_index":2346,"title":{"interfaces/NgxI18nConfiguration.html":{}},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["ngxi18nconfigurationtoken",{"_index":2474,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["ngxi18nemptycomponent",{"_index":540,"title":{"components/NgxI18nEmptyComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxi18nloadingservice",{"_index":2377,"title":{"injectables/NgxI18nLoadingService.html":{}},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ngxi18nmodule",{"_index":2457,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["ngxi18nmultitranslationhttploader",{"_index":2444,"title":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["ngxi18nrootservice",{"_index":2519,"title":{"injectables/NgxI18nRootService.html":{}},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["ngxi18nservice",{"_index":2580,"title":{"injectables/NgxI18nService.html":{}},"body":{"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ngxi18nsetlanguageguard",{"_index":2376,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["ngxi18ntranslationloaderresolver",{"_index":2619,"title":{"injectables/NgxI18nTranslationLoaderResolver.html":{}},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ngxi18ntranslationpathstoken",{"_index":2475,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["ngxi8nrootservice",{"_index":2599,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["ngximagemarker",{"_index":2671,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkerbase",{"_index":2642,"title":{"interfaces/NgxImageMarkerBase.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkercomponent",{"_index":543,"title":{"components/NgxImageMarkerComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngximagemarkerconfiguration",{"_index":2656,"title":{"interfaces/NgxImageMarkerConfiguration.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkeredit",{"_index":2670,"title":{"interfaces/NgxImageMarkerEdit.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkeritem",{"_index":2653,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkerservice",{"_index":2715,"title":{"injectables/NgxImageMarkerService.html":{}},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["ngximagemarkerstate",{"_index":2652,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkertypes",{"_index":2655,"title":{"interfaces/NgxImageMarkerTypes.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkerview",{"_index":2668,"title":{"interfaces/NgxImageMarkerView.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngxinform",{"_index":3290,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["ngxisauthenticated",{"_index":2851,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxisauthenticated]'},{'name",{"_index":597,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxisauthenticateddirective",{"_index":596,"title":{"directives/NgxIsAuthenticatedDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxisauthenticatedelse",{"_index":2852,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxisauthenticatedguard",{"_index":1244,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxlayout",{"_index":1976,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["ngxmediaqueriestoken",{"_index":2929,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["ngxmediaquery",{"_index":2871,"title":{"interfaces/NgxMediaQuery.html":{}},"body":{"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{}}}],["ngxmediaquery]'},{'name",{"_index":599,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxmediaquerydirective",{"_index":598,"title":{"directives/NgxMediaQueryDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxmediaqueryelse",{"_index":2880,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["ngxmediaqueryservice",{"_index":2892,"title":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}},"body":{"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["ngxmediaqueryshouldmatch",{"_index":2881,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["ngxmobilelayout",{"_index":3015,"title":{"interfaces/NgxMobileLayout.html":{}},"body":{"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["ngxmobilelayout['header",{"_index":3028,"title":{},"body":{"interfaces/NgxMobileLayout.html":{}}}],["ngxmobilelayoutcomponent",{"_index":546,"title":{"components/NgxMobileLayoutComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxmobilelayoutconfigurationtoken",{"_index":3097,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["ngxmobilelayoutelements",{"_index":3024,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["ngxmobilelayoutservice",{"_index":3018,"title":{"injectables/NgxMobileLayoutService.html":{}},"body":{"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["ngxmodalabstractcomponent",{"_index":600,"title":{"directives/NgxModalAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxmodalabstractcomponent`](../abstracts/modal/modal.abstract.component.ts",{"_index":3227,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalactiontype",{"_index":3160,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalarialabelbaseoptions",{"_index":3176,"title":{"interfaces/NgxModalAriaLabelBaseOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalarialabelledoptions",{"_index":3196,"title":{"interfaces/NgxModalAriaLabelledOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalarialabeloptions",{"_index":3195,"title":{"interfaces/NgxModalAriaLabelOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalbaseconfiguration",{"_index":3237,"title":{"interfaces/NgxModalBaseConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalbaseoptions",{"_index":3241,"title":{"interfaces/NgxModalBaseOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalcdkmodalconfiguration",{"_index":3207,"title":{"interfaces/NgxModalCDKModalConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalclose",{"_index":3302,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["ngxmodalcomponentconfiguration",{"_index":3225,"title":{"interfaces/NgxModalComponentConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalcomponentoptions",{"_index":3248,"title":{"interfaces/NgxModalComponentOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalconfiguration",{"_index":3240,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalconfigurationtoken",{"_index":3285,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["ngxmodalglobalcdkconfiguration",{"_index":3199,"title":{"interfaces/NgxModalGlobalCDKConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodallabelariaoptions",{"_index":3197,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodaloptions",{"_index":3249,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalrole",{"_index":3187,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalservice",{"_index":3146,"title":{"injectables/NgxModalService.html":{}},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{}}}],["ngxmodaltypeoptions",{"_index":3247,"title":{"interfaces/NgxModalTypeOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxngxwindowservice",{"_index":4610,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["ngxonlineservice",{"_index":1925,"title":{"injectables/NgxOnlineService.html":{}},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{}}}],["ngxopenrowstatecolumn",{"_index":4816,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngxqueryparamformsynccomponent",{"_index":601,"title":{"directives/NgxQueryParamFormSyncComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxreplaceelements",{"_index":3485,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsconfiguration",{"_index":3478,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsconfigurationelement",{"_index":3472,"title":{"interfaces/NgxReplaceElementsConfigurationElement.html":{}},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["ngxreplaceelementsconfigurationtoken",{"_index":3541,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsitem",{"_index":3479,"title":{"interfaces/NgxReplaceElementsItem.html":{}},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementspipe",{"_index":3480,"title":{"pipes/NgxReplaceElementsPipe.html":{}},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsselector",{"_index":3476,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["ngxsaveonexitabstractservice",{"_index":3565,"title":{"classes/NgxSaveOnExitAbstractService.html":{}},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["ngxsaveonexitcomponent",{"_index":602,"title":{"directives/NgxSaveOnExitComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxsignalstore",{"_index":3612,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreconfiguration",{"_index":3634,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoredispatchactions",{"_index":3648,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstorerecord",{"_index":3649,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreselectfunction",{"_index":3630,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreservice",{"_index":3610,"title":{"injectables/NgxSignalStoreService.html":{}},"body":{"injectables/NgxSignalStoreService.html":{}}}],["ngxsignalstoreslice",{"_index":3621,"title":{"interfaces/NgxSignalStoreSlice.html":{}},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicearraygenerator",{"_index":3631,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicearraymethods",{"_index":3641,"title":{"interfaces/NgxSignalStoreSliceArrayMethods.html":{}},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicebasemethods",{"_index":3642,"title":{"interfaces/NgxSignalStoreSliceBaseMethods.html":{}},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoresliceconfiguration",{"_index":3636,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicedatatype",{"_index":3639,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicegenerator",{"_index":3632,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicemethods",{"_index":3640,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstorestate",{"_index":3619,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreviewstate",{"_index":3618,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxstorage",{"_index":3652,"title":{"interfaces/NgxStorage.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstoragebaseevent",{"_index":3659,"title":{"interfaces/NgxStorageBaseEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstorageclearevent",{"_index":3663,"title":{"interfaces/NgxStorageClearEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstorageevent",{"_index":3665,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstoragerecord",{"_index":3657,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstorageremoveevent",{"_index":3664,"title":{"interfaces/NgxStorageRemoveEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstorageservice",{"_index":3666,"title":{"injectables/NgxStorageService.html":{}},"body":{"injectables/NgxStorageService.html":{}}}],["ngxstoragesetevent",{"_index":3660,"title":{"interfaces/NgxStorageSetEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstoragetype",{"_index":3658,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstore",{"_index":3766,"title":{"interfaces/NgxStore.html":{}},"body":{"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ngxstoreactions",{"_index":3769,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ngxstoreselectors",{"_index":3770,"title":{},"body":{"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ngxstoreservice",{"_index":3429,"title":{"injectables/NgxStoreService.html":{}},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:13",{"_index":4706,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:15",{"_index":4707,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:42",{"_index":4684,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:51",{"_index":4685,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:60",{"_index":4682,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:69",{"_index":4683,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxtablecelldirective",{"_index":603,"title":{"directives/NgxTableCellDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableclass",{"_index":3841,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["ngxtablecomponent",{"_index":548,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableconfiguration",{"_index":3834,"title":{"interfaces/NgxTableConfiguration.html":{}},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtableconfigurationtoken",{"_index":3858,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablecypressdatatags",{"_index":727,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablecypressdatatagsbase",{"_index":3859,"title":{"interfaces/NgxTableCypressDataTagsBase.html":{}},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["ngxtablegetpipe",{"_index":1825,"title":{"pipes/NgxTableGetPipe.html":{}},"body":{"components/NgxDateTableCellComponent.html":{},"pipes/NgxTableGetPipe.html":{}}}],["ngxtablehasobservers",{"_index":3877,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["ngxtablehasobserverspipe",{"_index":3875,"title":{"pipes/NgxTableHasObserversPipe.html":{}},"body":{"pipes/NgxTableHasObserversPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtableopenrowstatetemplateabstractcomponent",{"_index":604,"title":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableselectcolumn",{"_index":4811,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngxtableselecttemplateabstractcomponent",{"_index":605,"title":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableshowheader",{"_index":3899,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["ngxtableshowheaderpipe",{"_index":3895,"title":{"pipes/NgxTableShowHeaderPipe.html":{}},"body":{"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtableshowheaderrequirements",{"_index":3864,"title":{"interfaces/NgxTableShowHeaderRequirements.html":{}},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["ngxtablesortdirection",{"_index":712,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"miscellaneous/enumerations.html":{}}}],["ngxtablesortdirection.ascending",{"_index":731,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxTableSortIconPipe.html":{}}}],["ngxtablesortdirection.descending",{"_index":736,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["ngxtablesortevent",{"_index":728,"title":{"interfaces/NgxTableSortEvent.html":{}},"body":{"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablesorticon",{"_index":3919,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["ngxtablesorticonpipe",{"_index":3915,"title":{"pipes/NgxTableSortIconPipe.html":{}},"body":{"pipes/NgxTableSortIconPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablesorttemplateabstractcomponent",{"_index":606,"title":{"directives/NgxTableSortTemplateAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtoast",{"_index":3928,"title":{"interfaces/NgxToast.html":{}},"body":{"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ngxtoastbundlercomponent",{"_index":607,"title":{"directives/NgxToastBundlerComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtoastcomponent",{"_index":608,"title":{"directives/NgxToastComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtoastconfiguration",{"_index":3932,"title":{"interfaces/NgxToastConfiguration.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastconfigurationtoken",{"_index":3981,"title":{},"body":{"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{}}}],["ngxtoastcontainercomponent",{"_index":550,"title":{"components/NgxToastContainerComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtoastcreator",{"_index":3947,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ngxtoastdefaultconfiguration",{"_index":3944,"title":{"interfaces/NgxToastDefaultConfiguration.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ngxtoastevent",{"_index":3950,"title":{"interfaces/NgxToastEvent.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ngxtoastmaxamountbaseconfiguration",{"_index":3936,"title":{"interfaces/NgxToastMaxAmountBaseConfiguration.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastmaxamountbundleconfiguration",{"_index":3940,"title":{"interfaces/NgxToastMaxAmountBundleConfiguration.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastmaxamountconfiguration",{"_index":3942,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastmaxamountotherconfiguration",{"_index":3941,"title":{"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastposition",{"_index":3934,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastservice",{"_index":3930,"title":{"injectables/NgxToastService.html":{}},"body":{"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ngxtooltip",{"_index":4101,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltip]'},{'name",{"_index":611,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltipabstractcomponent",{"_index":609,"title":{"directives/NgxTooltipAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltipactiveelementevent",{"_index":4091,"title":{"interfaces/NgxTooltipActiveElementEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipactivetooltipevent",{"_index":4098,"title":{"interfaces/NgxTooltipActiveTooltipEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipbaseevent",{"_index":4093,"title":{"interfaces/NgxTooltipBaseEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipcomponent",{"_index":4102,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltipconfiguration",{"_index":4094,"title":{"interfaces/NgxTooltipConfiguration.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtooltipconfigurationtoken",{"_index":4175,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["ngxtooltipdirective",{"_index":610,"title":{"directives/NgxTooltipDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltipdisabled",{"_index":4103,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltipevent",{"_index":4099,"title":{},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtooltipid",{"_index":4104,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltipinactiveevent",{"_index":4097,"title":{"interfaces/NgxTooltipInactiveEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipitem",{"_index":4096,"title":{"interfaces/NgxTooltipItem.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtooltipposition",{"_index":4087,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtooltippositionclass",{"_index":4088,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipservice",{"_index":4070,"title":{"injectables/NgxTooltipService.html":{}},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtouraction",{"_index":4235,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourbackdropclipevent",{"_index":4224,"title":{"interfaces/NgxTourBackdropClipEvent.html":{}},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourdirection",{"_index":4228,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourinteraction",{"_index":4229,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{}}}],["ngxtouritemdirective",{"_index":612,"title":{"directives/NgxTourItemDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourregistrationevent",{"_index":4231,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourrouteoptions",{"_index":4233,"title":{"interfaces/NgxTourRouteOptions.html":{}},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourservice",{"_index":505,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["ngxtourshowwhen",{"_index":4292,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["ngxtourshowwhen]'},{'name",{"_index":615,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourshowwhendirective",{"_index":614,"title":{"directives/NgxTourShowWhenDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourshowwhenelse",{"_index":4293,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["ngxtourstep",{"_index":4236,"title":{"interfaces/NgxTourStep.html":{}},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourstep.offset",{"_index":4356,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["ngxtourstepcomponent",{"_index":616,"title":{"directives/NgxTourStepComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourstepcomponent:103",{"_index":671,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:105",{"_index":657,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:112",{"_index":656,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:33",{"_index":674,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:38",{"_index":653,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:45",{"_index":652,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:53",{"_index":647,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:58",{"_index":667,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:63",{"_index":664,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:68",{"_index":651,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:73",{"_index":644,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:78",{"_index":645,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:83",{"_index":640,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:88",{"_index":646,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:93",{"_index":649,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:98",{"_index":659,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepoffset",{"_index":4265,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["ngxtourstepposition",{"_index":4230,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{}}}],["ngxtourtokenconfiguration",{"_index":4350,"title":{"interfaces/NgxTourTokenConfiguration.html":{}},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["ngxtourtokentype",{"_index":4354,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["ngxtreegrid",{"_index":4449,"title":{},"body":{"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtreegrid]'},{'name",{"_index":620,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridcell",{"_index":4362,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxtreegridcell]'},{'name",{"_index":618,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridcelldirective",{"_index":617,"title":{"directives/NgxTreeGridCellDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridcellrow",{"_index":4363,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxtreegridcelltarget",{"_index":4405,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxtreegriddirective",{"_index":619,"title":{"directives/NgxTreeGridDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridexpandable",{"_index":4450,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["ngxtreegridrow",{"_index":622,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridrowdirective",{"_index":621,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridrowtarget",{"_index":4406,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxutils",{"_index":1421,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["ngxvalidators",{"_index":4490,"title":{"classes/NgxValidators.html":{}},"body":{"classes/NgxValidators.html":{}}}],["ngxwindowservice",{"_index":1415,"title":{"injectables/NgxWindowService.html":{}},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["node_modules/@ngrx/signals/src/signal",{"_index":3627,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["non",{"_index":1582,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"index.html":{}}}],["none",{"_index":1126,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{}}}],["noninfringement",{"_index":5158,"title":{},"body":{"index.html":{},"license.html":{}}}],["note",{"_index":3513,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["notes",{"_index":2822,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["nothing",{"_index":67,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{}}}],["notice",{"_index":5145,"title":{},"body":{"index.html":{},"license.html":{}}}],["notify",{"_index":1768,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["now",{"_index":3532,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["npm",{"_index":5051,"title":{},"body":{"index.html":{}}}],["null",{"_index":48,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{}}}],["number",{"_index":190,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["number(value",{"_index":3763,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["numbers",{"_index":199,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["obj",{"_index":23,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxMobileLayoutService.html":{},"dependencies.html":{}}}],["object",{"_index":36,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["object.entries(item.data).foreach(([key",{"_index":3556,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["object.entries(record).foreach(([key",{"_index":3756,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["object.entries(storage).foreach(([key",{"_index":3759,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["object.entries(this.sortabletablecellrecord()).foreach(([cellname",{"_index":4936,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["object.keys(categories).length",{"_index":1734,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["object.keys(data",{"_index":2099,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["object.keys(data).map((key",{"_index":2097,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["object.keys(data).slice(0",{"_index":2104,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["object.keys(parseddata",{"_index":3466,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["object.keys(selectors).reduce((previous",{"_index":3808,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["object.keys(value).length",{"_index":3456,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["object.values(group.controls",{"_index":63,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["object.values(this.listeners).foreach",{"_index":2932,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["object.values(this.markers",{"_index":2846,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["object.values(this.rowsformgroup.controls).some",{"_index":4879,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["object.values(this.sortabletablecellrecord()).foreach((cell",{"_index":4950,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["object.values(value).every((selected",{"_index":4965,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["objects",{"_index":3717,"title":{},"body":{"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["observable",{"_index":268,"title":{},"body":{"injectables/EffectsService.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"miscellaneous/functions.html":{}}}],["observable.pipe(sharereplay",{"_index":2437,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["observables",{"_index":1641,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxStorageService.html":{},"interfaces/TableCellTemplate.html":{}}}],["observe",{"_index":1199,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["observer",{"_index":3879,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["observers",{"_index":447,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["observers.pipe.ts",{"_index":442,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["observers.pipe.ts:13",{"_index":3878,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["observers.pipe.ts:8",{"_index":446,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["observers/has",{"_index":441,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["obtaining",{"_index":5127,"title":{},"body":{"index.html":{},"license.html":{}}}],["occurring",{"_index":3715,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["of(event).pipe",{"_index":4040,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["of(mockchannel",{"_index":279,"title":{},"body":{"injectables/EffectsService.html":{}}}],["of(mockprivatechannel",{"_index":280,"title":{},"body":{"injectables/EffectsService.html":{}}}],["of(mockvideos",{"_index":281,"title":{},"body":{"injectables/EffectsService.html":{}}}],["of(payload",{"_index":4745,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["of(this.currentlanguage",{"_index":836,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["offer",{"_index":3709,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["offline",{"_index":1862,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["offline'},{'name",{"_index":561,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["offset",{"_index":4250,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["old",{"_index":3752,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["oldvalue",{"_index":3661,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["omit",{"_index":3026,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["onblur",{"_index":753,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["once",{"_index":1996,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["onchange",{"_index":1741,"title":{},"body":{"injectables/NgxCookieService.html":{},"interfaces/TableCellTemplate.html":{}}}],["onchange.bind(this",{"_index":1743,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onchanged",{"_index":4779,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["onchanges",{"_index":2676,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["onclose",{"_index":3243,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["onconsent",{"_index":1712,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onconsent.bind(this",{"_index":1740,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["ondestroy",{"_index":366,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["ondestroycomponent",{"_index":2146,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["ondestroyed",{"_index":2156,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["ondestroysubject",{"_index":1875,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["one",{"_index":7,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["ones",{"_index":734,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["onescape",{"_index":636,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["onfirstconsent",{"_index":1718,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onfirstconsent.bind(this",{"_index":1738,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onfocus",{"_index":754,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["oninit",{"_index":1020,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["online",{"_index":1926,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{}}}],["onlineservice",{"_index":1876,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["onlinesubject",{"_index":3358,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["onlyself",{"_index":438,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{}}}],["onmodalhide",{"_index":1747,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onmodalhide.bind(this",{"_index":1749,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onmodalshow",{"_index":1744,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onmodalshow.bind(this",{"_index":1746,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onpush",{"_index":1960,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["ontouch",{"_index":4778,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ontouched",{"_index":4886,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["onvisible",{"_index":4242,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["open",{"_index":954,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["open(options",{"_index":3270,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["open/closed",{"_index":1068,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["openaside",{"_index":3077,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["opened",{"_index":1112,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["openedindex",{"_index":4861,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["openedrows",{"_index":4791,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["openflyout",{"_index":3078,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["openflyout(flyout",{"_index":3088,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["opening",{"_index":3291,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["openrowstate",{"_index":3857,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["openrowstatetemplate",{"_index":4840,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["opens",{"_index":3272,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["operator",{"_index":508,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["operators",{"_index":504,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/StoreEffects.html":{}}}],["opinionated",{"_index":1137,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["opt",{"_index":1626,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["option",{"_index":4807,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["optional",{"_index":12,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":1778,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["options",{"_index":35,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxStore.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["options.autoclose",{"_index":3310,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.autofocus",{"_index":3334,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.closeonnavigation",{"_index":3344,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.component",{"_index":3295,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.conditionalfunction",{"_index":52,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["options.controls",{"_index":53,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["options.data",{"_index":3350,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.describedbyid",{"_index":3330,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.direction",{"_index":3337,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.has('when",{"_index":3909,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["options.hasbackdrop",{"_index":3339,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.interface.ts",{"_index":436,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{}}}],["options.label",{"_index":3328,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.labelledbyid",{"_index":3329,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.panelclass",{"_index":3341,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.restorefocus",{"_index":3333,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.role",{"_index":3326,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.ts",{"_index":149,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{}}}],["options.type",{"_index":3353,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.viewcontainerref",{"_index":3335,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["optionsvalue",{"_index":3263,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["order",{"_index":97,"title":{},"body":{"classes/BaseFormAccessor.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["original",{"_index":211,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/TransformPipe.html":{}}}],["original.slice(0",{"_index":213,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["original.slice(index",{"_index":214,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["originx",{"_index":4163,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["originy",{"_index":4164,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["others",{"_index":2617,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["otherwise",{"_index":5167,"title":{},"body":{"index.html":{},"license.html":{}}}],["ouput",{"_index":452,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["out",{"_index":1317,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"index.html":{},"license.html":{}}}],["outcome",{"_index":1957,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["outerhtml",{"_index":3507,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["outline",{"_index":1450,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{}}}],["output",{"_index":320,"title":{},"body":{"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["output.observers.length",{"_index":455,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["output['listeners']?.length",{"_index":3881,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["outputemitterref",{"_index":319,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["outputs",{"_index":2691,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["outputtoobservable",{"_index":3284,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["outputtoobservable(modal.action).pipe(startwith(undefined",{"_index":3300,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["outputtoobservable(modal.close).pipe",{"_index":3301,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["outside",{"_index":4192,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["over",{"_index":2436,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["overarching",{"_index":4448,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["overlay",{"_index":4170,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlaypositionbuilder",{"_index":4140,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayref",{"_index":4141,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayservice",{"_index":4142,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayx",{"_index":4165,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayy",{"_index":4166,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["override",{"_index":563,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["overrideconfiguration",{"_index":1877,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["overview",{"_index":5171,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":809,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxModalService.html":{}}}],["overwrites",{"_index":3266,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["overwritten",{"_index":1497,"title":{},"body":{"directives/NgxButtonDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["p",{"_index":1995,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["package",{"_index":240,"title":{"dependencies.html":{},"properties.html":{}},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"index.html":{}}}],["packages",{"_index":2725,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"index.html":{}}}],["padding",{"_index":4245,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["page",{"_index":1709,"title":{},"body":{"injectables/NgxCookieService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxWindowService.html":{}}}],["pages",{"_index":5076,"title":{},"body":{"index.html":{}}}],["pairs",{"_index":1542,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["pairwise",{"_index":4174,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["panelclass",{"_index":3204,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["paragraph",{"_index":2088,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["param",{"_index":34,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["parameter",{"_index":2357,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["parameters",{"_index":193,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["parameters[1",{"_index":1195,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["parameters[1]['params",{"_index":1192,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["parameters[2",{"_index":1208,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["params",{"_index":40,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxI18nService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{}}}],["parent",{"_index":453,"title":{},"body":{"pipes/HasObserversPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["parent.appendchild(element",{"_index":869,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["parent.contains(element",{"_index":3173,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["parent.setattribute('aria",{"_index":870,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["parentelement",{"_index":1974,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["parentelement.getattribute('aria",{"_index":1981,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["parentelement.setattribute('aria",{"_index":1978,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["parse",{"_index":3544,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{}}}],["parsed",{"_index":3714,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["parseddata",{"_index":3463,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["parser",{"_index":3547,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["parser.parsefromstring(value",{"_index":3548,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["parses",{"_index":3690,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["parsevalue",{"_index":3676,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["parsevalue(value",{"_index":3688,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["part",{"_index":2179,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["partial",{"_index":169,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/NgxDisplayContentConfiguration.html":{}}}],["particular",{"_index":5156,"title":{},"body":{"index.html":{},"license.html":{}}}],["particularly",{"_index":4500,"title":{},"body":{"classes/NgxValidators.html":{}}}],["parts",{"_index":3494,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["pass",{"_index":102,"title":{},"body":{"classes/BaseFormAccessor.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxStore.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["passed",{"_index":347,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["passes",{"_index":816,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["patch",{"_index":1149,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["patch(url",{"_index":1173,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["patched",{"_index":4870,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["patchvalue(true",{"_index":4943,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["path",{"_index":1604,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/NgxTableGetPipe.html":{}}}],["paths",{"_index":2405,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["path}${lang}.json",{"_index":2488,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["pattern",{"_index":948,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["payload",{"_index":138,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["perform",{"_index":1057,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxMediaQueryService.html":{}}}],["performance",{"_index":3904,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["permission",{"_index":1241,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"index.html":{},"license.html":{}}}],["permission(s",{"_index":2312,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["permission.directive.ts",{"_index":2292,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:103",{"_index":2304,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:110",{"_index":2305,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:167",{"_index":2303,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:30",{"_index":2317,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:31",{"_index":2306,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:34",{"_index":2307,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:39",{"_index":2308,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:44",{"_index":2315,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:45",{"_index":2316,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:46",{"_index":2309,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:47",{"_index":2310,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:52",{"_index":2311,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:57",{"_index":2314,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:62",{"_index":2313,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:67",{"_index":2300,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:72",{"_index":2301,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:77",{"_index":2302,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:82",{"_index":2299,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.pipe.ts",{"_index":2328,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:18",{"_index":2334,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:19",{"_index":2335,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:24",{"_index":2337,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:28",{"_index":2338,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:33",{"_index":2336,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:42",{"_index":2330,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:55",{"_index":2333,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:68",{"_index":2331,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:92",{"_index":2329,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission/has",{"_index":2291,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["permissions",{"_index":1239,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["permissions(s",{"_index":2293,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permissiontype",{"_index":1242,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["permit",{"_index":5142,"title":{},"body":{"index.html":{},"license.html":{}}}],["person",{"_index":5126,"title":{},"body":{"index.html":{},"license.html":{}}}],["persons",{"_index":5143,"title":{},"body":{"index.html":{},"license.html":{}}}],["pipe",{"_index":174,"title":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"pipes/TransformPipe.html":{}},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["pipe(filter((languages",{"_index":2543,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["pipe(switchmap",{"_index":4711,"title":{},"body":{"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["pipe(usemockdataduringtour('world",{"_index":493,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["pipe,pipetransform,outputemitterref",{"_index":3880,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["pipe/get.pipe",{"_index":1846,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["pipe/get.pipe.ts",{"_index":3867,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["pipe/get.pipe.ts:16",{"_index":3868,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["pipes",{"_index":176,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"overview.html":{}}}],["pipes/get",{"_index":1845,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["pipetransform",{"_index":204,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"pipes/TransformPipe.html":{}}}],["placed",{"_index":896,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["platform",{"_index":4584,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["platform_id",{"_index":4631,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["platformid",{"_index":4570,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["platforms",{"_index":4609,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["played",{"_index":3966,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["please",{"_index":795,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourStepComponent.html":{},"index.html":{}}}],["polite",{"_index":1864,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["portal",{"_index":4209,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["portions",{"_index":5148,"title":{},"body":{"index.html":{},"license.html":{}}}],["position",{"_index":629,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"injectables/NgxWindowService.html":{}}}],["positionclass",{"_index":4071,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["positionrecord",{"_index":4143,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["positionstrategy",{"_index":4204,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["possible",{"_index":661,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["post",{"_index":1150,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["post(url",{"_index":1176,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["postmessage",{"_index":1384,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["postmessage(channelname",{"_index":1397,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["pr",{"_index":5100,"title":{},"body":{"index.html":{}}}],["practices",{"_index":697,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["practices#selecting",{"_index":699,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["precedence",{"_index":3210,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["preconditions",{"_index":3275,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["preference",{"_index":1732,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["preferences",{"_index":1701,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["prepend",{"_index":3646,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["present",{"_index":1304,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["presented",{"_index":1537,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["preserve",{"_index":3614,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["preserved",{"_index":1972,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["pressed",{"_index":357,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["prevent",{"_index":1110,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["prevented",{"_index":3588,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["previous",{"_index":2514,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["previous.active",{"_index":4193,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["previous.id",{"_index":4187,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["previous.source",{"_index":4190,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["previouscontainer",{"_index":890,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["previousindex",{"_index":888,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["previously",{"_index":3220,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["previousvalue",{"_index":4795,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["primary",{"_index":1443,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["priority",{"_index":1441,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxToastService.html":{}}}],["private",{"_index":369,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["proceed",{"_index":3234,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["programmatically",{"_index":4421,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["project",{"_index":3242,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["projects",{"_index":5081,"title":{},"body":{"index.html":{}}}],["promise",{"_index":1622,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["proof",{"_index":3669,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["prop",{"_index":3552,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"properties.html":{}}}],["property",{"_index":136,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"pipes/HasObserversPipe.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["proposed",{"_index":2534,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["props",{"_index":3650,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["protected",{"_index":367,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["provide",{"_index":255,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["provided",{"_index":379,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["providedin",{"_index":1186,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["providengxreplaceelementsconfiguration",{"_index":3519,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["provider",{"_index":241,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["providers",{"_index":250,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["providers.util.ts",{"_index":229,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["providers/accessor",{"_index":228,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["provides",{"_index":335,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"injectables/NgxStorageService.html":{},"index.html":{}}}],["providing",{"_index":1140,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["public",{"_index":184,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"pipes/TransformPipe.html":{}}}],["publish",{"_index":5136,"title":{},"body":{"index.html":{},"license.html":{}}}],["pure",{"_index":2253,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["purpose",{"_index":5157,"title":{},"body":{"index.html":{},"license.html":{}}}],["purposes",{"_index":1549,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["put",{"_index":1151,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["put(url",{"_index":1178,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["queries",{"_index":2911,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["query",{"_index":2365,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["query.directive.ts",{"_index":2876,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:151",{"_index":2885,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:27",{"_index":2894,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:31",{"_index":2895,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:35",{"_index":2898,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:40",{"_index":2888,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:45",{"_index":2889,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:50",{"_index":2896,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:51",{"_index":2897,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:52",{"_index":2890,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:53",{"_index":2891,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:58",{"_index":2883,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:63",{"_index":2884,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:68",{"_index":2882,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:90",{"_index":2886,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:97",{"_index":2887,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.removeeventlistener('change",{"_index":3008,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query.service.ts",{"_index":2909,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:106",{"_index":2917,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:16",{"_index":2927,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:21",{"_index":2926,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:28",{"_index":2924,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:34",{"_index":2922,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:38",{"_index":2915,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:45",{"_index":2918,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:57",{"_index":2920,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.types.ts",{"_index":2873,"title":{},"body":{"interfaces/NgxMediaQuery.html":{}}}],["query/media",{"_index":2875,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts",{"_index":2956,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:102",{"_index":2968,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:121",{"_index":2972,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:13",{"_index":2982,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:18",{"_index":2981,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:23",{"_index":2980,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:29",{"_index":2977,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:37",{"_index":2979,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:44",{"_index":2975,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["querychangedevent",{"_index":2942,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["querychangedevent.currenttarget",{"_index":2997,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["querychangedevent.matches",{"_index":2944,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["querychangedsubject",{"_index":2963,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["queryid",{"_index":3004,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["queryidmap",{"_index":2964,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["querylist",{"_index":4825,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["querylistmap",{"_index":2965,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["queryparam",{"_index":3401,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queryparams",{"_index":3371,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queryparamshandling",{"_index":3468,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queryparamstype",{"_index":3382,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queue",{"_index":3995,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["queue.findindex",{"_index":4044,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["queue.slice(index",{"_index":4046,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["quick",{"_index":5069,"title":{},"body":{"index.html":{}}}],["radio",{"_index":3855,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["radiocontrol",{"_index":4809,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["radiotemplate",{"_index":4836,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["random",{"_index":3422,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["range",{"_index":4523,"title":{},"body":{"classes/NgxValidators.html":{}}}],["range.validator",{"_index":4550,"title":{},"body":{"classes/NgxValidators.html":{}}}],["range/date",{"_index":4549,"title":{},"body":{"classes/NgxValidators.html":{}}}],["reached",{"_index":4053,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["reactiveformsmodule",{"_index":4766,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["read",{"_index":3617,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["readme",{"_index":177,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"pipes/TransformPipe.html":{}}}],["readme’s",{"_index":5085,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":300,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ready",{"_index":2265,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["real",{"_index":3718,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["really",{"_index":1763,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["reason",{"_index":1107,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["receive",{"_index":3873,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["record",{"_index":792,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nLoadingService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxTooltipService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["record[key",{"_index":3743,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["record[key].asobservable",{"_index":3744,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["record[key]?.next(undefined",{"_index":3754,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["records",{"_index":4915,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["recreate",{"_index":2737,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["redirect",{"_index":1247,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["reduce",{"_index":3452,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["reduce((previous",{"_index":2513,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["reducers",{"_index":130,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["reducers.ts",{"_index":160,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["redux",{"_index":5066,"title":{},"body":{"index.html":{}}}],["ref",{"_index":2024,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxMediaQueryDirective.html":{}}}],["refer",{"_index":2557,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["reference",{"_index":1552,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["refers",{"_index":3533,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["reformat",{"_index":469,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["reformat.trim",{"_index":475,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["regarding",{"_index":5095,"title":{},"body":{"index.html":{}}}],["regardless",{"_index":1069,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["region",{"_index":801,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{}}}],["register",{"_index":972,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["registercell",{"_index":4455,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registercell(index",{"_index":4469,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registerdraganddropitem",{"_index":913,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["registerdraganddropitem(item",{"_index":921,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["registered",{"_index":979,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxTreeGridDirective.html":{}}}],["registeritem",{"_index":956,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["registeritem(item",{"_index":970,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["registermediaqueries",{"_index":2966,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["registermediaqueries(...queries",{"_index":2974,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["registeronchange(fn",{"_index":4883,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["registerontouched(fn",{"_index":4887,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["registerquery",{"_index":2914,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["registerquery(value",{"_index":2919,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["registerrow",{"_index":4456,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registerrow(row",{"_index":4471,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registers",{"_index":2921,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"directives/NgxTreeGridDirective.html":{}}}],["regular",{"_index":1448,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["related",{"_index":4612,"title":{},"body":{"injectables/NgxWindowService.html":{},"index.html":{}}}],["relating",{"_index":5055,"title":{},"body":{"index.html":{}}}],["relativeto",{"_index":3462,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["reload",{"_index":2640,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["remaining",{"_index":1251,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxI18nRootService.html":{}}}],["remove",{"_index":476,"title":{},"body":{"pipes/IbanPipe.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["removecookie",{"_index":1658,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["removecookie(cookie",{"_index":1680,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["removed",{"_index":3949,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["removefocus",{"_index":755,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["removeitem",{"_index":957,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["removeitem(item",{"_index":973,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["removeitem(key",{"_index":3691,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["removeonblur",{"_index":4106,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["removeonmouseout",{"_index":4072,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["removerow",{"_index":4457,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["removerow(index",{"_index":4473,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["removes",{"_index":975,"title":{},"body":{"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridDirective.html":{}}}],["removetoast",{"_index":3999,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["removetoast(toast",{"_index":4004,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["removetooltip",{"_index":4107,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["removing",{"_index":2845,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["render",{"_index":1895,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["rendered",{"_index":1543,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{}}}],["renderelsetemplate",{"_index":2118,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["renderer",{"_index":1030,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["renderer2",{"_index":1086,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["rendering",{"_index":1729,"title":{},"body":{"injectables/NgxCookieService.html":{},"interfaces/TableCellTemplate.html":{}}}],["renderinitialtemplate",{"_index":1879,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["renders",{"_index":1886,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["rendertemplate",{"_index":1880,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["rendertemplate(status",{"_index":1892,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["renderthentemplate",{"_index":2119,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["reordered",{"_index":856,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["repeat(${longestrow",{"_index":1596,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["replace",{"_index":467,"title":{},"body":{"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["replace(`{{#from",{"_index":857,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["replace(`{{#to",{"_index":858,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["replacement",{"_index":3553,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replacement.innerhtml",{"_index":3558,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replacement.setattribute(key",{"_index":3557,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replaces",{"_index":322,"title":{},"body":{"directives/FocusClickDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["replacing",{"_index":3526,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replaysubject",{"_index":2978,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["repo",{"_index":5044,"title":{},"body":{"index.html":{}}}],["reposition",{"_index":4199,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["repository",{"_index":5088,"title":{},"body":{"index.html":{}}}],["represent",{"_index":691,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{}}}],["represented",{"_index":3711,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["represents",{"_index":1798,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["request",{"_index":1159,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"miscellaneous/functions.html":{}}}],["requested",{"_index":2509,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["requestedtranslations",{"_index":2478,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["requests",{"_index":2359,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["require",{"_index":2840,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["requireatleastone",{"_index":3862,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["required",{"_index":72,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["required.validator",{"_index":4544,"title":{},"body":{"classes/NgxValidators.html":{}}}],["required.validator.ts",{"_index":9,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["required/all",{"_index":4543,"title":{},"body":{"classes/NgxValidators.html":{}}}],["required/at",{"_index":8,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["required/depended",{"_index":4555,"title":{},"body":{"classes/NgxValidators.html":{}}}],["requiredfeatures",{"_index":1297,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredfeatures.every((feature",{"_index":1356,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredfeatures.some((feature",{"_index":1358,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredpermissions",{"_index":1300,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredpermissions.every((permission",{"_index":1364,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredpermissions.some((permission",{"_index":1366,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requirements.ts",{"_index":3861,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["requires",{"_index":3230,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["rerender",{"_index":4992,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["res.status",{"_index":2500,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["reset",{"_index":2267,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/TableCellTemplate.html":{}}}],["resetformonnewdata",{"_index":4851,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["resetngxtableform",{"_index":4770,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["resets",{"_index":708,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{}}}],["resetsortdirection",{"_index":688,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["resize",{"_index":4641,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["resolve",{"_index":2633,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["resolver",{"_index":2626,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["resources",{"_index":2499,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["respective",{"_index":5084,"title":{},"body":{"index.html":{}}}],["respectively",{"_index":3720,"title":{},"body":{"injectables/NgxStorageService.html":{},"index.html":{}}}],["respond",{"_index":3156,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["response",{"_index":1200,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["response.body",{"_index":1205,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["response.headers.get('content",{"_index":1203,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["response.user",{"_index":1339,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["responsetype",{"_index":1197,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["rest",{"_index":1762,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["restore",{"_index":3219,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["restorefocus",{"_index":3223,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["restriction",{"_index":5131,"title":{},"body":{"index.html":{},"license.html":{}}}],["result",{"_index":840,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTreeGridCellDirective.html":{},"pipes/TransformPipe.html":{}}}],["result.length",{"_index":2422,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["result.replace",{"_index":846,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["result.slice(0",{"_index":4030,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["results",{"_index":88,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["resulttype",{"_index":3778,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["resulttype[key]['actions",{"_index":3784,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["resulttype[key]['selectors",{"_index":3781,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["return",{"_index":44,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["returned",{"_index":3872,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["returning",{"_index":3563,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["returns",{"_index":196,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["returntype",{"_index":4587,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["reunes",{"_index":5114,"title":{},"body":{"index.html":{}}}],["revision",{"_index":1628,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["right",{"_index":1451,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["rights",{"_index":5134,"title":{},"body":{"index.html":{},"license.html":{}}}],["role",{"_index":986,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["root",{"_index":1187,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["rootclass",{"_index":630,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["rooti18nservice",{"_index":2584,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["roottarget",{"_index":2766,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["route",{"_index":1232,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["route.types.ts",{"_index":1228,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["router",{"_index":3372,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["routermodule",{"_index":3033,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["routeroutlet",{"_index":3042,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["routerstatesnapshot",{"_index":3576,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["routes",{"_index":1229,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["routing",{"_index":3064,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["row",{"_index":1589,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["row)?.focus",{"_index":4436,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["row.directive",{"_index":4419,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["rowclass",{"_index":4853,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["rowclicked",{"_index":3847,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["rowitem",{"_index":1828,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["rowkey",{"_index":1826,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["rows",{"_index":3840,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["rowsformgroup",{"_index":4797,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["rtl",{"_index":1619,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["run",{"_index":1215,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["runariachecks",{"_index":3256,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["runariachecks(options",{"_index":3273,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["runinbrowser",{"_index":4578,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["runinbrowser(action",{"_index":4585,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["running",{"_index":2259,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxModalService.html":{}}}],["rxjs",{"_index":272,"title":{},"body":{"injectables/EffectsService.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"dependencies.html":{},"index.html":{}}}],["rxjs/operators",{"_index":2428,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["sadly",{"_index":166,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["safe",{"_index":4567,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["safehtml",{"_index":3488,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["safely",{"_index":4184,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["same",{"_index":1983,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["samesite",{"_index":1605,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["sanitize",{"_index":3561,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["sanitizer",{"_index":3491,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["save",{"_index":2567,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"injectables/NgxStorageService.html":{}}}],["saved",{"_index":2983,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["saves",{"_index":2466,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["saving",{"_index":3713,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["scan",{"_index":2426,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["scan((actions",{"_index":2415,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["scramble",{"_index":3391,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambled",{"_index":3416,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams",{"_index":3376,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams(params",{"_index":3389,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams(value",{"_index":3433,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams?(params",{"_index":3470,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambler",{"_index":3420,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambler(value.sorting",{"_index":3434,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambling",{"_index":3441,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["screen",{"_index":2877,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{}}}],["scroll",{"_index":4198,"title":{},"body":{"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["scrollingup",{"_index":4571,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrollingupsubject",{"_index":4572,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrolls",{"_index":4200,"title":{},"body":{"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["scrollstrategy",{"_index":4202,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["scrollto",{"_index":4579,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrollto(offset",{"_index":4588,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrollup",{"_index":4648,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["se",{"_index":4558,"title":{},"body":{"classes/NgxValidators.html":{}}}],["searches",{"_index":4397,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["searchquery",{"_index":3423,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["second",{"_index":1955,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["secondary",{"_index":1444,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["seconds",{"_index":4058,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["see",{"_index":38,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["seen",{"_index":668,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["select",{"_index":98,"title":{},"body":{"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["selectable",{"_index":4799,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectablekey",{"_index":4846,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectabletype",{"_index":4847,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectall",{"_index":288,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selectchannelmessageerrors",{"_index":1385,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selectchannelmessageerrors(channelname",{"_index":1402,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selectchannelmessages",{"_index":1386,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selectchannelmessages(channelname",{"_index":1407,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selected",{"_index":764,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["selectedrow",{"_index":4819,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selecterror",{"_index":142,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selecterrorfromstore",{"_index":3787,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selecterrorfromstore(selector",{"_index":3793,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selecterrormessage",{"_index":143,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selecterrormessagefromstore",{"_index":3788,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selecterrormessagefromstore(selector",{"_index":3795,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectfromstore",{"_index":3789,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectfromstore(selector",{"_index":3797,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectid",{"_index":156,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["selection",{"_index":4966,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectloading",{"_index":141,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selectloadingfromstore",{"_index":3790,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectloadingfromstore(selector",{"_index":3800,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selector",{"_index":298,"title":{},"body":{"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["selector.selectall",{"_index":3818,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selector.selecterror",{"_index":3822,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selector.selecterrormessage",{"_index":3824,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selector.selectloading",{"_index":3820,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selectors",{"_index":131,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["selectors.channel",{"_index":4687,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["selectors.subscribercount",{"_index":4698,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["selectors.videos",{"_index":4700,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["selectrow(index",{"_index":4940,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sell",{"_index":5140,"title":{},"body":{"index.html":{},"license.html":{}}}],["send",{"_index":1162,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["sending",{"_index":3419,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sends",{"_index":1400,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["separately",{"_index":2996,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["series",{"_index":2404,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["server",{"_index":1727,"title":{},"body":{"injectables/NgxCookieService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxWindowService.html":{}}}],["serves",{"_index":2758,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["service",{"_index":780,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxWindowService.html":{}}}],["service.abstract.ts",{"_index":2344,"title":{},"body":{"classes/NgxI18nAbstractService.html":{}}}],["service.abstract.ts:9",{"_index":2345,"title":{},"body":{"classes/NgxI18nAbstractService.html":{}}}],["service.ts",{"_index":4664,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:14",{"_index":4688,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:17",{"_index":4694,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:20",{"_index":4690,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:23",{"_index":4692,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:27",{"_index":4701,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:30",{"_index":4705,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:33",{"_index":4703,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:34",{"_index":4704,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:37",{"_index":4699,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:40",{"_index":4696,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:42",{"_index":4697,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:44",{"_index":4679,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:52",{"_index":4675,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:56",{"_index":4681,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:65",{"_index":4676,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:69",{"_index":4677,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:73",{"_index":4678,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service/online.service.ts",{"_index":3357,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:10",{"_index":3364,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:15",{"_index":3363,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:20",{"_index":3361,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:25",{"_index":3359,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:51",{"_index":3360,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/storage.service.ts",{"_index":3668,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:122",{"_index":3694,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:175",{"_index":3692,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:20",{"_index":3703,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:214",{"_index":3681,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:25",{"_index":3699,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:254",{"_index":3696,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:265",{"_index":3689,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:29",{"_index":3698,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:33",{"_index":3702,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:38",{"_index":3701,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:39",{"_index":3679,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:54",{"_index":3705,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:70",{"_index":3707,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:83",{"_index":3685,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:93",{"_index":3687,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["services",{"_index":506,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxStore.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["session",{"_index":1272,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["sessionfeatures",{"_index":1349,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionfeatures.has(`${feature",{"_index":1357,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionpermissions",{"_index":1362,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionpermissions.has(permission",{"_index":1365,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionstorage",{"_index":3678,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["sessionstoragerecord",{"_index":3672,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["set",{"_index":137,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/TableCellTemplate.html":{}}}],["set([...(features",{"_index":1350,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["set([...permissions",{"_index":1363,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["set(hideheaderrowwhen",{"_index":3905,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["set(ids",{"_index":2951,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["set(object.keys(cleanedformvalue",{"_index":62,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setactive",{"_index":4269,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["setactive(isactive",{"_index":4275,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["setariabusytag",{"_index":1881,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setariabusytag(isloading",{"_index":1896,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setarialivetag",{"_index":1882,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setarialivetag(value",{"_index":1900,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setavailablelanguages",{"_index":2529,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setavailablelanguages(languages",{"_index":2538,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setcompleted",{"_index":4751,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["setcompleted(payload",{"_index":4748,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["setcookie",{"_index":1659,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setcookie(cookie",{"_index":1682,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setcurrentlanguage",{"_index":2530,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setcurrentlanguage(language",{"_index":2540,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setdata",{"_index":4752,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["setdata(payload",{"_index":4743,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["setdatainroute",{"_index":3377,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["setdatainroute(data",{"_index":3393,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["setdisabledstate?(isdisabled",{"_index":4890,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["setdraganddropdescription",{"_index":788,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["setdraganddropdescription(parent",{"_index":802,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["setdraganddropdescription(this.elementref.nativeelement",{"_index":941,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["seterror",{"_index":3644,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["setfocus",{"_index":756,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["setfocus(hasfocus",{"_index":1064,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{}}}],["setformerror",{"_index":25,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setformerror(control",{"_index":71,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setformerror(group.get(key",{"_index":85,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setglobalfeatures",{"_index":1266,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["setglobalfeatures(features",{"_index":1301,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["setitem",{"_index":3656,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["setitem(key",{"_index":3693,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["setlanguage",{"_index":2585,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["setlayout",{"_index":3079,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["setlayout(layout",{"_index":3090,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["setloading",{"_index":3645,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["setmessage",{"_index":789,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["setmessage(message",{"_index":810,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["sets",{"_index":714,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["setsortdirection",{"_index":689,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["setsortdirection(direction",{"_index":711,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["settimeout",{"_index":989,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{}}}],["setting",{"_index":1994,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["settings",{"_index":1690,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxImageMarkerService.html":{}}}],["settooltipevent",{"_index":4145,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["settooltipevent(event",{"_index":4149,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["setup",{"_index":54,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAbstractTableCellDirective.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{}}}],["setupcookieshandler",{"_index":1660,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setupcookieshandler(categories",{"_index":1685,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setupinitiallayout",{"_index":3080,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["setupinitiallayout(markasinitial",{"_index":3092,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["setupstorage",{"_index":3677,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["setupstorage(storage",{"_index":3695,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["setwitherror",{"_index":4740,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["several",{"_index":4611,"title":{},"body":{"injectables/NgxWindowService.html":{},"index.html":{}}}],["shall",{"_index":5146,"title":{},"body":{"index.html":{},"license.html":{}}}],["share",{"_index":2724,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["shared",{"_index":2147,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sharereplay",{"_index":2427,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["shouldbeauthenticated",{"_index":1245,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["shouldhaveallfeatures",{"_index":1238,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFeatureDirective.html":{}}}],["shouldhaveallpermissions",{"_index":1243,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["shouldhavefeature",{"_index":2189,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["shouldhavepermission",{"_index":2298,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["shouldn't",{"_index":3392,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["shouldrender",{"_index":2228,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{}}}],["shouldshow",{"_index":2017,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["show",{"_index":1580,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["showaside",{"_index":3071,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["showbundled",{"_index":3954,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{},"injectables/NgxToastService.html":{}}}],["showbundledtoasts",{"_index":3996,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["showdetailrow",{"_index":3838,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["showdetailrowoption",{"_index":3852,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["showed",{"_index":3902,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["showflyout",{"_index":3072,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["showinactive",{"_index":1558,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["showing",{"_index":4238,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["showmodal",{"_index":1661,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["shown",{"_index":1733,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["showonfocus",{"_index":4108,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["showonmouseenter",{"_index":4073,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["showopenrowstate",{"_index":3842,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["shows",{"_index":3957,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{},"injectables/NgxToastService.html":{}}}],["showselectedopenrow",{"_index":3845,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["showtoast",{"_index":4000,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["showtoast(data",{"_index":4008,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["showtooltip",{"_index":4109,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["showtooltip(tooltip",{"_index":4152,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["showwhen",{"_index":1993,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}}}],["side",{"_index":1728,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxWindowService.html":{}}}],["sign",{"_index":1311,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signal",{"_index":670,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["signal(false",{"_index":1077,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/TableCellTemplate.html":{}}}],["signalstorefeature",{"_index":3624,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["signed",{"_index":1289,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signin",{"_index":1267,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signin(signindata",{"_index":1305,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signindata",{"_index":1310,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signindatatype",{"_index":1306,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signing",{"_index":1335,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signinuser",{"_index":1268,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signinuser(signindata",{"_index":1312,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signout",{"_index":1269,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signout(signoutdatatype",{"_index":1314,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutdatatype",{"_index":1315,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutresponsetype",{"_index":1334,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutuser",{"_index":1270,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutuser(signoutdatatype",{"_index":1319,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signs",{"_index":1308,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["similar",{"_index":232,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["simplechangehaschanged",{"_index":2722,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.canedit",{"_index":2733,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.currentzoomlevel",{"_index":2735,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.markertypes",{"_index":2734,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.startstate",{"_index":2732,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.zoomlevels",{"_index":2736,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simply",{"_index":3460,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["single",{"_index":2101,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{}}}],["situations",{"_index":3417,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{}}}],["size",{"_index":1583,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{}}}],["size.pipe.ts",{"_index":1573,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["size.pipe.ts:17",{"_index":1577,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["size/item",{"_index":1572,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["slice",{"_index":151,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["slice(0",{"_index":2103,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["slicekey",{"_index":3772,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["slices",{"_index":3643,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["software",{"_index":5128,"title":{},"body":{"index.html":{},"license.html":{}}}],["something",{"_index":2438,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxWindowService.html":{}}}],["somethinghappened",{"_index":4626,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["somethinghascompleted",{"_index":448,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["sometimes",{"_index":3415,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["someuniqueid",{"_index":3529,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["somewhere",{"_index":4817,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sort",{"_index":684,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["sort.pipe.ts",{"_index":1123,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["sort.pipe.ts:12",{"_index":1125,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["sort/aria",{"_index":1122,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["sortable",{"_index":685,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["sortableinput",{"_index":4922,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sortabletablecellrecord",{"_index":4787,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sortdirection",{"_index":686,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["sorted",{"_index":4843,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sorting",{"_index":706,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["sorttemplate",{"_index":4838,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"index.html":{}}}],["sources",{"_index":4188,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["space",{"_index":474,"title":{},"body":{"pipes/IbanPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["spaces",{"_index":468,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["span",{"_index":1439,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["specific",{"_index":75,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["specifically",{"_index":3309,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["specstoreassets",{"_index":4652,"title":{"interfaces/SpecStoreAssets.html":{}},"body":{"interfaces/SpecStoreAssets.html":{}}}],["specstoreservice",{"_index":4663,"title":{"injectables/SpecStoreService.html":{}},"body":{"injectables/SpecStoreService.html":{}}}],["ssr",{"_index":3514,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["standalone",{"_index":182,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["standard",{"_index":2930,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["start",{"_index":2657,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{},"index.html":{}}}],["startcontrolkey",{"_index":4514,"title":{},"body":{"classes/NgxValidators.html":{}}}],["started",{"_index":5041,"title":{"index.html":{},"license.html":{}},"body":{}}],["started.html",{"_index":1689,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["startstate",{"_index":2686,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["starttour",{"_index":489,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["startwith",{"_index":1725,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxModalService.html":{}}}],["startwith(cookieconsent.getcookie('data",{"_index":1760,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["startwith(undefined",{"_index":3303,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["state",{"_index":392,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["state.service.ts",{"_index":4735,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["state.service.ts:31",{"_index":4753,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.service.ts:36",{"_index":4756,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.service.ts:44",{"_index":4755,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.service.ts:50",{"_index":4754,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["stateinterface",{"_index":115,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["states",{"_index":1454,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["statetype",{"_index":3635,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["stateupdated",{"_index":2687,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["statewrapper",{"_index":3786,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["static",{"_index":1568,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"classes/NgxValidators.html":{}}}],["status",{"_index":1285,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxOnlineService.html":{}}}],["stay",{"_index":3412,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["step",{"_index":521,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["step(card",{"_index":4262,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["step.component.mock.ts",{"_index":624,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["step.component.ts",{"_index":4318,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:103",{"_index":4334,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:105",{"_index":4330,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:112",{"_index":4329,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:33",{"_index":4335,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:38",{"_index":4328,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:45",{"_index":4327,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:53",{"_index":4324,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:58",{"_index":4333,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:63",{"_index":4332,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:68",{"_index":4326,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:73",{"_index":4321,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:78",{"_index":4322,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:83",{"_index":4320,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:88",{"_index":4323,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:93",{"_index":4325,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:98",{"_index":4331,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step/tour",{"_index":4317,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["stepclass",{"_index":631,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{}}}],["steps",{"_index":643,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["steptitle",{"_index":4344,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["still",{"_index":3288,"title":{},"body":{"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["stop",{"_index":4422,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["stopped",{"_index":1523,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["storage",{"_index":2537,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["storage.clear",{"_index":3755,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storage.removeitem(key",{"_index":3753,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storage.setitem(key",{"_index":3748,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storage[key",{"_index":3746,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageevents",{"_index":3673,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageeventsubject",{"_index":3674,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice",{"_index":3725,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice.localstorage.setitem('hello",{"_index":3726,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice.sessionstorage.setitem('hello",{"_index":3727,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice.storageevent$.subscribe(console.log",{"_index":3728,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["store",{"_index":274,"title":{},"body":{"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"index.html":{}}}],["store.spec",{"_index":278,"title":{},"body":{"injectables/EffectsService.html":{}}}],["store.ts",{"_index":112,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["store.types.ts",{"_index":3623,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["storeassetsoptions",{"_index":3773,"title":{"interfaces/StoreAssetsOptions.html":{}},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["storeauthenticationresponse",{"_index":1271,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["storeauthenticationresponse(response",{"_index":1321,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["stored",{"_index":1318,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["storeeffects",{"_index":4719,"title":{"injectables/StoreEffects.html":{}},"body":{"injectables/StoreEffects.html":{}}}],["storeflowassets",{"_index":3776,"title":{},"body":{"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["storeitem",{"_index":3799,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["stores",{"_index":1309,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["storeservice",{"_index":3428,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["storeslice",{"_index":4660,"title":{},"body":{"interfaces/SpecStoreAssets.html":{}}}],["storestate",{"_index":3802,"title":{"interfaces/StoreState.html":{}},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["storestateservice",{"_index":4738,"title":{"injectables/StoreStateService.html":{}},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["strategy",{"_index":3937,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{}}}],["streams",{"_index":3002,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["stress",{"_index":3535,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["strict",{"_index":1608,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["string",{"_index":152,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxMediaQuery.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"pipes/NgxTableSortIconPipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/functions.html":{}}}],["string(date.now",{"_index":2370,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["stringifiedqueryparamstype",{"_index":3437,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["stringify",{"_index":3465,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["strings",{"_index":1352,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["stringtype",{"_index":3191,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["string}{{#from}}${string}{{#item}}${string}{{#to}}${string",{"_index":883,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#from}}${string}{{#to}}${string}{{#item}}${string",{"_index":884,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#item}}${string",{"_index":885,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#item}}${string}{{#from}}${string}{{#to}}${string",{"_index":880,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#item}}${string}{{#to}}${string}{{#from}}${string",{"_index":879,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#to}}${string}{{#from}}${string}{{#item}}${string",{"_index":882,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#to}}${string}{{#item}}${string}{{#from}}${string",{"_index":881,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{id}}${string",{"_index":3477,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["structural",{"_index":2109,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["studio",{"_index":5120,"title":{},"body":{"index.html":{},"license.html":{}}}],["styleurl",{"_index":1024,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxToastContainerComponent.html":{}}}],["styleurls",{"_index":4773,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["styling",{"_index":1578,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["sub",{"_index":3768,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["subject",{"_index":412,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{},"license.html":{}}}],["subject.complete",{"_index":3758,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subject.getvalue",{"_index":3747,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subject.next(item",{"_index":3750,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subject.next(undefined",{"_index":3757,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subjects",{"_index":3683,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["sublicense",{"_index":5138,"title":{},"body":{"index.html":{},"license.html":{}}}],["subscribe",{"_index":513,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["subscribe(observable",{"_index":2236,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["subscribed",{"_index":2960,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["subscribercount",{"_index":4655,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["subscribes",{"_index":454,"title":{},"body":{"pipes/HasObserversPipe.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["subscription",{"_index":2124,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["subscriptions",{"_index":2260,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["subsequent",{"_index":386,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["subslice",{"_index":3774,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["substantial",{"_index":5147,"title":{},"body":{"index.html":{},"license.html":{}}}],["substrings",{"_index":843,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["succeeded",{"_index":473,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["such",{"_index":2483,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["summary",{"_index":1055,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["summaryelement",{"_index":1031,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["super(route",{"_index":3430,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["super(selectors",{"_index":4739,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["sure",{"_index":2621,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxMediaQueryService-1.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["survey.component.html",{"_index":3425,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["switch",{"_index":733,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["switchmap",{"_index":1332,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["switchmap((isauthenticated",{"_index":1368,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sync",{"_index":3408,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts",{"_index":3370,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:100",{"_index":3387,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:110",{"_index":3379,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:119",{"_index":3394,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:152",{"_index":3385,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:161",{"_index":3383,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:168",{"_index":3390,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:17",{"_index":3405,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:174",{"_index":3397,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:18",{"_index":3407,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:20",{"_index":3399,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:25",{"_index":3400,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:30",{"_index":3403,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:33",{"_index":3388,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync/query",{"_index":3369,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["system",{"_index":2348,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["tab",{"_index":3600,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["tabindex",{"_index":331,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxTooltipDirective.html":{}}}],["table",{"_index":535,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["table'},{'name",{"_index":549,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["table.component.html",{"_index":4772,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["table.component.scss",{"_index":4774,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["table.component.ts",{"_index":4759,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecelltemplate",{"_index":4757,"title":{"interfaces/TableCellTemplate.html":{}},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecelltemplaterecord",{"_index":4786,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecelltemplates",{"_index":4826,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecolumns",{"_index":4822,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecypressrecord",{"_index":4789,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tables",{"_index":3885,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["tableviewcomponent",{"_index":3426,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["tag",{"_index":693,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["tag.directive.ts",{"_index":1815,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tag.directive.ts:18",{"_index":1819,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tag.directive.ts:25",{"_index":1817,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tag/cypress",{"_index":1814,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tags",{"_index":4927,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tailored",{"_index":1167,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["take",{"_index":823,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{}}}],["take(1",{"_index":838,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["taken",{"_index":4257,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["takes",{"_index":2958,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["takeuntil",{"_index":1924,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["takeuntil(this.destroyed",{"_index":2170,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["takeuntil(this.hasmodalsubject.pipe(filter((hasmodal",{"_index":3317,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["takeuntil(this.markerdestroyedsubject",{"_index":2754,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["takeuntil(this.ondestroysubject",{"_index":1933,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["takeuntil(this.ondestroysubject.asobservable",{"_index":1961,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["takeuntildestroyed",{"_index":2045,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxToastService.html":{}}}],["takeuntildestroyed(this.destroyref",{"_index":2076,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["taking",{"_index":3495,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["tap",{"_index":824,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["tap(([index",{"_index":4310,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["tap(([previous",{"_index":4177,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tap((action",{"_index":3308,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["tap((currentlanguage",{"_index":839,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["tap((data",{"_index":3446,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["tap((hascookie",{"_index":2167,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["tap((hasfeature",{"_index":2227,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["tap((haspermission",{"_index":2326,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["tap((isauthenticated",{"_index":2870,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["tap((language",{"_index":862,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["tap((matchesquery",{"_index":2905,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["tap((online",{"_index":1929,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["tap((response",{"_index":1341,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["tap((selected",{"_index":4973,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tap((translations",{"_index":2508,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["tap((value",{"_index":2264,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["target",{"_index":3504,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["target.innerhtml",{"_index":3559,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["target.replacewith(replacement",{"_index":3560,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["targetrowindex",{"_index":1559,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["td",{"_index":4441,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["technologies",{"_index":785,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["template",{"_index":509,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["template.component.ts",{"_index":3883,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["template.component.ts:12",{"_index":3887,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["template.component.ts:13",{"_index":3891,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["template.component.ts:14",{"_index":3927,"title":{},"body":{"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["template.component.ts:17",{"_index":3889,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["template.component.ts:18",{"_index":3893,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["template.component.ts:22",{"_index":3886,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["template.component.ts:23",{"_index":3892,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["templateref",{"_index":717,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["templaterefs",{"_index":2143,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["templates",{"_index":720,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["templates/columns",{"_index":4958,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["templateurl",{"_index":449,"title":{},"body":{"pipes/HasObserversPipe.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["tertiary",{"_index":1445,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["test",{"_index":507,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/SpecStoreService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["test.component.ts",{"_index":4978,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["test.component.ts:41",{"_index":4979,"title":{},"body":{"components/TestDisplayContentComponent.html":{}}}],["test.component.ts:62",{"_index":4985,"title":{},"body":{"components/TestOverrideDisplayContentComponent.html":{}}}],["test.component.ts:63",{"_index":4986,"title":{},"body":{"components/TestOverrideDisplayContentComponent.html":{}}}],["testdisplaycontentcomponent",{"_index":553,"title":{"components/TestDisplayContentComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testerrorcomponent",{"_index":555,"title":{"components/TestErrorComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testerrordatacomponent",{"_index":557,"title":{"components/TestErrorDataComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testing",{"_index":2784,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["testloadingcomponent",{"_index":558,"title":{"components/TestLoadingComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testofflinecomponent",{"_index":560,"title":{"components/TestOfflineComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testoverridedisplaycontentcomponent",{"_index":562,"title":{"components/TestOverrideDisplayContentComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["tests",{"_index":2215,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxImageMarkerService.html":{}}}],["text",{"_index":863,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"pipes/TransformPipe.html":{}}}],["text/html",{"_index":3545,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["that's",{"_index":2576,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["thentemplateref",{"_index":2116,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["thenviewref",{"_index":2190,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["there's",{"_index":1118,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["therefor",{"_index":2839,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["they're",{"_index":3297,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["things",{"_index":3503,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.abstractcontrol",{"_index":2059,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.dirty",{"_index":2069,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.invalid",{"_index":2067,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.statuschanges.pipe(startwith(this.abstractcontrol.status",{"_index":2065,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.valuechanges.pipe(startwith(this.abstractcontrol.value",{"_index":2063,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.accessors",{"_index":421,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["this.actions",{"_index":4813,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.actions$.pipe",{"_index":4726,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["this.activetooltip",{"_index":4181,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.allowbeforeunloadhandler",{"_index":3605,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.allowmultipleopenrows",{"_index":4911,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ariadescribedby",{"_index":3171,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["this.arialabelledby",{"_index":3170,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["this.authenticationresponsesubject.asobservable",{"_index":1337,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.authenticationresponsesubject.next(response",{"_index":1336,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.authenticationservice",{"_index":2225,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["this.authenticationservice.haspermission(converttoarray(permission",{"_index":2340,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["this.authenticationservice.isauthenticated",{"_index":2869,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.authenticationstatussubject.next('signed",{"_index":1342,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.authenticationstatussubject.pipe",{"_index":1282,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.availablelanguagessubject",{"_index":2542,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.availablelanguagessubject.getvalue().includes(language",{"_index":2575,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.availablelanguagessubject.next(languages",{"_index":2574,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.availablelanguagessubject.next(this.configuration.availablelanguages",{"_index":2563,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.baseurl",{"_index":1190,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.baseurl}/${url",{"_index":1191,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.broadcastchannel[channelname",{"_index":1423,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["this.broadcastchannel[channelname].close",{"_index":1426,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["this.broadcastchannel[channelname].postmessage(message",{"_index":1430,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["this.buttontype",{"_index":1478,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.canedit",{"_index":2748,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.cdref",{"_index":2254,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["this.cdref.detectchanges",{"_index":1103,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["this.cdref.markforcheck",{"_index":4865,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.changedetectorref",{"_index":2258,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["this.changedetectorref.markforcheck",{"_index":2266,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["this.channel",{"_index":4712,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.cleardata",{"_index":3458,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.clearstorage(localstorage",{"_index":3740,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.clearstorage(sessionstorage",{"_index":3741,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.close(options.onclose",{"_index":3313,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.close.emit",{"_index":3161,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["this.column",{"_index":739,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.columns",{"_index":4812,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.component",{"_index":2174,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.componentref",{"_index":2079,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["this.componentref.destroy",{"_index":2078,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["this.componentref.instance",{"_index":2081,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.componentref.setinput('cookies",{"_index":2175,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.componentref.setinput('data",{"_index":2085,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.componentref.setinput('errorkeys",{"_index":2084,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.componentref.setinput('errors",{"_index":2083,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.conditions",{"_index":1973,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.conditions.error",{"_index":1951,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.conditions.loading",{"_index":1947,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.conditions.offline",{"_index":1944,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.config.cachebust",{"_index":2489,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.config.component",{"_index":2073,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.config.errors[key",{"_index":2098,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.config.show",{"_index":2096,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.config.showwhen",{"_index":2068,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.configuration.autoclose",{"_index":4060,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration.component",{"_index":4212,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.configuration.components.error",{"_index":1953,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.components.loading",{"_index":1949,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.components.offline",{"_index":1946,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.defaultlanguage",{"_index":2560,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.configuration.defaultposition",{"_index":4195,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.configuration.hidewhennotemplateprovided",{"_index":1970,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.icon",{"_index":1531,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.configuration.languagerouteparam",{"_index":2562,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.configuration.listentoonlinestatus",{"_index":1927,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.maxamount",{"_index":4014,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration.maxamount.amount",{"_index":4031,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration.maxamount.strategy",{"_index":4015,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration.maxamount?.strategy",{"_index":4067,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration.maxtime",{"_index":4065,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration?.icon",{"_index":1527,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.configuration?.iconposition",{"_index":1494,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.configuration?.labelwrapper",{"_index":1510,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.configuration?.loading",{"_index":1516,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.configuration?.maxamount?.['component",{"_index":4011,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration?.modals?.[options.type",{"_index":3294,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.configuration?.modals[options.type",{"_index":3354,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.configuration[item.elementid",{"_index":3550,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.containers().find((container",{"_index":938,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.control",{"_index":2056,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.cookies",{"_index":2151,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.cookies.map((cookie",{"_index":2159,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.cookieschanged$.pipe",{"_index":1759,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookieschangedsubject.asobservable",{"_index":1693,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookieschangedsubject.next(cookieconsent.getcookie('data",{"_index":1770,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentchanged$.pipe(startwith(undefined",{"_index":1752,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentchangedsubject.asobservable",{"_index":1697,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentchangedsubject.next(event",{"_index":1742,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsented$.pipe(startwith(undefined",{"_index":1751,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentedsubject.asobservable",{"_index":1705,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentedsubject.next(event",{"_index":1739,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.createimagemakeredit(id",{"_index":2788,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.createmarker",{"_index":2728,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.createmarkerclickedlistener(marker",{"_index":2797,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.createmarkervaluechanges(marker",{"_index":2804,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.createmodalcomponent(options",{"_index":3299,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.createreadonlyimagemarker(id",{"_index":2789,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.currentlanguage",{"_index":832,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxI18nRootService.html":{}}}],["this.currentlanguagesubject.asobservable",{"_index":2549,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.currentlanguagesubject.getvalue",{"_index":2564,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.currentlanguagesubject.next(newlanguage",{"_index":2571,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.currentmarker",{"_index":2729,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentmarker.close",{"_index":2739,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentmarker.mode",{"_index":2751,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentmarker.valuechanges",{"_index":2752,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentquerymatch.asobservable",{"_index":2923,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.currentquerymatch.next(id",{"_index":2941,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.currentquerymatch.pipe",{"_index":2952,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.currentscrollposition",{"_index":4620,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.currentscrollpositionsubject$.asobservable",{"_index":4592,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.currentsorting",{"_index":4785,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.currentzoomlevel",{"_index":2743,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.custommessages",{"_index":874,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.cypresstag",{"_index":1818,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["this.data",{"_index":4800,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data().length",{"_index":4796,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data().reduce((previousvalue",{"_index":4794,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data()?.length",{"_index":4867,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data()[index][selectablekey",{"_index":4942,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data.length",{"_index":4909,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.datasourcesubject",{"_index":491,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["this.defaultlanguage",{"_index":2559,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.defaultlayout",{"_index":3113,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.aside",{"_index":3130,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.flyout",{"_index":3128,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.footer",{"_index":3131,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.header?.left",{"_index":3120,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.header?.main",{"_index":3122,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.header?.right",{"_index":3124,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.navigation",{"_index":3126,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultrowopen",{"_index":4862,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.definedcolumns.set",{"_index":4953,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.description",{"_index":942,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.destroyed",{"_index":2157,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.destroyed$.complete",{"_index":424,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["this.destroyed$.next",{"_index":2171,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.destroyed$.next(null",{"_index":4976,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.destroyed$.next(undefined",{"_index":423,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["this.destroyedsubject$.asobservable",{"_index":3602,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.destroyedsubject$.complete",{"_index":3609,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.destroyedsubject$.next(undefined",{"_index":3608,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.destroyedsubject.complete",{"_index":1017,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.destroyedsubject.next",{"_index":1016,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.detailrowtemplate",{"_index":4815,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.detailselement",{"_index":1108,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.dialogservice.closeall",{"_index":3320,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.dialogservice.open(component",{"_index":3324,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.disabled",{"_index":354,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{}}}],["this.displaycontentconfiguration",{"_index":1936,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.dispose",{"_index":2155,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.document",{"_index":4624,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.document.addeventlistener('scroll",{"_index":4638,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.document.defaultview",{"_index":4637,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.draganddropservice",{"_index":940,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.editabletablecellrecord.set",{"_index":4919,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.editabletablecellrecord.update((value",{"_index":4929,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.effectsservice.fetchchannel",{"_index":4728,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["this.effectsservice.fetchvideos",{"_index":4731,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["this.elementref",{"_index":4136,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.elementref.nativeelement",{"_index":2747,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{}}}],["this.elementref.nativeelement.appendchild",{"_index":1521,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.elementref.nativeelement.appendchild(wrapperelement",{"_index":1515,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.elementref.nativeelement.children",{"_index":4438,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.elementref.nativeelement.focus",{"_index":2290,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["this.elementref.nativeelement.getattribute('id",{"_index":4285,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.elementref.nativeelement.innerhtml",{"_index":1512,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.elementref.nativeelement.parentelement",{"_index":1975,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.elementref.nativeelement.parentelement?.setattribute('aria",{"_index":1984,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.elementref.nativeelement.parentnode",{"_index":2095,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.elementref.nativeelement.prepend",{"_index":1536,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.elementref.nativeelement.setattribute('id",{"_index":4288,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.elementref.nativeelement?.removechild(this.iconelement",{"_index":1538,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.elsetemplateref",{"_index":2222,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.elseviewref",{"_index":2224,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.emitvalueonsingleitem",{"_index":4866,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.errorcomponent",{"_index":2077,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.errorselement",{"_index":2086,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.feature",{"_index":2220,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.findfocusableelement",{"_index":4434,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.firstcookiesconsentedsubject.asobservable",{"_index":1713,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.firstcookiesconsentedsubject.next(event",{"_index":1737,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.focusclick.emit",{"_index":360,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["this.focusclick.emit(event",{"_index":355,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["this.form",{"_index":3443,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.form.reset",{"_index":3459,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.form.setvalue(value",{"_index":3457,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.form.valuechanges",{"_index":3445,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.formgenerated",{"_index":4802,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.formgroupdirective",{"_index":2060,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.formgroupdirective.form.get(control",{"_index":2061,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.formnamedirective?.control.get(control",{"_index":2062,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.getauthenticationresponse().pipe",{"_index":1338,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.getcomponent",{"_index":3118,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.getcomponent(layout.aside",{"_index":3129,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.getcomponent(layout.footer",{"_index":3127,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.getcookie(cookie",{"_index":1761,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.geterrors(this.abstractcontrol.errors",{"_index":2082,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.geterrors(this.abstractcontrol.errors).errors.join",{"_index":2092,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.getitem(key",{"_index":3736,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.getitemobservable(key",{"_index":3737,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.getnewlanguage(language",{"_index":2566,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.getrow(0",{"_index":4484,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.getrow(index)?.registercell(cell",{"_index":4488,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.getrow(this.rows.length",{"_index":4485,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.getsession().pipe",{"_index":1361,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.getvalue",{"_index":3342,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(configuration?.data",{"_index":3349,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(configuration?.hasbackdrop",{"_index":3338,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(configuration?.panelclass",{"_index":3340,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(undefined",{"_index":3332,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.globalfeaturessubject.asobservable()]).pipe",{"_index":1347,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.globalfeaturessubject.next(features",{"_index":1359,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.handleaccessorsaction",{"_index":419,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["this.handlecomponentrender(this.haserrors",{"_index":2075,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.handlecontentscroll.bind(this",{"_index":4639,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.handlecurrentsort(this.currentsorting",{"_index":4784,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlecurrentsort(this.currentsortingevent",{"_index":4933,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handledatachanges",{"_index":3448,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.handledatachanges(data",{"_index":3449,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.handleicon",{"_index":1476,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.handleloading",{"_index":1477,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.handlenocomponentflow(this.haserrors",{"_index":2074,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.handlerowclicked(this.data()[0",{"_index":4868,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlerowclicked(this.data()[openedindex",{"_index":4864,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlerowcolumns",{"_index":4959,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlerowstate(index",{"_index":4905,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handletablecelltemplates",{"_index":4960,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handleurl(url",{"_index":1194,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.handlewhenfocussed",{"_index":1095,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["this.hascookie",{"_index":2150,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.hascookieelse",{"_index":2154,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.hasdocument",{"_index":4636,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.haserrors",{"_index":2070,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.haserrors.set",{"_index":2066,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.hasfeature",{"_index":2262,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["this.hasfocus",{"_index":1119,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["this.hasfocus.set(hasfocus",{"_index":1105,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.hasfootertemplates.set",{"_index":4930,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.hasmodalsubject.asobservable",{"_index":3280,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.hasmodalsubject.next(false",{"_index":3321,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.hasmodalsubject.next(true",{"_index":3293,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.hasmodalsubject.value",{"_index":3289,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.haspermission",{"_index":2341,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["this.hasrequireddescription(options",{"_index":3322,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.headercontrol.disable",{"_index":4892,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.enable",{"_index":4895,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.patchvalue(false",{"_index":4881,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.patchvalue(true",{"_index":4882,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.setvalue",{"_index":4964,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.valuechanges",{"_index":4972,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.httpclient",{"_index":1196,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.delete",{"_index":1206,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.get",{"_index":1193,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.get('test",{"_index":4710,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.httpclient.patch",{"_index":1210,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.post",{"_index":1207,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.put",{"_index":1209,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.i18nloadingservice.dispatchtranslationloaderaction",{"_index":2639,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["this.i18nservice.initi18n(this.i18nservice.currentlanguage).pipe",{"_index":2641,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["this.icon",{"_index":1481,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.iconcomponent",{"_index":1526,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.iconcomponent.instance.elementref.nativeelement",{"_index":1534,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.iconcomponent.setinput('data",{"_index":1532,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.iconcomponent?.destroy",{"_index":1539,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.iconelement",{"_index":1525,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.iconelement.classname",{"_index":1529,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.iconposition",{"_index":1535,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.id",{"_index":4090,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["this.imageelement",{"_index":2730,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.imageelement().nativeelement",{"_index":2746,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.imagemarkerservice.createimagemarker",{"_index":2745,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.initform",{"_index":3444,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.initiallayoutset$.pipe",{"_index":3112,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.initiallayoutsetsubject",{"_index":3101,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.initiallayoutsetsubject$.next(true",{"_index":3139,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.injector",{"_index":3516,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.isactive",{"_index":4284,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.isauthenticated$.pipe",{"_index":1367,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.isbrowser",{"_index":4635,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.isdirty",{"_index":3606,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.isfocussed",{"_index":4059,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.isopen.set(isopen",{"_index":1099,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.itemregisteredsubject.next",{"_index":999,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.itemregisteredsubject.pipe",{"_index":988,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items",{"_index":1004,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.findindex",{"_index":1001,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.findindex((item",{"_index":1014,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.foreach((item",{"_index":993,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.length",{"_index":1011,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.push(item",{"_index":1000,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.slice(0",{"_index":1005,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.slice(index",{"_index":1006,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items[direction",{"_index":1010,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items[id].markasactive",{"_index":937,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.items[index]?.updateaccordionitemstate(true",{"_index":998,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items[item.itemid",{"_index":943,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.languagerouteparam",{"_index":2561,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.layout$.pipe",{"_index":3140,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutservice.asideshown",{"_index":3039,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["this.layoutservice.flyoutshown",{"_index":3043,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["this.layoutservice.setupinitiallayout",{"_index":3051,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["this.layoutsubject$.asobservable",{"_index":3104,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.getvalue",{"_index":3133,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.next",{"_index":3117,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.next(clean(layout",{"_index":3114,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.next(clean(this.defaultlayout",{"_index":3115,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.listeners[id",{"_index":2938,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.listeners[item",{"_index":2949,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.liveregionservice.announce(result",{"_index":859,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.loading",{"_index":1480,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.loadingcomponent",{"_index":1517,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.loadingcomponent.destroy",{"_index":1524,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.loadingcomponent.instance.elementref.nativeelement",{"_index":1522,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.loadingcomponent.setinput('data",{"_index":1519,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.loadingdata",{"_index":1520,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.localstoragerecord",{"_index":3735,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.markerclicked.emit(value",{"_index":2755,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.markerdestroyedsubject.complete",{"_index":2742,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.markerdestroyedsubject.next",{"_index":2741,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.markers[id",{"_index":2795,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.markertypes",{"_index":2750,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.mediaquerylistenermap.clear",{"_index":3014,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.mediaquerylistenermap.get(id",{"_index":3009,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.mediaquerylistenermap.set(id",{"_index":2999,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.mediaqueryservice",{"_index":2903,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["this.messagerecord[currentlanguage].container",{"_index":852,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.messagerecord[currentlanguage].item",{"_index":848,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.messagerecord[currentlanguage][type",{"_index":841,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.messagerecord[language].description",{"_index":864,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.modalvisiblesubject.asobservable",{"_index":1719,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.modalvisiblesubject.next(false",{"_index":1748,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.modalvisiblesubject.next(true",{"_index":1745,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.movetocell('first",{"_index":4430,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.movetocell('last",{"_index":4431,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.movetocell(ngxtreegridcell",{"_index":4428,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.movetocell(this.ngxtreegridcell",{"_index":4429,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.ngxcookieservice.hasacceptedcategory(cookie.category",{"_index":2161,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.ngxcookieservice.hasacceptedservice(cookie.category",{"_index":2164,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.ngxhasfeature",{"_index":2221,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhasfeatureelse",{"_index":2223,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhasfeatureshouldhaveallfeatures",{"_index":2217,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhasfeatureshouldhavefeature",{"_index":2219,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhaspermission",{"_index":2323,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxhaspermissionelse",{"_index":2324,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxhaspermissionshouldhaveallpermissions",{"_index":2319,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxhaspermissionshouldhavepermission",{"_index":2321,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxisauthenticated",{"_index":2867,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.ngxisauthenticatedelse",{"_index":2868,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.ngxmediaqueryshouldmatch",{"_index":2906,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["this.ngxtableconfiguration?.allowmultiplerowsopen",{"_index":4845,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.emitvalueonsingleitem",{"_index":4857,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.hideheaderwhen",{"_index":4859,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.highlightkey",{"_index":4854,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.ngxtableclass",{"_index":4777,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.showdetailrow",{"_index":4856,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.showopenrowstate",{"_index":4855,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.showselectedopenrow",{"_index":4852,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtooltip",{"_index":4133,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipcomponent",{"_index":4135,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipdisabled",{"_index":4131,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipid",{"_index":4137,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipposition",{"_index":4134,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipservice.settooltipevent",{"_index":4089,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["this.ngxtourshowwhen",{"_index":4306,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.ngxtourshowwhenelse",{"_index":4307,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.ngxtreegrid",{"_index":4482,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.ngxtreegridcell",{"_index":4426,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.ngxtreegridcellrow",{"_index":4443,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.onblur",{"_index":2289,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["this.onchanged",{"_index":4884,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.onchanged(handlengxtablevaluechanges(value",{"_index":4967,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.onchanged(value",{"_index":4969,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ondestroysubject.complete",{"_index":1963,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["this.ondestroysubject.next",{"_index":1962,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["this.onfocus",{"_index":2288,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["this.onlineservice.online",{"_index":1928,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.onlinesubject.asobservable",{"_index":3362,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["this.onlinesubject.next(false",{"_index":3367,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["this.onlinesubject.next(true",{"_index":3366,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["this.ontouch",{"_index":4888,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.open",{"_index":987,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.openedrows()[index",{"_index":4906,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.openedrows.set(action",{"_index":4912,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.openedrows.update((value",{"_index":4910,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.overlaypositionbuilder",{"_index":4205,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref",{"_index":4196,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref.attach",{"_index":4214,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref.detach",{"_index":4219,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref.updatepositionstrategy(positionstrategy",{"_index":4208,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref?.hasattached",{"_index":4180,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayservice.create",{"_index":4197,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayservice.scrollstrategies.reposition",{"_index":4203,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overrideconfiguration",{"_index":1935,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.overrideconfiguration[status]?.data",{"_index":1969,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.overrideconfiguration[status]?.template",{"_index":1964,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.parent.getrow(ngxtreegridcellrow",{"_index":4446,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.parent.movefocus(this.id",{"_index":1098,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.parent.registeritem(this",{"_index":1106,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.parent.removeitem(this",{"_index":1117,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.parent?.registercell(ngxtreegridcellrow",{"_index":4444,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.parsevalue(storage.getitem(key",{"_index":3742,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.permission",{"_index":2322,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.position",{"_index":4339,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.priority",{"_index":1479,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.querychangedsubject.asobservable().pipe",{"_index":3001,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querychangedsubject.complete",{"_index":3011,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querychangedsubject.next(id",{"_index":2995,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querychangedsubject.next(null",{"_index":3010,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap.get",{"_index":2985,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap.get(id",{"_index":2984,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap.has(id",{"_index":3000,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap.set(id",{"_index":2992,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap].find",{"_index":2989,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap].some(([_",{"_index":2987,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querylistmap",{"_index":3007,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querylistmap.clear",{"_index":3013,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querylistmap.get(id).matches",{"_index":3005,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querylistmap.set(id",{"_index":2994,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryparams",{"_index":3451,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.queue",{"_index":4048,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.queue$.getvalue().find",{"_index":4055,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.queue$.getvalue().length",{"_index":4016,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.queue$.next",{"_index":4042,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.queue$.next([...queue.slice(0",{"_index":4045,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.radiocontrol.disable",{"_index":4893,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.radiocontrol.enable",{"_index":4896,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.radiocontrol.patchvalue(value",{"_index":4874,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.radiocontrol.valuechanges",{"_index":4968,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.registerquery(this.mediaqueries",{"_index":2931,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.removeitem(key",{"_index":3738,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.removetoast(toast",{"_index":4062,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.removetooltip",{"_index":4129,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["this.renderelsetemplate",{"_index":2169,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.renderer.addclass",{"_index":1533,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.createelement",{"_index":1509,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.renderer.createelement('i",{"_index":1528,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.renderer.createelement('p",{"_index":2089,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.insertbefore",{"_index":2094,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.listen(detailselement.nativeelement",{"_index":1113,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.renderer.nextsibling(this.elementref.nativeelement",{"_index":2071,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.removechild(this.elementref.nativeelement.parentnode",{"_index":2087,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.removeclass",{"_index":2072,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.setattribute(this.errorselement",{"_index":2090,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.setproperty",{"_index":2091,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderinitialtemplate",{"_index":1954,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.rendertemplate('error",{"_index":1952,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.rendertemplate('loading",{"_index":1948,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.rendertemplate('offline",{"_index":1945,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.renderthentemplate",{"_index":2168,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.resetformonnewdata",{"_index":4806,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.role",{"_index":4489,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rootclass",{"_index":4340,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.rooti18nservice.currentlanguage",{"_index":2610,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.rooti18nservice.setcurrentlanguage(language",{"_index":2613,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.route",{"_index":3402,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.router.navigate",{"_index":3461,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.row",{"_index":4445,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.row.getcell(cell",{"_index":4435,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.rowclicked.emit(row",{"_index":4898,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rows",{"_index":4479,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows.length",{"_index":4487,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows.push(row",{"_index":4478,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows.slice(0",{"_index":4480,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows[direction",{"_index":4486,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows[index",{"_index":4483,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rowsformgroup",{"_index":4805,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.disable",{"_index":4891,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.enable",{"_index":4894,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.patchvalue",{"_index":4974,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.patchvalue(writengxtablevalue(value",{"_index":4877,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.reset",{"_index":4875,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.valuechanges",{"_index":4961,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.runariachecks(options",{"_index":3298,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.sanitizer.bypasssecuritytrusthtml(body.documentelement.innerhtml",{"_index":3564,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.scrambleparams",{"_index":3438,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.scrambleparams(data",{"_index":3464,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.scrollingup",{"_index":4618,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.scrollingupsubject$.asobservable",{"_index":4600,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.scrollingupsubject$.next(false",{"_index":4650,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.scrollingupsubject$.next(true",{"_index":4651,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.selectable",{"_index":4801,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectablekey",{"_index":4804,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectabletype",{"_index":4873,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectedrow",{"_index":4900,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectedrow.set(index",{"_index":4904,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectedrow.set(undefined",{"_index":4903,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selecterrorfromstore",{"_index":4689,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selecterrorfromstore(selectors.videos",{"_index":4702,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selecterrorfromstore(selectors[key",{"_index":3813,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.selecterrormessagefromstore",{"_index":4691,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selecterrormessagefromstore(selectors[key",{"_index":3815,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.selectfromstore",{"_index":4686,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selectfromstore(selectors.darkmode",{"_index":4695,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selectfromstore(selectors[key",{"_index":3809,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.selectloadingfromstore",{"_index":4693,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selectloadingfromstore(selectors[key",{"_index":3811,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.session",{"_index":1371,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.sessionstoragerecord",{"_index":3733,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.setariabusytag(this.conditions.loading",{"_index":1943,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.setarialivetag(this.displaycontentarialive",{"_index":1937,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.setcurrentlanguage(language",{"_index":2573,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.setdatainroute(data",{"_index":3447,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.setitem(key",{"_index":3739,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.setsortdirection(newsortdirection",{"_index":737,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.setupstorage(localstorage",{"_index":3734,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.setupstorage(sessionstorage",{"_index":3732,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.shouldbeauthenticated",{"_index":2866,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.shouldhaveallfeatures",{"_index":2216,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.shouldhaveallpermissions",{"_index":2318,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.shouldhavefeature",{"_index":2218,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.shouldhavepermission",{"_index":2320,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.showaside.asreadonly",{"_index":3095,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showaside.set(false",{"_index":3138,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showaside.set(true",{"_index":3137,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showbundledtoasts$.next(false",{"_index":4052,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.showbundledtoasts$.next(true",{"_index":4068,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.showbundledtoasts$]).pipe",{"_index":4025,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.showdetailrow",{"_index":4793,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.showflyout.asreadonly",{"_index":3099,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showflyout.set(false",{"_index":3136,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showflyout.set(true",{"_index":3134,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showopenrowstate",{"_index":4814,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.showselectedopenrow",{"_index":4899,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.showtooltip",{"_index":4128,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["this.signinuser(signindata).pipe",{"_index":1340,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.signoutuser(signoutdatatype).pipe",{"_index":1344,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.sort.emit",{"_index":738,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.sortabletablecellrecord",{"_index":4945,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[column",{"_index":4935,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[column].handlesort",{"_index":4938,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[event.column].setsortdirection(event.direction",{"_index":4951,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[event.column].sortdirection",{"_index":4946,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord.set",{"_index":4917,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord.update((value",{"_index":4926,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortdirection",{"_index":735,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.startstate",{"_index":2749,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.state.data",{"_index":4747,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.state.iscompleted",{"_index":4750,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.stateupdated.emit(value",{"_index":2753,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.statewrapper",{"_index":3807,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.stepclass",{"_index":4341,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.storageeventsubject.asobservable",{"_index":3700,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.storageeventsubject.next(event",{"_index":3751,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.store",{"_index":3620,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.store).pipe",{"_index":4746,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.store.dispatch(actions.channel.clear",{"_index":4713,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.dispatch(actions.channel.effects.set",{"_index":4717,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.dispatch(actions.videos.clear",{"_index":4716,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.dispatch(actions.videos.effects.set",{"_index":4718,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.pipe(select(selector.error",{"_index":3821,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.store.pipe(select(selector.errormessage",{"_index":3823,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.store.pipe(select(selector.loading",{"_index":3819,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.store.pipe(select(selector.select",{"_index":3817,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.storeauthenticationresponse(response",{"_index":1343,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.storeauthenticationresponse(undefined",{"_index":1345,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.storeservice.setfilters(value",{"_index":3432,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.subscribe",{"_index":2339,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["this.subscribe(this.authenticationservice.hasfeature(converttoarray(feature",{"_index":2261,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["this.summaryelement()?.nativeelement.focus",{"_index":1104,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.tablecelltemplaterecord.set",{"_index":4916,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecelltemplaterecord.update((value",{"_index":4925,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecolumns.set([...(columns",{"_index":4954,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecypressrecord.set",{"_index":4918,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecypressrecord.update((value",{"_index":4928,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.template",{"_index":2052,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.templateref",{"_index":2053,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxMediaQueryDirective.html":{}}}],["this.thentemplateref",{"_index":2149,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.thenviewref",{"_index":2229,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.titleelement",{"_index":4342,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.titleid.set(id",{"_index":4349,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.toastevents",{"_index":4038,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.toastevents$.next",{"_index":4054,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.toasts().find",{"_index":4064,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.toasts().length",{"_index":4017,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.toastservice.bundledcomponent",{"_index":3979,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["this.toastservice.hasbundledtoasts",{"_index":3983,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["this.toastservice.markasrendered(this.toast",{"_index":3969,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["this.toastservice.removetoast(this.toast",{"_index":3970,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["this.toastservice.setfocus(hasfocus",{"_index":3988,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["this.toastservice.showbundled",{"_index":3961,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["this.toastservice.toasts",{"_index":3985,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["this.tooltipeventssubject",{"_index":4176,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.tooltipeventssubject.next(event",{"_index":4221,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.tooltipservice.removetooltip",{"_index":4130,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.tooltipservice.settooltipevent",{"_index":4132,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.tourservice.closetour().subscribe",{"_index":4336,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.tourservice.currentindex",{"_index":4308,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.tourservice.currenttour",{"_index":4309,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.tourservice.registerelement(this",{"_index":4286,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.tourservice.starttour",{"_index":510,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["this.tourservice.unregisterelement(this.touritem",{"_index":4289,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.translateservice.get(key",{"_index":2618,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.getfallbacklang",{"_index":2612,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.getlangs",{"_index":2611,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.instant(key",{"_index":2616,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.reloadlang(language",{"_index":2615,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.use(this.rooti18nservice.currentlanguage",{"_index":2614,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translationloaderactionssubject$.next(action",{"_index":2432,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationloaderactionssubject$.pipe",{"_index":2413,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationloadingservice.addloadedtranslations",{"_index":2510,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationloadingservice.gettranslations",{"_index":2477,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationloadingservice.loadtranslations",{"_index":2505,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationloadingservice.marktranslationsloadedasfailed",{"_index":2502,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationsfailedsubject$.asobservable",{"_index":2409,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationsfailedsubject$.next(false",{"_index":2443,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationsloading[paths",{"_index":2435,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationspaths.map((path",{"_index":2479,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationspaths.tostring",{"_index":2506,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationssubject$.getvalue",{"_index":2434,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationssubject$.next",{"_index":2433,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.unscrambleparams",{"_index":3439,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.unscrambleparams(value",{"_index":3455,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.updateaccordionitemstate(event.newstate",{"_index":1116,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.updateconditions",{"_index":1930,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.updateconditions(this.displaycontent",{"_index":1934,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.updateview",{"_index":2153,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.updateviewsubject",{"_index":1941,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.updateviewsubject.next",{"_index":1932,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.videos",{"_index":4715,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.viewcontainer.clear",{"_index":1942,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.viewcontainer.createcomponent",{"_index":1530,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["this.viewcontainer.createcomponent(component",{"_index":1967,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.viewcontainer.createcomponent(this.configuration.loading",{"_index":1518,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.viewcontainer.createembeddedview",{"_index":2230,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.hascookieelse",{"_index":2173,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.overrideconfiguration[status]?.template",{"_index":1965,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.template",{"_index":2054,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.templateref",{"_index":1971,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.thentemplateref",{"_index":2172,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.widthsubject$.asobservable",{"_index":4604,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.widthsubject$.getvalue",{"_index":4644,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.widthsubject$.next(this.window.innerwidth",{"_index":4640,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window",{"_index":4622,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window.addeventlistener('resize",{"_index":4642,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window.innerwidth",{"_index":4643,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window.scrollto(0",{"_index":4645,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice",{"_index":3730,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.windowservice.currentscrollposition",{"_index":4621,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.document",{"_index":4625,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.hasdocument",{"_index":4629,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.isbrowser",{"_index":1731,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["this.windowservice.runinbrowser",{"_index":1420,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxWindowService.html":{}}}],["this.windowservice.scrollingup",{"_index":4619,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.scrollto(500",{"_index":4627,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.width",{"_index":4617,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.window",{"_index":4623,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowsservice.runinbrowser",{"_index":2569,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.windowwidth",{"_index":4616,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.zoomlevels",{"_index":2744,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["those",{"_index":2414,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["though",{"_index":4256,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["through",{"_index":1401,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["throughout",{"_index":2583,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["throw",{"_index":377,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourStepComponent.html":{}}}],["throwerror",{"_index":2928,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["tick",{"_index":992,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["time",{"_index":1217,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["times",{"_index":2721,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["timing",{"_index":3109,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["title",{"_index":511,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{}}}],["titleelement",{"_index":632,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["titleelement.nativeelement.getattribute('id",{"_index":4347,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["titleelement.nativeelement.setattribute('id",{"_index":4348,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["titleid",{"_index":633,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["toast",{"_index":551,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["toast.configuration?.autoclose",{"_index":4061,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["toast.configuration?.haspriority",{"_index":4043,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["toast.id",{"_index":3990,"title":{},"body":{"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{}}}],["toastevents",{"_index":3997,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["toasts",{"_index":3948,"title":{},"body":{"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["toasts.length",{"_index":4050,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["toastservice",{"_index":3953,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{}}}],["toberemoved",{"_index":3931,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["todo",{"_index":133,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["toggle",{"_index":1114,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["toggleevent",{"_index":1115,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["token",{"_index":4352,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["tokens",{"_index":1184,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["toobservable",{"_index":2899,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["toobservable(this.ngxmediaquery",{"_index":2900,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["toobservable(this.ngxmediaqueryelse",{"_index":2901,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["toobservable(this.ngxmediaqueryshouldmatch",{"_index":2902,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["toolbar",{"_index":2825,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["toolbox",{"_index":2827,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["tools",{"_index":5072,"title":{},"body":{"index.html":{}}}],["tooltip",{"_index":4077,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["tooltipeventssubject",{"_index":4144,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipportal",{"_index":4210,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipposition",{"_index":4194,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref",{"_index":4213,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('id",{"_index":4218,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('position",{"_index":4216,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('positionclass",{"_index":4217,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('text",{"_index":4215,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltips",{"_index":5077,"title":{},"body":{"index.html":{}}}],["tooltipservice",{"_index":4105,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["top",{"_index":3712,"title":{},"body":{"injectables/NgxStorageService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{}}}],["tort",{"_index":5166,"title":{},"body":{"index.html":{},"license.html":{}}}],["tosignal",{"_index":3050,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxToastService.html":{}}}],["tosignal(this.layoutservice.layout",{"_index":3045,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["total",{"_index":641,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["touched",{"_index":395,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["touchedeventlistener",{"_index":2048,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["touchedeventlistener(this.abstractcontrol",{"_index":2064,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["touppercase",{"_index":4997,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["tour",{"_index":485,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{}}}],["tour.types",{"_index":4353,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["touritem",{"_index":4232,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["touritem]'},{'name",{"_index":613,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["tourservice",{"_index":488,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["track",{"_index":2491,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxModalService.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxWindowService.html":{}}}],["tracked",{"_index":2976,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["trailing",{"_index":477,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["transform",{"_index":185,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"pipes/TransformPipe.html":{}}}],["transform(direction",{"_index":3920,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["transform(feature",{"_index":2239,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["transform(output",{"_index":444,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["transform(permission",{"_index":2332,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["transform(undefined",{"_index":1575,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["transform(value",{"_index":186,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/TransformPipe.html":{}}}],["transformer",{"_index":4990,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["transformer(value",{"_index":4998,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["transformertype",{"_index":4994,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["transformpipe",{"_index":4988,"title":{"pipes/TransformPipe.html":{}},"body":{"pipes/TransformPipe.html":{}}}],["transforms",{"_index":4995,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["translate",{"_index":2603,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["translate/core",{"_index":2468,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"dependencies.html":{}}}],["translateloader",{"_index":2450,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translateservice",{"_index":2586,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["translation",{"_index":1612,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["translation.fromstore",{"_index":2512,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts",{"_index":2447,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:19",{"_index":2461,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:25",{"_index":2456,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:30",{"_index":2459,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:35",{"_index":2463,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:42",{"_index":2465,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation/multi",{"_index":2446,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translationloaderactionentity",{"_index":2397,"title":{"interfaces/TranslationLoaderActionEntity.html":{}},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["translationloaderactionssubject",{"_index":2382,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationloaderactionstateenum",{"_index":5000,"title":{},"body":{"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["translationloadingservice",{"_index":2452,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translations",{"_index":1620,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"index.html":{}}}],["translationsfailed",{"_index":2383,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationsfailedsubject",{"_index":2384,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationsloaded",{"_index":2385,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationsloading",{"_index":2386,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationspaths",{"_index":2453,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translationssubject",{"_index":2387,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationtype",{"_index":2594,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["tree",{"_index":481,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["treegrid",{"_index":4360,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["trigger",{"_index":1100,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["triggered",{"_index":1699,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxModalService.html":{}}}],["triggering",{"_index":1707,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxWindowService.html":{}}}],["true",{"_index":47,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["trusted",{"_index":3562,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["truth",{"_index":2558,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxToastService.html":{}}}],["try",{"_index":4056,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["ts",{"_index":2470,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"dependencies.html":{}}}],["tuples",{"_index":2959,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["two",{"_index":3167,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["type",{"_index":16,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/functions.html":{}}}],["typed",{"_index":164,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"directives/NgxDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["typedaction",{"_index":165,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["typeof",{"_index":835,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxToastService.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["types",{"_index":729,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["types/toast.types",{"_index":4037,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["typescript",{"_index":3286,"title":{},"body":{"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["typing",{"_index":1354,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["uarr",{"_index":3924,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["ui",{"_index":2111,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["unauthenticated",{"_index":1144,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["uncheck",{"_index":4878,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["undefined",{"_index":1003,"title":{},"body":{"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["under",{"_index":4254,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["underneath",{"_index":2016,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["uniqby",{"_index":4033,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["uniqby(toasts",{"_index":4028,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["unique",{"_index":773,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{}}}],["unknown",{"_index":173,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"pipes/NgxTableGetPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["unless",{"_index":1496,"title":{},"body":{"directives/NgxButtonDirective.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["unload",{"_index":3587,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["unregister",{"_index":2973,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["unscramble",{"_index":3398,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams",{"_index":3378,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams(params",{"_index":3396,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams(value",{"_index":3435,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams?(params",{"_index":3471,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambler",{"_index":3421,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambler(value.sorting",{"_index":3436,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unselect",{"_index":4902,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["unset",{"_index":1286,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["unsorted",{"_index":4949,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["unsubscribe",{"_index":3315,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["until",{"_index":3111,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["unused",{"_index":4780,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["up",{"_index":962,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["upcoming",{"_index":4185,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["update",{"_index":162,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["updateaccordionitemstate",{"_index":1036,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["updateaccordionitemstate(isopen",{"_index":1066,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["updateallvalueandvalidity",{"_index":374,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["updateallvalueandvalidity(form",{"_index":400,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["updateconditions",{"_index":1883,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["updateconditions(conditions",{"_index":1902,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["updated",{"_index":1931,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["updates",{"_index":402,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{}}}],["updatevalueandvalidity",{"_index":405,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["updateview",{"_index":2120,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["updateviewsubject",{"_index":1878,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["upon",{"_index":2181,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["url",{"_index":1161,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/SpecStoreAssets.html":{}}}],["us/docs/web/accessibility/aria/aria_live_regions",{"_index":1911,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["us/docs/web/accessibility/aria/attributes/aria",{"_index":3194,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["us/docs/web/api/broadcastchannel",{"_index":1380,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["use",{"_index":203,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":106,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"classes/NgxI18nAbstractService.html":{},"components/NgxI18nEmptyComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["useexisting",{"_index":256,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["useful",{"_index":2360,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["uselocalstorage",{"_index":1606,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["usemockdataduringtour",{"_index":503,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["user",{"_index":324,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{}}}],["users",{"_index":1281,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"index.html":{}}}],["uses",{"_index":1231,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxTourItemDirective.html":{},"injectables/NgxWindowService.html":{}}}],["using",{"_index":328,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["utilities",{"_index":5059,"title":{},"body":{"index.html":{}}}],["utils",{"_index":26,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["uuid",{"_index":826,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"dependencies.html":{}}}],["v",{"_index":2364,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["v3",{"_index":5070,"title":{},"body":{"index.html":{}}}],["v4",{"_index":825,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["v7",{"_index":4036,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["v=1",{"_index":2366,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["v=1.0.0",{"_index":2367,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["v=1743428073628",{"_index":2369,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["valcke",{"_index":5107,"title":{},"body":{"index.html":{}}}],["valid",{"_index":3594,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{},"classes/NgxValidators.html":{}}}],["validates",{"_index":4522,"title":{},"body":{"classes/NgxValidators.html":{}}}],["validation",{"_index":258,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["validationerrors",{"_index":1990,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxValidators.html":{}}}],["validator",{"_index":30,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["validatorfn",{"_index":4506,"title":{},"body":{"classes/NgxValidators.html":{}}}],["validity",{"_index":403,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["value",{"_index":32,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"pipes/TransformPipe.html":{},"miscellaneous/enumerations.html":{}}}],["value.charat(4",{"_index":221,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value.charat(8",{"_index":224,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value.isempty",{"_index":3910,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["value.isloading",{"_index":3911,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["value.length",{"_index":4876,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["value.match(/^[0",{"_index":3761,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["value.match(/{(.*:.*[,]{0,1",{"_index":3764,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["value.replace(/(.{4})/g",{"_index":470,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["value.replace(/\\./g",{"_index":217,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value.replace(/\\s/g",{"_index":466,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["value.tostring",{"_index":216,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value]).foreach((item",{"_index":2937,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["valuechanges",{"_index":2669,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["valuechanges.asobservable",{"_index":2841,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["valuechanges.next(event?.markerarea?.getstate",{"_index":2837,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["valuechanges.next(marker",{"_index":2844,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["values",{"_index":1982,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{}}}],["van",{"_index":5046,"title":{},"body":{"index.html":{},"license.html":{}}}],["vanilla",{"_index":1613,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"dependencies.html":{}}}],["var",{"_index":517,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["variables",{"_index":56,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["vars",{"_index":4781,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["vat",{"_index":198,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["veire",{"_index":5048,"title":{},"body":{"index.html":{},"license.html":{}}}],["version",{"_index":1369,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"index.html":{},"properties.html":{}}}],["vertical",{"_index":4259,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["very",{"_index":1715,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["videos",{"_index":4656,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["videoserror",{"_index":4668,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["videoserrormessage",{"_index":4669,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["videosloading",{"_index":4670,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["view",{"_index":1922,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["viewchild",{"_index":1092,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["viewchild('celltmpl",{"_index":1796,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{}}}],["viewchild('details",{"_index":1075,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["viewchild('imageelement",{"_index":2713,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["viewchild('summary",{"_index":1089,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["viewchild>('contenttmpl",{"_index":1550,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["viewchild>('steptitle",{"_index":666,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["viewchildren",{"_index":103,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{}}}],["viewchildren(baseformaccessor",{"_index":406,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["viewcontainer",{"_index":1462,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["viewcontainerref",{"_index":1502,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["viewmarkerbase",{"_index":2647,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["viewport",{"_index":4263,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["views",{"_index":2158,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["visible",{"_index":1721,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["visual",{"_index":1101,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["visualize",{"_index":3888,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["visualized",{"_index":3894,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["void",{"_index":317,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["vs",{"_index":3719,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["wait",{"_index":990,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["walkthrough",{"_index":5075,"title":{},"body":{"index.html":{}}}],["want",{"_index":237,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["warn",{"_index":425,"title":{},"body":{"directives/FormAccessorContainer.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["warning",{"_index":378,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["warranties",{"_index":5153,"title":{},"body":{"index.html":{},"license.html":{}}}],["warranty",{"_index":5149,"title":{},"body":{"index.html":{},"license.html":{}}}],["wasn't",{"_index":3132,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["way",{"_index":2110,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStore.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ways",{"_index":1142,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["wcag",{"_index":1548,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["wcag/aria",{"_index":945,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxModalService.html":{}}}],["wcag/wai",{"_index":2697,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["we'll",{"_index":2723,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["we're",{"_index":1726,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["we've",{"_index":1277,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["web",{"_index":3497,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["webcomponent",{"_index":3484,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["webcomponents",{"_index":3487,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["well",{"_index":84,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxConfigurableLayoutItemComponent.html":{}}}],["wen",{"_index":3316,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["went",{"_index":2439,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["weren't",{"_index":3116,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["when.directive.ts",{"_index":4291,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:123",{"_index":4297,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:26",{"_index":4304,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:27",{"_index":4305,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:32",{"_index":4300,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:37",{"_index":4302,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:38",{"_index":4303,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:39",{"_index":4301,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:40",{"_index":4294,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:63",{"_index":4295,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:68",{"_index":4296,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:70",{"_index":4298,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:74",{"_index":4299,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when/tour",{"_index":4290,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["whenactive",{"_index":4312,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["whenever",{"_index":1938,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{}}}],["wheninactive",{"_index":4311,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["whether",{"_index":702,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"index.html":{},"license.html":{}}}],["whilst",{"_index":2441,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["whitespace",{"_index":4249,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["whose",{"_index":2969,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["width",{"_index":4573,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["widthsubject",{"_index":4574,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["wiki",{"_index":5053,"title":{},"body":{"index.html":{}}}],["window",{"_index":1724,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["window.scrolly",{"_index":4649,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["window:beforeunload",{"_index":3585,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["windowservice",{"_index":1381,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["windowservice.runinbrowser",{"_index":3731,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["windowsservice",{"_index":2526,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["windowwidth",{"_index":4615,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["wish",{"_index":194,"title":{},"body":{"pipes/BtwPipe.html":{},"components/MockTourStepComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["wishing",{"_index":1894,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["withcredentials",{"_index":1154,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["within",{"_index":1679,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{}}}],["withlatestfrom",{"_index":4035,"title":{},"body":{"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["withlatestfrom(this.queue",{"_index":4041,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["without",{"_index":209,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["withpositions([this.positionrecord[tooltipposition",{"_index":4207,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["work",{"_index":1355,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["workflow",{"_index":5067,"title":{},"body":{"index.html":{}}}],["works",{"_index":929,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["world",{"_index":497,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/NgxStorageService.html":{}}}],["wouter",{"_index":134,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxModalService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["wrap",{"_index":230,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["wrapped",{"_index":1406,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["wrapper",{"_index":1138,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"index.html":{}}}],["wrapperelement",{"_index":1507,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["wrapperelement.innertext",{"_index":1511,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["wrapperelement.setattribute('class",{"_index":1513,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["wraps",{"_index":1376,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["writable",{"_index":3651,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["writablesignal",{"_index":669,"title":{},"body":{"components/MockTourStepComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["writengxtablevalue",{"_index":4771,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["writevalue",{"_index":4869,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["writevalue(value",{"_index":4871,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["wrong",{"_index":2440,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["wysiwyg",{"_index":3500,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["xxxx.xxx.xxx",{"_index":220,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["y",{"_index":4252,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["yes",{"_index":808,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStoreService.html":{},"classes/NgxValidators.html":{}}}],["yourcomponent",{"_index":3723,"title":{},"body":{"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["youtube",{"_index":4661,"title":{},"body":{"interfaces/SpecStoreAssets.html":{}}}],["yyyy",{"_index":4516,"title":{},"body":{"classes/NgxValidators.html":{}}}],["zone.js",{"_index":5021,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":2667,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["zooming",{"_index":2659,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["zoomlevels",{"_index":2688,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AtLeastOneRequiredValidatorOptions.html":{"url":"interfaces/AtLeastOneRequiredValidatorOptions.html","title":"interface - AtLeastOneRequiredValidatorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AtLeastOneRequiredValidatorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/validators/at-least-one-required/at-least-one-required.validator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            conditionalFunction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            controls\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        conditionalFunction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        conditionalFunction:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        controls\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        controls:     KeyType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyType[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FormGroup } from '@angular/forms';\nimport clean from 'obj-clean';\n\nimport { clearFormError, setFormError } from '../utils';\n\nexport interface AtLeastOneRequiredValidatorOptions {\n\tcontrols?: KeyType[];\n\tconditionalFunction?: (data: any) => boolean;\n}\n\n/**\n * FormGroup validator which checks if either at least one value is filled in\n *\n * @param options - An optional object with configuration options, see below params for more info\n */\nexport const atLeastOneRequiredValidator = (\n\toptions?: AtLeastOneRequiredValidatorOptions\n) => {\n\treturn (group: FormGroup): { atLeastOneRequiredError: true } | null => {\n\t\t// Iben: Get the optional configuration items\n\t\tlet conditionalFunction: (data: any) => boolean;\n\t\tlet keys: KeyType[];\n\n\t\tif (options) {\n\t\t\tconditionalFunction = options.conditionalFunction;\n\t\t\tkeys = options.controls;\n\t\t}\n\t\t// Iben: Setup the needed variables to handle the validator\n\t\tconst cleanedFormValue = clean(group.value);\n\t\tconst cleanedKeys = new Set(Object.keys(cleanedFormValue));\n\t\tconst controls = Object.values(group.controls);\n\t\tconst empty = cleanedKeys.size === 0;\n\n\t\t// Iben: If nothing is filled in, we return an error\n\t\tif (\n\t\t\t(empty && !conditionalFunction) ||\n\t\t\t(empty && conditionalFunction && conditionalFunction(group.value))\n\t\t) {\n\t\t\tfor (const control of controls) {\n\t\t\t\tsetFormError(control, 'required');\n\t\t\t}\n\n\t\t\treturn { atLeastOneRequiredError: true };\n\t\t}\n\n\t\t// Iben: Check if we need to check on a specific key\n\t\tif (keys) {\n\t\t\tconst hasOneKey = keys.reduce((hasOne, key) => hasOne || cleanedKeys.has(key), false);\n\n\t\t\t// Iben: Only return an error when there is no key matched at all\n\t\t\t// and in case of a conditionalFunction if the conditionalFunction is matched as well\n\t\t\tif (\n\t\t\t\t(!hasOneKey && !conditionalFunction) ||\n\t\t\t\t(!hasOneKey && conditionalFunction && conditionalFunction(group.value))\n\t\t\t) {\n\t\t\t\tfor (const key of keys) {\n\t\t\t\t\tsetFormError(group.get(key), 'required');\n\t\t\t\t}\n\n\t\t\t\treturn { atLeastOneRequiredError: true };\n\t\t\t}\n\t\t}\n\n\t\t// Iben: In case there are no errors, clean the required errors and return null\n\t\tfor (const control of controls) {\n\t\t\tclearFormError(control, 'required');\n\t\t}\n\n\t\treturn null;\n\t};\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseFormAccessor.html":{"url":"classes/BaseFormAccessor.html","title":"class - BaseFormAccessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseFormAccessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/base-form/base-form.accessor.ts\n        \n\n\n            \n                Description\n            \n            \n                In order to select all accessors in a FormContainer, we need this base class to pass to our ViewChildren.\nIMPORTANT: This will never be used as an actual functional component\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class BaseFormAccessor {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStore.html":{"url":"interfaces/BaseStore.html","title":"interface - BaseStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            errorMessage\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     StateInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StateInterface\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorMessage:     ErrorInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ErrorInterface\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreActions.html":{"url":"interfaces/BaseStoreActions.html","title":"interface - BaseStoreActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            effects\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:     ActionCreator>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        effects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        effects:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreAssets.html":{"url":"interfaces/BaseStoreAssets.html","title":"interface - BaseStoreAssets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreAssets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            actions\n                                        \n                                \n                                \n                                        \n                                            reducers\n                                        \n                                \n                                \n                                        \n                                            selectors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        actions:         BaseStoreActions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseStoreActions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reducers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reducers:     ActionReducer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionReducer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectors:         BaseStoreSelectors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseStoreSelectors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreAssetsGeneratorOptions.html":{"url":"interfaces/BaseStoreAssetsGeneratorOptions.html","title":"interface - BaseStoreAssetsGeneratorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreAssetsGeneratorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-assets-generator-options.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            initialStateValue\n                                        \n                                \n                                \n                                        \n                                            slice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        initialStateValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialStateValue:     StateInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StateInterface\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        slice:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\n\nexport interface EntityStoreAssetsGeneratorOptions {\n\tslice: string;\n\tselectId?: IdSelector;\n\tinitialStateValue?: StateInterface[];\n}\n\nexport interface BaseStoreAssetsGeneratorOptions {\n\tslice: string;\n\tinitialStateValue?: StateInterface;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreSelectors.html":{"url":"interfaces/BaseStoreSelectors.html","title":"interface - BaseStoreSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            select\n                                        \n                                \n                                \n                                        \n                                            selectError\n                                        \n                                \n                                \n                                        \n                                            selectErrorMessage\n                                        \n                                \n                                \n                                        \n                                            selectLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        select\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        select:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectError:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectErrorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectErrorMessage:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectLoading:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BasicEntityAdapterReducerActions.html":{"url":"interfaces/BasicEntityAdapterReducerActions.html","title":"interface - BasicEntityAdapterReducerActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BasicEntityAdapterReducerActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-adapter-reducers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            add\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        add\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        add:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EntityState } from '@ngrx/entity';\n\n// Iben: actions get typed to any as the type TypedAction from ngrx/store is sadly not exported\ninterface BasicEntityAdapterReducerActions {\n\tadd: any;\n\tset: any;\n\tdelete: any;\n\tupdate: any;\n}\n\nexport type BasicEntityAdapterActions = Partial;\n\nexport interface BasicEntityState extends EntityState {\n\tentityStatus: {\n\t\tloading: boolean;\n\t\terror: boolean;\n\t\terrorMessage: unknown;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BasicEntityState.html":{"url":"interfaces/BasicEntityState.html","title":"interface - BasicEntityState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BasicEntityState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-adapter-reducers.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        EntityState\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entityStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entityStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entityStatus:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EntityState } from '@ngrx/entity';\n\n// Iben: actions get typed to any as the type TypedAction from ngrx/store is sadly not exported\ninterface BasicEntityAdapterReducerActions {\n\tadd: any;\n\tset: any;\n\tdelete: any;\n\tupdate: any;\n}\n\nexport type BasicEntityAdapterActions = Partial;\n\nexport interface BasicEntityState extends EntityState {\n\tentityStatus: {\n\t\tloading: boolean;\n\t\terror: boolean;\n\t\terrorMessage: unknown;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/BtwPipe.html":{"url":"pipes/BtwPipe.html","title":"pipe - BtwPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  BtwPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        btw\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts:13\n                        \n                    \n\n\n            \n                \n                        Converts a BTW number to the correct format\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value we wish to convert\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        BtwPipe\nThe BtwPipe will format Belgian VAT numbers.\nFor example\n474603875 will format to 474.603.875.\nHow to use\n\n    \n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n\tname: 'btw',\n\tstandalone: true,\n})\nexport class BtwPipe implements PipeTransform {\n\t/**\n\t * Converts a BTW number to the correct format\n\t *\n\t * @param value - The value we wish to convert\n\t */\n\tpublic transform(value: string): string {\n\t\tif (!value) {\n\t\t\t// Denis: if the value is falsy, return it without transform.\n\t\t\treturn value;\n\t\t}\n\n\t\tconst addCharAtIndex = (original: string, char: string, index: number): string => {\n\t\t\treturn original.slice(0, index) + char + original.slice(index);\n\t\t};\n\n\t\t// Iben: Convert to string if it's a number\n\t\tvalue = value.toString();\n\n\t\tif (value.replace(/\\./g, '').length === 9) {\n\t\t\tvalue = '0' + value;\n\t\t}\n\n\t\t// Iben: Format: xxxx.xxx.xxx\n\t\tif (value.charAt(4) !== '.') {\n\t\t\tvalue = addCharAtIndex(value, '.', 4);\n\t\t}\n\n\t\tif (value.charAt(8) !== '.') {\n\t\t\tvalue = addCharAtIndex(value, '.', 8);\n\t\t}\n\n\t\treturn value;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComponentTypeWrapper.html":{"url":"interfaces/ComponentTypeWrapper.html","title":"interface - ComponentTypeWrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ComponentTypeWrapper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/utils/accessor-providers/accessor-providers.util.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface to wrap an component class in.\nThis interface is for internal use, as a similar one already exists in the CDK, but we don't want to create a dependency on that for this package.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Provider, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { BaseFormAccessor } from '../../abstracts';\n\n/**\n * An interface to wrap an component class in.\n *\n * This interface is for internal use, as a similar one already exists in the CDK, but we don't want to create a dependency on that for this package.\n */\ninterface ComponentTypeWrapper {\n\tnew (...args: any[]): ComponentType;\n}\n\n/**\n * Generates the necessary providers for a (Data)FormAccessor.\n *\n * @param  component - The component class of the (Data)FormAccessor\n */\nexport const createAccessorProviders = (\n\tcomponent: ComponentTypeWrapper\n): Provider[] => {\n\treturn [\n\t\t// Iben: Generate a provider for the control handling\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: forwardRef(() => component),\n\t\t\tmulti: true,\n\t\t},\n\t\t// Iben: Generate a provider for the validation handling\n\t\t{\n\t\t\tprovide: NG_VALIDATORS,\n\t\t\tuseExisting: forwardRef(() => component),\n\t\t\tmulti: true,\n\t\t},\n\t\t// Iben: Generate a provider for the FormContainer handling\n\t\t{\n\t\t\tprovide: BaseFormAccessor,\n\t\t\tuseExisting: forwardRef(() => component),\n\t\t},\n\t];\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EffectsService.html":{"url":"injectables/EffectsService.html","title":"injectable - EffectsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EffectsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/effects.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fetchChannel\n                            \n                            \n                                    Public\n                                fetchVideos\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchChannel(isPublic: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/effects.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isPublic\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchVideos(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/effects.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DataType } from './store-assets';\nimport { mockChannel, mockPrivateChannel, mockVideos } from './store.spec';\n\n@Injectable()\nexport class EffectsService {\n\tpublic fetchChannel(isPublic: boolean): Observable {\n\t\tif (isPublic) {\n\t\t\treturn of(mockChannel);\n\t\t}\n\n\t\treturn of(mockPrivateChannel);\n\t}\n\n\tpublic fetchVideos(id: string): Observable {\n\t\treturn of(mockVideos);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreActions.html":{"url":"interfaces/EntityStoreActions.html","title":"interface - EntityStoreActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-store-assets.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            add\n                                        \n                                \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            effects\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        add\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        add:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:     ActionCreator>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        effects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        effects:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n\tActionReducer,\n\tAction,\n\tMemoizedSelector,\n\tDefaultProjectorFn,\n\tActionCreator,\n} from '@ngrx/store';\n\nimport { EntityStoreEffectsInterface } from './effects';\nimport { BasicEntityState } from './entity-adapter-reducers';\n\nexport interface EntityStoreAssets {\n\treducers: ActionReducer, Action>;\n\tselectors: EntityStoreSelectors;\n\tactions: EntityStoreActions;\n}\n\nexport interface EntityStoreSelectors {\n\tselectAll: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\nexport interface EntityStoreActions {\n\tadd: ActionCreator { payload: StateInterface | StateInterface[] } & Action\n\t>;\n\tset: ActionCreator { payload: StateInterface[] } & Action\n\t>;\n\tupdate: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tdelete: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tadd: ActionCreator { payload: EffectsInterface['add'] } & Action\n\t\t>;\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t\tupdate: ActionCreator { payload: EffectsInterface['update'] } & Action\n\t\t>;\n\t\tdelete: ActionCreator { payload: EffectsInterface['delete'] } & Action\n\t\t>;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreAssets.html":{"url":"interfaces/EntityStoreAssets.html","title":"interface - EntityStoreAssets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreAssets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-store-assets.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            actions\n                                        \n                                \n                                \n                                        \n                                            reducers\n                                        \n                                \n                                \n                                        \n                                            selectors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        actions:         EntityStoreActions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreActions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reducers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reducers:         ActionReducer | Action>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionReducer | Action>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectors:         EntityStoreSelectors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreSelectors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n\tActionReducer,\n\tAction,\n\tMemoizedSelector,\n\tDefaultProjectorFn,\n\tActionCreator,\n} from '@ngrx/store';\n\nimport { EntityStoreEffectsInterface } from './effects';\nimport { BasicEntityState } from './entity-adapter-reducers';\n\nexport interface EntityStoreAssets {\n\treducers: ActionReducer, Action>;\n\tselectors: EntityStoreSelectors;\n\tactions: EntityStoreActions;\n}\n\nexport interface EntityStoreSelectors {\n\tselectAll: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\nexport interface EntityStoreActions {\n\tadd: ActionCreator { payload: StateInterface | StateInterface[] } & Action\n\t>;\n\tset: ActionCreator { payload: StateInterface[] } & Action\n\t>;\n\tupdate: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tdelete: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tadd: ActionCreator { payload: EffectsInterface['add'] } & Action\n\t\t>;\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t\tupdate: ActionCreator { payload: EffectsInterface['update'] } & Action\n\t\t>;\n\t\tdelete: ActionCreator { payload: EffectsInterface['delete'] } & Action\n\t\t>;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreAssetsGeneratorOptions.html":{"url":"interfaces/EntityStoreAssetsGeneratorOptions.html","title":"interface - EntityStoreAssetsGeneratorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreAssetsGeneratorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-assets-generator-options.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            initialStateValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            selectId\n                                        \n                                \n                                \n                                        \n                                            slice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        initialStateValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialStateValue:     StateInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StateInterface[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectId:     IdSelector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IdSelector\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        slice:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\n\nexport interface EntityStoreAssetsGeneratorOptions {\n\tslice: string;\n\tselectId?: IdSelector;\n\tinitialStateValue?: StateInterface[];\n}\n\nexport interface BaseStoreAssetsGeneratorOptions {\n\tslice: string;\n\tinitialStateValue?: StateInterface;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreSelectors.html":{"url":"interfaces/EntityStoreSelectors.html","title":"interface - EntityStoreSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-store-assets.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            selectAll\n                                        \n                                \n                                \n                                        \n                                            selectError\n                                        \n                                \n                                \n                                        \n                                            selectErrorMessage\n                                        \n                                \n                                \n                                        \n                                            selectLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        selectAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectAll:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectError:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectErrorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectErrorMessage:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectLoading:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n\tActionReducer,\n\tAction,\n\tMemoizedSelector,\n\tDefaultProjectorFn,\n\tActionCreator,\n} from '@ngrx/store';\n\nimport { EntityStoreEffectsInterface } from './effects';\nimport { BasicEntityState } from './entity-adapter-reducers';\n\nexport interface EntityStoreAssets {\n\treducers: ActionReducer, Action>;\n\tselectors: EntityStoreSelectors;\n\tactions: EntityStoreActions;\n}\n\nexport interface EntityStoreSelectors {\n\tselectAll: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\nexport interface EntityStoreActions {\n\tadd: ActionCreator { payload: StateInterface | StateInterface[] } & Action\n\t>;\n\tset: ActionCreator { payload: StateInterface[] } & Action\n\t>;\n\tupdate: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tdelete: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tadd: ActionCreator { payload: EffectsInterface['add'] } & Action\n\t\t>;\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t\tupdate: ActionCreator { payload: EffectsInterface['update'] } & Action\n\t\t>;\n\t\tdelete: ActionCreator { payload: EffectsInterface['delete'] } & Action\n\t\t>;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/FocusClickDirective.html":{"url":"directives/FocusClickDirective.html","title":"directive - FocusClickDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  FocusClickDirective\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [focusClick]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                disabled\n                            \n                            \n                                    Public\n                                    Readonly\n                                focusClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                isClicked\n                            \n                            \n                                    \n                                    Public\n                                isEntered\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                keydown.enter\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:12\n                            \n                        \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:28\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.enter\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:37\n                \n            \n\n\n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isClicked\n                        \n                    \n                \n            \n            \n                \n                        \n                    isClicked(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isEntered\n                        \n                    \n                \n            \n            \n                \n                        \n                    isEntered()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.enter')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        disabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        focusClick\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:24\n                        \n                    \n\n            \n                \n                    This directive replaces the default click directive and allows the user to execute\nthe click event by clicking the mouse and  by using the enter key on focus.\nA tabindex of 0 gets added to the host.\n\n                \n            \n\n        \n    \n\n\n\n    \n\n    \n        FocusClickDirective\nThe FocusClickDirective provides an a11y friendly click handler.\nThis directive replaces the default click directive and allows the user to execute\nthe click event by clicking the mouse and by using the enter key on focus.\nHow to use\nExample :\n    My Button\n\n    \n\n    \n        import { Directive, HostListener, OutputEmitterRef, input, output } from '@angular/core';\n\n@Directive({\n\tselector: '[focusClick]',\n\tstandalone: true,\n\thost: {\n\t\t'[attr.tabIndex]': '0',\n\t},\n})\nexport class FocusClickDirective {\n\t// Allow the button to ignore click events when set to true\n\tpublic readonly disabled = input(false);\n\n\t// Allow the function passed by the host to be executed\n\t// when the emit() method gets called\n\t/**\n\t * This directive replaces the default `click` directive and allows the user to execute\n\t * the `click` event by clicking the mouse **and**  by using the `enter` key on focus.\n\t *\n\t * A tabindex of `0` gets added to the host.\n\t *\n\t * @memberof FocusClickDirective\n\t */\n\tpublic readonly focusClick: OutputEmitterRef = output();\n\n\t// Add eventhandler to the click event\n\t@HostListener('click', ['$event'])\n\tpublic isClicked(event: Event): void {\n\t\tif (!this.disabled()) {\n\t\t\tthis.focusClick.emit(event);\n\t\t}\n\t}\n\n\t// Add eventhandler to keydown event When enter is pressed and the event\n\t// isn't blocked, execute the click function of the host\n\t@HostListener('keydown.enter')\n\tpublic isEntered(): void {\n\t\tif (!this.disabled()) {\n\t\t\tthis.focusClick.emit();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/FormAccessorContainer.html":{"url":"directives/FormAccessorContainer.html","title":"directive - FormAccessorContainer","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  FormAccessorContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                accessors\n                            \n                            \n                                    Protected\n                                    Readonly\n                                destroyed$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleAccessorsAction\n                            \n                            \n                                    Public\n                                markAllAsDirty\n                            \n                            \n                                    Public\n                                markAllAsTouched\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                updateAllValueAndValidity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleAccessorsAction\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleAccessorsAction(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:85\n                        \n                    \n\n\n            \n                \n                        Handle the accessors action of the FormContainer and throw a warning if no accessors are provided\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAllAsDirty\n                        \n                    \n                \n            \n            \n                \n                    This method should no longer be used, use the markAsDirty on the form itself instead\n\nMarks the form and all the inputs of every subsequent form-accessors as dirty\n                \n            \n            \n                \n                        \n                    markAllAsDirty(form: AbstractControl, options: FormStateOptionsEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:33\n                        \n                    \n\n\n            \n                \n                        Marks the form and all the inputs of every subsequent form-accessors as dirty\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe form used in the component\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FormStateOptionsEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    \nOptions passed to the form state changer\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAllAsTouched\n                        \n                    \n                \n            \n            \n                \n                    This method should no longer be used, use the markAsTouched on the form itself instead\n\nMarks the form and all the inputs of every subsequent form-accessors as touched\n                \n            \n            \n                \n                        \n                    markAllAsTouched(form: AbstractControl, options: FormStateOptionsEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:47\n                        \n                    \n\n\n            \n                \n                        Marks the form and all the inputs of every subsequent form-accessors as touched\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe form used in the component\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FormStateOptionsEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    \nOptions passed to the form state changer\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:75\n                        \n                    \n\n\n            \n                \n                        Handle the destroy state of the component\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateAllValueAndValidity\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAllValueAndValidity(form: AbstractControl, options: FormStateOptionsEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:59\n                        \n                    \n\n\n            \n                \n                        Updates the value and validity of the form and all the inputs of every subsequent form-accessors\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe provided forms\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FormStateOptionsEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    \nOptions passed to the updateValueAndValidity\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        accessors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChildren(BaseFormAccessor)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:18\n                        \n                    \n\n            \n                \n                    A list of all DataFormAccessors en FormAccessors of this component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:23\n                        \n                    \n\n            \n                \n                    Destroyed state of the component\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, OnDestroy, viewChildren } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { FormStateOptionsEntity } from '../../interfaces';\nimport {\n\thandleFormAccessorMarkAsDirty,\n\thandleFormAccessorMarkAsTouched,\n\thandleFormAccessorUpdateValueAndValidity,\n} from '../../utils';\nimport { BaseFormAccessor } from '../base-form/base-form.accessor';\n\n@Directive()\nexport class FormAccessorContainer implements OnDestroy {\n\t/**\n\t * A list of all DataFormAccessors en FormAccessors of this component\n\t */\n\treadonly accessors = viewChildren(BaseFormAccessor);\n\n\t/**\n\t * Destroyed state of the component\n\t */\n\tprotected readonly destroyed$ = new Subject();\n\n\t/**\n\t * @deprecated This method should no longer be used, use the markAsDirty on the form itself instead\n\t *\n\t * Marks the form and all the inputs of every subsequent form-accessors as dirty\n\t *\n\t * @param  form - The form used in the component\n\t * @param options - Options passed to the form state changer\n\t */\n\tpublic markAllAsDirty(form: AbstractControl, options: FormStateOptionsEntity = {}): void {\n\t\tthis.handleAccessorsAction(() => {\n\t\t\thandleFormAccessorMarkAsDirty(form, this.accessors() as any || [], options);\n\t\t});\n\t}\n\n\t/**\n\t * @deprecated This method should no longer be used, use the markAsTouched on the form itself instead\n\t *\n\t * Marks the form and all the inputs of every subsequent form-accessors as touched\n\t *\n\t * @param  form - The form used in the component\n\t * @param options - Options passed to the form state changer\n\t */\n\tpublic markAllAsTouched(form: AbstractControl, options: FormStateOptionsEntity = {}): void {\n\t\tthis.handleAccessorsAction(() => {\n\t\t\thandleFormAccessorMarkAsTouched(form, this.accessors() as any || [], options);\n\t\t});\n\t}\n\n\t/**\n\t * Updates the value and validity of the form and all the inputs of every subsequent form-accessors\n\t *\n\t * @param form - The provided forms\n\t * @param options - Options passed to the updateValueAndValidity\n\t */\n\tpublic updateAllValueAndValidity(\n\t\tform: AbstractControl,\n\t\toptions: FormStateOptionsEntity = {}\n\t): void {\n\t\tthis.handleAccessorsAction(() => {\n\t\t\thandleFormAccessorUpdateValueAndValidity(\n\t\t\t\tform,\n\t\t\t\tthis.accessors() as any || [],\n\t\t\t\toptions\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Handle the destroy state of the component\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.destroyed$.next(undefined);\n\t\tthis.destroyed$.complete();\n\t}\n\n\t/**\n\t * Handle the accessors action of the FormContainer and throw a warning if no accessors are provided\n\t *\n\t * @param  action - The provided action\n\t */\n\tprivate handleAccessorsAction(action: () => void) {\n\t\t// Iben: Throw a warn in case there are no accessors found\n\t\tconst accessors = this.accessors();\n  if (!accessors || accessors.length === 0) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxForms: No (Data)FormAccessors were found in this component. Check if each (Data)FormAccessor also provides the BaseFormAccessor in its providers array. If this is intentional, this warning can be ignored.'\n\t\t\t);\n\t\t}\n\n\t\t// Iben: Handle the provided action\n\t\taction();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormStateOptionsEntity.html":{"url":"interfaces/FormStateOptionsEntity.html","title":"interface - FormStateOptionsEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FormStateOptionsEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/interfaces/form-state-options.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            emitEvent\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onlySelf\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        emitEvent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emitEvent:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onlySelf\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onlySelf:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FormStateOptionsEntity {\n\tonlySelf?: boolean;\n\temitEvent?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/HasObserversPipe.html":{"url":"pipes/HasObserversPipe.html","title":"pipe - HasObserversPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  HasObserversPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/has-observers/has-observers.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        hasObservers\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(output: EventEmitter<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/has-observers/has-observers.pipe.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                output\n                                            \n                                                        EventEmitter<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        HasObserversPipe\nThe HasObserversPipe will check if an Output property has observers.\nHow to use\nExample :\n  {{ somethingHasCompleted | hasObservers }}\nExample :@Component({\n    templateUrl: './my-component.component.html',\n    selector: 'my-component',\n})\nexport class MyComponent {\n    @Ouput() public somethingHasCompleted: EventEmitter = EventEmitter();\n}If a parent subscribes to the EventEmitter, hasObservers will return true\nExample :\n    \n\n    \n        import { Pipe, PipeTransform, EventEmitter } from '@angular/core';\n\n@Pipe({\n\tname: 'hasObservers',\n\tstandalone: true,\n})\nexport class HasObserversPipe implements PipeTransform {\n\tpublic transform(output: EventEmitter): boolean {\n\t\treturn output && output.observers.length > 0;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/IbanPipe.html":{"url":"pipes/IbanPipe.html","title":"pipe - IbanPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  IbanPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        IBAN\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        IbanPipe\nThe IbanPipe will format an IBAN number.\nFor example\nBE62510007547061 will format to BE62 5100 0754 7061.\nHow to use\nExample :\n  {{ ibanNumber | IBAN }}\n\n    \n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n\tname: 'IBAN',\n\tstandalone: true,\n})\nexport class IbanPipe implements PipeTransform {\n\tpublic transform(value = ''): string {\n\t\tvalue = value.replace(/\\s/g, ''); // replace all spaces\n\n\t\tlet reformat = value.replace(/(.{4})/g, function (match) {\n\t\t\treturn match + ' '; // reformat into groups of 4 succeeded with a space\n\t\t});\n\n\t\treformat = reformat.trim(); // remove trailing space\n\n\t\treturn reformat;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MockTourHolderComponent.html":{"url":"components/MockTourHolderComponent.html","title":"component - MockTourHolderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MockTourHolderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                mock-tour-holder\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                data$\n                            \n                            \n                                    Private\n                                    Readonly\n                                dataSourceSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                startTour\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        startTour\n                        \n                    \n                \n            \n            \n                \n                        \n                    startTour()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.dataSourceSubject\n\t\t.asObservable()\n\t\t.pipe(useMockDataDuringTour('World hello!'))\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dataSourceSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('Hello world!')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { useMockDataDuringTour } from '../operators';\nimport { NgxTourService } from '../services';\n\n// Iben: This mock tour holder is used in the test to test the useMockDataDuringTour operator\n@Component({\n\tselector: 'mock-tour-holder',\n\ttemplate: '',\n\tstandalone: true,\n})\nexport class MockTourHolderComponent {\n\tprivate readonly tourService = inject(NgxTourService);\n\n\tprivate readonly dataSourceSubject = new BehaviorSubject('Hello world!');\n\n\tpublic readonly data$ = this.dataSourceSubject\n\t\t.asObservable()\n\t\t.pipe(useMockDataDuringTour('World hello!'));\n\n\tpublic startTour() {\n\t\tthis.tourService.startTour([{ title: 'Mock', content: 'Mock' }]).subscribe();\n\t}\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'MockTourHolderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MockTourStepComponent.html":{"url":"components/MockTourStepComponent.html","title":"component - MockTourStepComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MockTourStepComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/inform/src/lib/mocks/tour-step.component.mock.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxTourStepComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                mock-tour-step-component\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                amountOfSteps\n                            \n                            \n                                    Public\n                                    Readonly\n                                content\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentStep\n                            \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                elementId\n                            \n                            \n                                    Public\n                                handleInteraction\n                            \n                            \n                                    Public\n                                    Readonly\n                                position\n                            \n                            \n                                    \n                                    Protected\n                                rootClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                stepClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                titleElement\n                            \n                            \n                                    Public\n                                titleId\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    \n                                    Public\n                                onEscape\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                amountOfSteps\n                            \n                            \n                                content\n                            \n                            \n                                currentStep\n                            \n                            \n                                data\n                            \n                            \n                                elementId\n                            \n                            \n                                stepClass\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:keydown.escape\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        amountOfSteps\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:83\n\n                            \n                        \n                \n                    \n                        The total amount of steps\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:73\n\n                            \n                        \n                \n                    \n                        The content of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        currentStep\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:78\n\n                            \n                        \n                \n                    \n                        The index of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:88\n\n                            \n                        \n                \n                    \n                        Optional data we wish to use in a step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        elementId\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:53\n\n                            \n                        \n                \n                    \n                        The id of the element that the tour-step describes\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        stepClass\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:93\n\n                            \n                        \n                \n                    \n                        A custom step class we can set\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:68\n\n                            \n                        \n                \n                    \n                        The title of the step\n\n                    \n                \n            \n        \n\n\n    \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:45\n\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:keydown.escape\n                        \n                    \n                \n            \n            \n                \ndocument:keydown.escape()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:38\n\n                        \n                    \n\n\n            \n                \n                        Close the tour on escape pressed\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:112\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:105\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:38\n\n                        \n                    \n\n\n            \n                \n                        Close the tour on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        amountOfSteps\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:83\n\n                        \n                    \n\n            \n                \n                    The total amount of steps\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        content\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:73\n\n                        \n                    \n\n            \n                \n                    The content of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentStep\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:78\n\n                        \n                    \n\n            \n                \n                    The index of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:88\n\n                        \n                    \n\n            \n                \n                    Optional data we wish to use in a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementId\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:53\n\n                        \n                    \n\n            \n                \n                    The id of the element that the tour-step describes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleInteraction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:98\n\n                        \n                    \n\n            \n                \n                    Emits the possible interactions with a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:63\n\n                        \n                    \n\n            \n                \n                    The position of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Protected\n                        rootClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:45\n\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        stepClass\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:93\n\n                        \n                    \n\n            \n                \n                    A custom step class we can set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:68\n\n                        \n                    \n\n            \n                \n                    The title of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        titleElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild>('stepTitle')\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:58\n\n                        \n                    \n\n            \n                \n                    The element of the tour-step that is seen as the title\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        titleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal('')\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:103\n\n                        \n                    \n\n            \n                \n                    The aria-labelledby id of the title element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:33\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\nimport { NgxTourStepComponent } from '../abstracts';\n\n// Iben: This mock tour step component can be used where needed\n@Component({\n\tselector: 'mock-tour-step-component',\n\ttemplate: '',\n\tstandalone: true,\n})\nexport class MockTourStepComponent extends NgxTourStepComponent {}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'MockTourStepComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAbstractTableCellDirective.html":{"url":"directives/NgxAbstractTableCellDirective.html","title":"directive - NgxAbstractTableCellDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAbstractTableCellDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/components/cell/cell.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        ngx-abstract-table-cell\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cellClass\n                            \n                            \n                                    Public\n                                cellTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                footerTemplate\n                            \n                            \n                                    Public\n                                headerTemplate\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:31\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:42\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:47\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:36\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:57\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:82\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:91\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:26\n                        \n                    \n\n            \n                \n                    An optional class that can be set for the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:31\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:42\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:47\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:19\n                        \n                    \n\n            \n                \n                    The templates used to set in the table\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:52\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:36\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:14\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, OutputEmitterRef, TemplateRef, input, output } from '@angular/core';\n\nimport { NgxTableSortDirection } from '../../enums/sort-direction.enum';\nimport { NgxTableCypressDataTags, NgxTableSortEvent } from '../../types';\n\n@Directive({\n\tselector: 'ngx-abstract-table-cell',\n\tstandalone: true,\n})\nexport class NgxAbstractTableCellDirective {\n\t/**\n\t * The current sortDirection of the cell\n\t */\n\tpublic sortDirection: NgxTableSortDirection | null = null;\n\n\t/**\n\t * The templates used to set in the table\n\t */\n\tpublic footerTemplate: TemplateRef;\n\tpublic headerTemplate: TemplateRef;\n\tpublic cellTemplate: TemplateRef;\n\n\t/**\n\t * An optional class that can be set for the cell\n\t */\n\tpublic cellClass: string;\n\n\t/**\n\t * The name of the column we want this cell to represent\n\t */\n\tpublic readonly column = input.required();\n\n\t/**\n\t * Whether or not the cell is sortable\n\t */\n\tpublic readonly sortable = input(false);\n\n\t/**\n\t * A tag that can be added to a column in the table, set according to the cypress best practices\n\t * See https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\t */\n\tpublic readonly cypressDataTags = input();\n\n\t/**\n\t * Whether the content of a cell is editable. By default, this is set to false\n\t */\n\tpublic readonly editable = input(false);\n\n\t/**\n\t * Emits the sortable event if a column is sortable\n\t */\n\tpublic sort: OutputEmitterRef = output();\n\n\t/**\n\t * Handles the sorting click events\n\t */\n\tpublic handleSort(): void {\n\t\t// Iben: Setup the sort direction\n\t\tlet newSortDirection = NgxTableSortDirection.ASCENDING;\n\n\t\t// Iben: If a an existing sorting direction exists, we switch based on the ones we have\n\t\tif (this.sortDirection) {\n\t\t\tnewSortDirection =\n\t\t\t\tthis.sortDirection === NgxTableSortDirection.ASCENDING\n\t\t\t\t\t? NgxTableSortDirection.DESCENDING\n\t\t\t\t\t: NgxTableSortDirection.ASCENDING;\n\t\t}\n\n\t\t// Iben: Set the internal sorting direction\n\t\tthis.setSortDirection(newSortDirection);\n\n\t\t// Iben: Emit the sorting event\n\t\tthis.sort.emit({\n\t\t\tdirection: this.sortDirection,\n\t\t\tcolumn: this.column(),\n\t\t});\n\t}\n\n\t/**\n\t * Resets the sort direction back to null\n\t */\n\tpublic resetSortDirection(): void {\n\t\tthis.sortDirection = null;\n\t}\n\n\t/**\n\t * Sets the sorting direction based on the provided direction\n\t *\n\t * @param direction - The provided direction\n\t */\n\tpublic setSortDirection(direction: NgxTableSortDirection): void {\n\t\tthis.sortDirection = direction;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{"url":"directives/NgxAccessibleAbstractDragAndDropItemDirective.html","title":"directive - NgxAccessibleAbstractDragAndDropItemDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAccessibleAbstractDragAndDropItemDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop-item.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class to avoid circular dependency with the ItemDirective and the HostDirective\n\n            \n\n            \n                Extends\n            \n            \n                            NgxHasFocusDragAndDropAbstractDirective\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                itemId\n                            \n                            \n                                    Public\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                markAsActive\n                            \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                    Optional\n                                onBlur\n                            \n                            \n                                    Public\n                                    Optional\n                                onFocus\n                            \n                            \n                                    \n                                    Public\n                                removeFocus\n                            \n                            \n                                    \n                                    Public\n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDragAndDropAbstractDirective:31\n\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDragAndDropAbstractDirective:20\n\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        markAsActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsActive()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop-item.directive.ts:18\n                        \n                    \n\n\n            \n                \n                         Marks the item as focussed and selected\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:41\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:54\n\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onBlur\n                        \n                    \n                \n            \n            \n                \n                        \n                    onBlur()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:45\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    onFocus()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:47\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:31\n\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:20\n\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        itemId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop-item.directive.ts:13\n                        \n                    \n\n            \n                \n                    An unique id of the draggable item\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject( ElementRef )\n                    \n                \n                        \n                            \n                                Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:39\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:15\n\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, Signal } from '@angular/core';\n\nimport { NgxHasFocusDragAndDropAbstractDirective } from './has-focus.directive';\n\n/**\n * An abstract class to avoid circular dependency with the ItemDirective and the HostDirective\n */\n@Directive()\nexport abstract class NgxAccessibleAbstractDragAndDropItemDirective extends NgxHasFocusDragAndDropAbstractDirective {\n\t/**\n\t * An unique id of the draggable item\n\t */\n\tabstract itemId: Signal;\n\n\t/**\n\t *  Marks the item as focussed and selected\n\t */\n\tabstract markAsActive(): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxAccessibleDragAndDropAbstractService.html":{"url":"classes/NgxAccessibleDragAndDropAbstractService.html","title":"class - NgxAccessibleDragAndDropAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxAccessibleDragAndDropAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service that is used to make drag and drop components accessible for assistive technologies\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                customMessages\n                            \n                            \n                                    Private\n                                    Readonly\n                                liveRegionService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setDragAndDropDescription\n                            \n                            \n                                    Public\n                                setMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                                \n                                    messageRecord\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        customMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:32\n                        \n                    \n\n            \n                \n                    A custom set of messages used for the drag and drop events.\n Please check the readme for more information on what is necessary to make these messages accessible.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        liveRegionService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LiveAnnouncer\n\n                    \n                \n                \n                    \n                        Default value : inject(LiveAnnouncer)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:20\n                        \n                    \n\n            \n                \n                    The live region service\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setDragAndDropDescription\n                        \n                    \n                \n            \n            \n                \n                        \n                    setDragAndDropDescription(parent: HTMLElement, description?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:119\n                        \n                    \n\n\n            \n                \n                        Adds a description to the drag and drop host explaining how the drag and drop functions\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                parent\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe drag and drop host\n\n\n                                            \n                                        \n                                        \n                                                description\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional description used to overwrite the default description\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    setMessage(message: NgxAccessibleDragAndDropMessage)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Sets a message to the live region\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            NgxAccessibleDragAndDropMessage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided message\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:25\n                                \n                            \n                    \n                        \n                                A method that passes the current language, can either be a string or an Observable\n\n\n                                \n                                    Returns :     string | Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        messageRecord\n                    \n                \n\n                \n                    \n                        getmessageRecord()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:161\n                                \n                            \n                    \n                        \n                                Returns the custom message record or the default when no custom record was provided\n\n\n                                \n                                    Returns :         Record\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { inject } from '@angular/core';\nimport { filter, map, Observable, of, take, tap } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxAccessibleDragAndDropMessageRecords } from '../../const';\nimport {\n\tNgxAccessibleDragAndDropMessage,\n\tNgxAccessibleDragAndDropMessageRecord,\n} from '../../types';\nimport { hideElement } from '../../utils';\n\n/**\n * An abstract service that is used to make drag and drop components accessible for assistive technologies\n */\nexport abstract class NgxAccessibleDragAndDropAbstractService {\n\t/**\n\t * The live region service\n\t */\n\tprivate readonly liveRegionService: LiveAnnouncer = inject(LiveAnnouncer);\n\n\t/**\n\t * A method that passes the current language, can either be a string or an Observable\n\t */\n\tabstract get currentLanguage(): string | Observable;\n\n\t/**\n\t * A custom set of messages used for the drag and drop events.\n\t *\n\t *  Please check the readme for more information on what is necessary to make these messages accessible.\n\t */\n\tpublic customMessages: Record;\n\n\t/**\n\t * Sets a message to the live region\n\t *\n\t * @param message - The provided message\n\t */\n\tpublic setMessage(message: NgxAccessibleDragAndDropMessage): Observable {\n\t\t// Iben: If no language was set, we early exit\n\t\tif (!this.currentLanguage) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxAccessibleDragAndDropAbstractService: No language was provided, so no message could be set.'\n\t\t\t);\n\n\t\t\treturn of();\n\t\t}\n\n\t\t// Iben: Take the current language to fetch the message\n\t\treturn (\n\t\t\ttypeof this.currentLanguage === 'string'\n\t\t\t\t? of(this.currentLanguage)\n\t\t\t\t: this.currentLanguage\n\t\t).pipe(\n\t\t\tfilter(Boolean),\n\t\t\ttake(1),\n\t\t\ttap((currentLanguage) => {\n\t\t\t\t// Iben: Fetch the necessary data\n\t\t\t\tconst { type, data } = message;\n\n\t\t\t\tlet result: string = this.messageRecord[currentLanguage][type];\n\n\t\t\t\t// Iben: If no message was found, we early exit and throw an error\n\t\t\t\tif (!result) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'NgxAccessibleDragAndDropAbstractService: No message for the corresponding drag and drop event was found.'\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Replace the necessary substrings\n\t\t\t\tif (type === 'selected' || type === 'deselected' || type === 'cancelled') {\n\t\t\t\t\tresult = result.replace(\n\t\t\t\t\t\t'{{#item}}',\n\t\t\t\t\t\tdata.itemLabel || `${this.messageRecord[currentLanguage].item} ${data.item}`\n\t\t\t\t\t);\n\t\t\t\t} else if (type === 'moved') {\n\t\t\t\t\tresult = result\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t'{{#item}}',\n\t\t\t\t\t\t\tdata.itemLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].item} ${data.item}`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t`{{#from}}`,\n\t\t\t\t\t\t\tdata.fromLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].container} ${data.from}`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t`{{#to}}`,\n\t\t\t\t\t\t\tdata.toLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].container} ${data.to}`\n\t\t\t\t\t\t);\n\t\t\t\t} else if (type === 'reordered') {\n\t\t\t\t\tresult = result\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t'{{#item}}',\n\t\t\t\t\t\t\tdata.itemLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].item} ${data.item}`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.replace(`{{#from}}`, data.from)\n\t\t\t\t\t\t.replace(`{{#to}}`, data.to);\n\t\t\t\t}\n\n\t\t\t\t// Iben: Update the message in the live region\n\t\t\t\tthis.liveRegionService.announce(result);\n\t\t\t}),\n\t\t\tmap(() => null)\n\t\t);\n\t}\n\n\t/**\n\t * Adds a description to the drag and drop host explaining how the drag and drop functions\n\t *\n\t * @param  parent - The drag and drop host\n\t * @param description - An optional description used to overwrite the default description\n\t */\n\tpublic setDragAndDropDescription(parent: HTMLElement, description?: string): Observable {\n\t\t// Iben: Create the description element and its id\n\t\tconst element: HTMLParagraphElement = document.createElement('p');\n\t\tconst id: string = uuid();\n\n\t\t// Iben: Take the current language to fetch the message\n\t\treturn (\n\t\t\ttypeof this.currentLanguage === 'string'\n\t\t\t\t? of(this.currentLanguage)\n\t\t\t\t: this.currentLanguage\n\t\t).pipe(\n\t\t\ttap((language: string) => {\n\t\t\t\t// Iben: Get the description text\n\t\t\t\tconst text = description || this.messageRecord[language].description;\n\n\t\t\t\t// Iben: If no description was found, we early exit and throw an error\n\t\t\t\tif (!text) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'NgxAccessibleDragAndDropAbstractService: No description for the drag and drop container was found.'\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Set the description and id of the element\n\t\t\t\telement.innerText = text;\n\t\t\t\telement.setAttribute('id', id);\n\n\t\t\t\t// Iben: Attach the element to the parent and update the aria id\n\t\t\t\tparent.appendChild(element);\n\t\t\t\tparent.setAttribute('aria-describedby', id);\n\n\t\t\t\t// Iben: Hide element\n\t\t\t\thideElement(element);\n\t\t\t}),\n\t\t\tmap(() => null)\n\t\t);\n\t}\n\n\t/**\n\t * Returns the custom message record or the default when no custom record was provided\n\t */\n\tprivate get messageRecord(): Record {\n\t\treturn this.customMessages || NgxAccessibleDragAndDropMessageRecords;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{"url":"interfaces/NgxAccessibleDragAndDropBaseMessage.html","title":"interface - NgxAccessibleDragAndDropBaseMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAccessibleDragAndDropBaseMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     KeyType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type NgxAccessibleDragAndDropFromToMessage =\n\t| `${string}{{#item}}${string}{{#to}}${string}{{#from}}${string}`\n\t| `${string}{{#item}}${string}{{#from}}${string}{{#to}}${string}`\n\t| `${string}{{#to}}${string}{{#item}}${string}{{#from}}${string}`\n\t| `${string}{{#to}}${string}{{#from}}${string}{{#item}}${string}`\n\t| `${string}{{#from}}${string}{{#item}}${string}{{#to}}${string}`\n\t| `${string}{{#from}}${string}{{#to}}${string}{{#item}}${string}`;\n\nexport interface NgxAccessibleDragAndDropMessageRecord {\n\tselected: `${string}{{#item}}${string}`;\n\tdeselected: `${string}{{#item}}${string}`;\n\treordered: NgxAccessibleDragAndDropFromToMessage;\n\tmoved: NgxAccessibleDragAndDropFromToMessage;\n\tcancelled: `${string}{{#item}}${string}`;\n\titem: string;\n\tcontainer: string;\n\tdescription: string;\n}\n\nexport type NgxAccessibleDragAndDropMoveType = 'reordered' | 'moved';\n\ninterface NgxAccessibleDragAndDropBaseMessage {\n\ttype: KeyType;\n\tdata: DataType;\n}\n\nexport type NgxAccessibleDragAndDropMessage =\n\t| NgxAccessibleDragAndDropBaseMessage\n\t| NgxAccessibleDragAndDropBaseMessage;\n\nexport interface NgxAccessibleDragAndDropMoveEvent {\n\tpreviousIndex: number;\n\tnewIndex: number;\n\tpreviousContainer: number;\n\tnewContainer: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAccessibleDragAndDropContainerDirective.html":{"url":"directives/NgxAccessibleDragAndDropContainerDirective.html","title":"directive - NgxAccessibleDragAndDropContainerDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAccessibleDragAndDropContainerDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-container.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive to handle accessible drag and drop flows. This directive is meant to be placed on the drag and drop container(s).\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxAccessibleDragAndDropContainer]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxAccessibleDragAndDropContainer\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                index\n                            \n                            \n                                    Public\n                                    Readonly\n                                label\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required({ alias: \"ngxAccessibleDragAndDropContainerIndex\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-container.directive.ts:15\n                        \n                    \n\n            \n                \n                    The index of the container\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(undefined, { alias: \"ngxAccessibleDragAndDropContainerLabel\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-container.directive.ts:20\n                        \n                    \n\n            \n                \n                    An optional label used in the event messages\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\n\n/**\n * A directive to handle accessible drag and drop flows. This directive is meant to be placed on the drag and drop container(s).\n */\n@Directive({\n\tselector: '[ngxAccessibleDragAndDropContainer]',\n\texportAs: 'ngxAccessibleDragAndDropContainer',\n\tstandalone: true,\n})\nexport class NgxAccessibleDragAndDropContainerDirective {\n\t/**\n\t * The index of the container\n\t */\n\tpublic readonly index = input.required({ alias: \"ngxAccessibleDragAndDropContainerIndex\" });\n\n\t/**\n\t * An optional label used in the event messages\n\t */\n\tpublic readonly label = input(undefined, { alias: \"ngxAccessibleDragAndDropContainerLabel\" });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAccessibleDragAndDropHostDirective.html":{"url":"directives/NgxAccessibleDragAndDropHostDirective.html","title":"directive - NgxAccessibleDragAndDropHostDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAccessibleDragAndDropHostDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive to handle accessible drag and drop flows. This directive is meant to be placed on the host of the drag and drop container(s).\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxAccessibleDragAndDropHost]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxAccessibleDragAndDropHost\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                containers\n                            \n                            \n                                    Public\n                                    Readonly\n                                description\n                            \n                            \n                                    Private\n                                    Readonly\n                                dragAndDropService\n                            \n                            \n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                items\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getContainer\n                            \n                            \n                                    Public\n                                markAsActive\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                registerDragAndDropItem\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getContainer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getContainer(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:51\n                        \n                    \n\n\n            \n                \n                        Returns the container based on the provided index\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the container\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxAccessibleDragAndDropContainerDirective\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAsActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsActive(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:42\n                        \n                    \n\n\n            \n                \n                        Mark a specific drag and drop item as active\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the drag and drop item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:55\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerDragAndDropItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerDragAndDropItem(item: NgxAccessibleAbstractDragAndDropItemDirective)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            NgxAccessibleAbstractDragAndDropItemDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        containers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChildren(NgxAccessibleDragAndDropContainerDirective, { descendants: true })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:30\n                        \n                    \n\n            \n                \n                    A list of all the drag and drop containers\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(undefined, { alias: \"ngxAccessibleDragAndDropHostDescription\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:35\n                        \n                    \n\n            \n                \n                    An optional description describing how the drag and drop works.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dragAndDropService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxAccessibleDragAndDropAbstractService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:25\n                        \n                    \n\n            \n                \n                    A list of all the drag and drop items\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, AfterViewInit, inject, input, contentChildren } from '@angular/core';\n\nimport {\n\tNgxAccessibleAbstractDragAndDropItemDirective,\n\tNgxAccessibleDragAndDropAbstractService,\n} from '../../abstracts';\n\nimport { NgxAccessibleDragAndDropContainerDirective } from './drag-and-drop-container.directive';\n\n/**\n * A directive to handle accessible drag and drop flows. This directive is meant to be placed on the host of the drag and drop container(s).\n */\n@Directive({\n\tselector: '[ngxAccessibleDragAndDropHost]',\n\texportAs: 'ngxAccessibleDragAndDropHost',\n\tstandalone: true,\n})\nexport class NgxAccessibleDragAndDropHostDirective implements AfterViewInit {\n\tprivate readonly dragAndDropService = inject(NgxAccessibleDragAndDropAbstractService);\n\treadonly elementRef = inject>(ElementRef);\n\n\t/**\n\t * A list of all the drag and drop items\n\t */\n\tpublic items: Record = {};\n\n\t/**\n\t * A list of all the drag and drop containers\n\t */\n\tpublic readonly containers = contentChildren(NgxAccessibleDragAndDropContainerDirective, { descendants: true });\n\n\t/**\n\t * An optional description describing how the drag and drop works.\n\t */\n\tpublic readonly description = input(undefined, { alias: \"ngxAccessibleDragAndDropHostDescription\" });\n\n\t/**\n\t * Mark a specific drag and drop item as active\n\t *\n\t * @param  id - The id of the drag and drop item\n\t */\n\tpublic markAsActive(id: string): void {\n\t\tthis.items[id].markAsActive();\n\t}\n\n\t/**\n\t * Returns the container based on the provided index\n\t *\n\t * @param index - The index of the container\n\t */\n\tpublic getContainer(index: number): NgxAccessibleDragAndDropContainerDirective {\n\t\treturn this.containers().find((container) => container.index() === index);\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Add the description tag\n\t\tthis.dragAndDropService\n\t\t\t.setDragAndDropDescription(this.elementRef.nativeElement, this.description())\n\t\t\t.subscribe();\n\t}\n\n\tpublic registerDragAndDropItem(item: NgxAccessibleAbstractDragAndDropItemDirective): void {\n\t\tthis.items[item.itemId()] = item;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{"url":"interfaces/NgxAccessibleDragAndDropMessageRecord.html","title":"interface - NgxAccessibleDragAndDropMessageRecord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAccessibleDragAndDropMessageRecord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cancelled\n                                        \n                                \n                                \n                                        \n                                            container\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            deselected\n                                        \n                                \n                                \n                                        \n                                            item\n                                        \n                                \n                                \n                                        \n                                            moved\n                                        \n                                \n                                \n                                        \n                                            reordered\n                                        \n                                \n                                \n                                        \n                                            selected\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cancelled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cancelled:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        container\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        container:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deselected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deselected:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        item\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        item:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        moved\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        moved:         NgxAccessibleDragAndDropFromToMessage\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxAccessibleDragAndDropFromToMessage\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reordered\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reordered:         NgxAccessibleDragAndDropFromToMessage\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxAccessibleDragAndDropFromToMessage\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selected:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type NgxAccessibleDragAndDropFromToMessage =\n\t| `${string}{{#item}}${string}{{#to}}${string}{{#from}}${string}`\n\t| `${string}{{#item}}${string}{{#from}}${string}{{#to}}${string}`\n\t| `${string}{{#to}}${string}{{#item}}${string}{{#from}}${string}`\n\t| `${string}{{#to}}${string}{{#from}}${string}{{#item}}${string}`\n\t| `${string}{{#from}}${string}{{#item}}${string}{{#to}}${string}`\n\t| `${string}{{#from}}${string}{{#to}}${string}{{#item}}${string}`;\n\nexport interface NgxAccessibleDragAndDropMessageRecord {\n\tselected: `${string}{{#item}}${string}`;\n\tdeselected: `${string}{{#item}}${string}`;\n\treordered: NgxAccessibleDragAndDropFromToMessage;\n\tmoved: NgxAccessibleDragAndDropFromToMessage;\n\tcancelled: `${string}{{#item}}${string}`;\n\titem: string;\n\tcontainer: string;\n\tdescription: string;\n}\n\nexport type NgxAccessibleDragAndDropMoveType = 'reordered' | 'moved';\n\ninterface NgxAccessibleDragAndDropBaseMessage {\n\ttype: KeyType;\n\tdata: DataType;\n}\n\nexport type NgxAccessibleDragAndDropMessage =\n\t| NgxAccessibleDragAndDropBaseMessage\n\t| NgxAccessibleDragAndDropBaseMessage;\n\nexport interface NgxAccessibleDragAndDropMoveEvent {\n\tpreviousIndex: number;\n\tnewIndex: number;\n\tpreviousContainer: number;\n\tnewContainer: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{"url":"interfaces/NgxAccessibleDragAndDropMoveEvent.html","title":"interface - NgxAccessibleDragAndDropMoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAccessibleDragAndDropMoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            newContainer\n                                        \n                                \n                                \n                                        \n                                            newIndex\n                                        \n                                \n                                \n                                        \n                                            previousContainer\n                                        \n                                \n                                \n                                        \n                                            previousIndex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        newContainer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newContainer:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        newIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previousContainer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previousContainer:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previousIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previousIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type NgxAccessibleDragAndDropFromToMessage =\n\t| `${string}{{#item}}${string}{{#to}}${string}{{#from}}${string}`\n\t| `${string}{{#item}}${string}{{#from}}${string}{{#to}}${string}`\n\t| `${string}{{#to}}${string}{{#item}}${string}{{#from}}${string}`\n\t| `${string}{{#to}}${string}{{#from}}${string}{{#item}}${string}`\n\t| `${string}{{#from}}${string}{{#item}}${string}{{#to}}${string}`\n\t| `${string}{{#from}}${string}{{#to}}${string}{{#item}}${string}`;\n\nexport interface NgxAccessibleDragAndDropMessageRecord {\n\tselected: `${string}{{#item}}${string}`;\n\tdeselected: `${string}{{#item}}${string}`;\n\treordered: NgxAccessibleDragAndDropFromToMessage;\n\tmoved: NgxAccessibleDragAndDropFromToMessage;\n\tcancelled: `${string}{{#item}}${string}`;\n\titem: string;\n\tcontainer: string;\n\tdescription: string;\n}\n\nexport type NgxAccessibleDragAndDropMoveType = 'reordered' | 'moved';\n\ninterface NgxAccessibleDragAndDropBaseMessage {\n\ttype: KeyType;\n\tdata: DataType;\n}\n\nexport type NgxAccessibleDragAndDropMessage =\n\t| NgxAccessibleDragAndDropBaseMessage\n\t| NgxAccessibleDragAndDropBaseMessage;\n\nexport interface NgxAccessibleDragAndDropMoveEvent {\n\tpreviousIndex: number;\n\tnewIndex: number;\n\tpreviousContainer: number;\n\tnewContainer: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxAccordionComponent.html":{"url":"components/NgxAccordionComponent.html","title":"component - NgxAccordionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxAccordionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/accordion/accordion.component.ts\n\n\n\n    \n        Description\n    \n    \n        A WCAG/ARIA compliant implementation of the accordion pattern.\nhttps://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-accordion\n            \n\n\n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroyedSubject\n                            \n                            \n                                    Private\n                                itemRegisteredSubject\n                            \n                            \n                                    Public\n                                items\n                            \n                            \n                                    Public\n                                open\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                moveFocus\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                registerItem\n                            \n                            \n                                    Public\n                                removeItem\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                open\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        open\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48\n                            \n                        \n                \n                    \n                        Open the specific items in the accordion\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        moveFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveFocus(id: string, direction: \"up\" | \"down\" | \"first\" | \"last\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:111\n                        \n                    \n\n\n            \n                \n                        Moves the focus to an accordion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the current item\n\n\n                                            \n                                        \n                                        \n                                                direction\n                                            \n                                                        \"up\" | \"down\" | \"first\" | \"last\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe direction we move in\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:128\n                        \n                    \n\n\n            \n                \n                        Handle the destroyed state\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerItem(item: NgxAccordionItemComponent)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:82\n                        \n                    \n\n\n            \n                \n                        Register an accordion item to the container\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            NgxAccordionItemComponent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn accordion item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeItem(item: NgxAccordionItemComponent)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Removes an accordion item from the container\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            NgxAccordionItemComponent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn accordion item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:38\n                        \n                    \n\n            \n                \n                    A subject to hold the destroyed event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        itemRegisteredSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:33\n                        \n                    \n\n            \n                \n                    A subject to hold a registered event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxAccordionItemComponent[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:43\n                        \n                    \n\n            \n                \n                    A list of all accordion items\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        open\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48\n                        \n                    \n\n            \n                \n                    Open the specific items in the accordion\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n\tChangeDetectionStrategy,\n\tComponent,\n\teffect,\n\tinput,\n\tInputSignal,\n\tOnDestroy,\n} from '@angular/core';\nimport { Subject, take, tap } from 'rxjs';\n\nimport { NgxAccordionOpenBehavior } from '../../types';\n\nimport { NgxAccordionItemComponent } from './item/accordion-item.component';\n\n/**\n * A WCAG/ARIA compliant implementation of the accordion pattern.\n *\n * https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n */\n@Component({\n\tselector: 'ngx-accordion',\n\ttemplate: '',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\thost: {\n\t\tclass: 'ngx-accordion',\n\t\trole: 'region',\n\t},\n})\nexport class NgxAccordionComponent implements OnDestroy {\n\t/**\n\t * A subject to hold a registered event\n\t */\n\tprivate itemRegisteredSubject: Subject = new Subject();\n\n\t/**\n\t * A subject to hold the destroyed event\n\t */\n\tprivate destroyedSubject: Subject = new Subject();\n\n\t/**\n\t * A list of all accordion items\n\t */\n\tpublic items: NgxAccordionItemComponent[] = [];\n\n\t/**\n\t * Open the specific items in the accordion\n\t */\n\tpublic open: InputSignal = input();\n\n\tconstructor() {\n\t\teffect(() => {\n\t\t\tconst open = this.open();\n\n\t\t\tthis.itemRegisteredSubject.pipe(\n\t\t\t\ttake(1),\n\t\t\t\ttap(() => {\n\t\t\t\t\t// Iben: Use a setTimeOut so we wait an extra tick\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t// Iben: Open all items\n\t\t\t\t\t\tif (open === 'all') {\n\t\t\t\t\t\t\tthis.items.forEach((item) => item.updateAccordionItemState(true));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Iben: Open specific items\n\t\t\t\t\t\t\tconst indexes =\n\t\t\t\t\t\t\t\topen === 'first' ? [0] : Array.isArray(open) ? open : [open];\n\n\t\t\t\t\t\t\tindexes.forEach((index) => {\n\t\t\t\t\t\t\t\tthis.items[index]?.updateAccordionItemState(true);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Register an accordion item to the container\n\t *\n\t * @param item - An accordion item\n\t */\n\tpublic registerItem(item: NgxAccordionItemComponent): void {\n\t\tthis.itemRegisteredSubject.next();\n\t\tthis.items.push(item);\n\t}\n\n\t/**\n\t * Removes an accordion item from the container\n\t *\n\t * @param item - An accordion item\n\t */\n\tpublic removeItem(item: NgxAccordionItemComponent): void {\n\t\t// Iben: Get the index of the item\n\t\tconst index = this.items.findIndex(({ id }) => id === item.id);\n\n\t\t// Iben: If no item was found, we early exit\n\t\tif (index === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Remove the item\n\t\tthis.items = [...this.items.slice(0, index), ...this.items.slice(index + 1)];\n\t}\n\n\t/**\n\t * Moves the focus to an accordion\n\t *\n\t * @param  id - The id of the current item\n\t * @param  direction - The direction we move in\n\t */\n\tpublic moveFocus(id: string, direction: 'up' | 'down' | 'first' | 'last') {\n\t\t// Iben: If we go to the first or last accordion, we don't need to find the index\n\t\tif (direction === 'first' || direction === 'last') {\n\t\t\tthis.items[direction === 'first' ? 0 : this.items.length - 1].focus();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Find the index and move to the next\n\t\tconst index = this.items.findIndex((item) => id === item.id);\n\n\t\tthis.items[direction === 'down' ? index + 1 : index - 1]?.focus();\n\t}\n\n\t/**\n\t * Handle the destroyed state\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.destroyedSubject.next();\n\t\tthis.destroyedSubject.complete();\n\t}\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxAccordionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxAccordionItemComponent.html":{"url":"components/NgxAccordionItemComponent.html","title":"component - NgxAccordionItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxAccordionItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts\n\n\n\n    \n        Description\n    \n    \n        A WCAG/ARIA compliant implementation of an item in the accordion pattern.\nhttps://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                AfterViewInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-accordion-item\n            \n\n\n            \n                imports\n                \n                            NgTemplateOutlet\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./accordion-item.component.html\n            \n\n\n\n            \n                styleUrl\n                ./accordion-item.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                contentTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                detailsElement\n                            \n                            \n                                    Public\n                                    Readonly\n                                disabled\n                            \n                            \n                                    Private\n                                hasFocus\n                            \n                            \n                                    Public\n                                    Readonly\n                                headerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isOpen\n                            \n                            \n                                    Private\n                                    Readonly\n                                parent\n                            \n                            \n                                    Private\n                                    Readonly\n                                renderer\n                            \n                            \n                                    Public\n                                    Readonly\n                                summaryElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                arrowDown\n                            \n                            \n                                    \n                                arrowUp\n                            \n                            \n                                    \n                                end\n                            \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    Private\n                                handleWhenFocussed\n                            \n                            \n                                    \n                                home\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    Public\n                                setFocus\n                            \n                            \n                                    Public\n                                updateAccordionItemState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                keydown.ArrowDown\n                            \n                            \n                                keydown.ArrowUp\n                            \n                            \n                                keydown.End\n                            \n                            \n                                keydown.Home\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:107\n                            \n                        \n                \n                    \n                        Whether the accordion item is disabled\n\n                    \n                \n            \n        \n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        keydown.ArrowDown\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nkeydown.ArrowDown(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item below the current one\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keydown.ArrowUp\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nkeydown.ArrowUp(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item above the current one\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keydown.End\n                        \n                    \n                \n            \n            \n                \nkeydown.End()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the last accordion item\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keydown.Home\n                        \n                    \n                \n            \n            \n                \nkeydown.Home()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the first accordion item\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        arrowDown\n                        \n                    \n                \n            \n            \n                \n                        \n                    arrowDown(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowDown', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item below the current one\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        arrowUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    arrowUp(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowUp', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item above the current one\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        end\n                        \n                    \n                \n            \n            \n                \n                        \n                    end()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.End')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the last accordion item\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:137\n                        \n                    \n\n\n            \n                \n                        Set the focus on the summary item\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:193\n                        \n                    \n\n\n            \n                \n                        Only perform an action when the item has focus\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        home\n                        \n                    \n                \n            \n            \n                \n                        \n                    home()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.Home')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the first accordion item\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:160\n                        \n                    \n\n\n            \n                \n                        Listen to the default HTML events of the details object\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:184\n                        \n                    \n\n\n            \n                \n                        Remove the item from its parent when destroyed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:153\n                        \n                    \n\n\n            \n                \n                        Register the item to its parent\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus(hasFocus: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:146\n                        \n                    \n\n\n            \n                \n                        Set the focus state of the accordion item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                hasFocus\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether the item has focus\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateAccordionItemState\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAccordionItemState(isOpen: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:127\n                        \n                    \n\n\n            \n                \n                        Updates the current open/closed state of the accordion item, regardless of the disabled state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isOpen\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        contentTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChild>('contentTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:57\n                        \n                    \n\n            \n                \n                    The template for the content\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        detailsElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('details')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:47\n                        \n                    \n\n            \n                \n                    The details element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        disabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:107\n                        \n                    \n\n            \n                \n                    Whether the accordion item is disabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:122\n                        \n                    \n\n            \n                \n                    Whether the accordion item is focussed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChild>('headerTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:62\n                        \n                    \n\n            \n                \n                    The template for the header\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : uuid()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:112\n                        \n                    \n\n            \n                \n                    The id of the accordion item\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:117\n                        \n                    \n\n            \n                \n                    Whether the accordion item is open\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxAccordionComponent\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxAccordionComponent)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                \n                    \n                        Default value : inject(Renderer2)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        summaryElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('summary')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:52\n                        \n                    \n\n            \n                \n                    The summary element\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgTemplateOutlet } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostListener,\n  inject,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  TemplateRef,\n  input,\n  viewChild,\n  contentChild,\n  WritableSignal,\n  signal\n} from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxAccordionComponent } from '../accordion.component';\n\n/**\n * A WCAG/ARIA compliant implementation of an item in the accordion pattern.\n *\n * https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n */\n@Component({\n\tselector: 'ngx-accordion-item',\n\ttemplateUrl: './accordion-item.component.html',\n\tstyleUrl: './accordion-item.component.scss',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\timports: [NgTemplateOutlet],\n\thost: {\n\t\tclass: 'ngx-accordion-item',\n\t},\n})\nexport class NgxAccordionItemComponent implements OnInit, AfterViewInit, OnDestroy {\n\tprivate readonly parent: NgxAccordionComponent = inject(NgxAccordionComponent);\n\tprivate readonly cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\tprivate readonly renderer: Renderer2 = inject(Renderer2);\n\n\t/**\n\t * The details element\n\t */\n\tpublic readonly detailsElement = viewChild('details');\n\n\t/**\n\t * The summary element\n\t */\n\tpublic readonly summaryElement = viewChild('summary');\n\n\t/**\n\t * The template for the content\n\t */\n\tpublic readonly contentTemplate = contentChild>('contentTmpl');\n\n\t/**\n\t * The template for the header\n\t */\n\tpublic readonly headerTemplate = contentChild>('headerTmpl');\n\n\t/**\n\t * Moves the focus to the accordion item above the current one\n\t */\n\t@HostListener('keydown.ArrowUp', ['$event']) arrowUp(event: Event) {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopImmediatePropagation();\n\t\t\tthis.parent.moveFocus(this.id, 'up');\n\t\t});\n\t}\n\n\t/**\n\t * Moves the focus to the accordion item below the current one\n\t */\n\t@HostListener('keydown.ArrowDown', ['$event']) arrowDown(event: Event) {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopImmediatePropagation();\n\t\t\tthis.parent.moveFocus(this.id, 'down');\n\t\t});\n\t}\n\n\t/**\n\t * Moves the focus to the first accordion item\n\t */\n\t@HostListener('keydown.Home') home() {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tthis.parent.moveFocus(this.id, 'first');\n\t\t});\n\t}\n\n\t/**\n\t * Moves the focus to the last accordion item\n\t */\n\t@HostListener('keydown.End') end() {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tthis.parent.moveFocus(this.id, 'last');\n\t\t});\n\t}\n\n\t/**\n\t * Whether the accordion item is disabled\n\t */\n\tpublic readonly disabled = input(false);\n\n\t/**\n\t * The id of the accordion item\n\t */\n\tpublic readonly id: string = uuid();\n\n\t/**\n\t * Whether the accordion item is open\n\t */\n\tpublic isOpen: WritableSignal = signal(false);\n\n\t/**\n\t * Whether the accordion item is focussed\n\t */\n\tprivate hasFocus: WritableSignal = signal(false);\n\n\t/**\n\t * Updates the current open/closed state of the accordion item, regardless of the disabled state\n\t */\n\tpublic updateAccordionItemState(isOpen: boolean): void {\n\t\t// Iben: Sets the item to open and updates the parent state\n\t\tthis.isOpen.set(isOpen)\n\n\t\t// Iben: Trigger the visual changes\n\t\tthis.cdRef.detectChanges();\n\t}\n\t/**\n\t * Set the focus on the summary item\n\t */\n\tpublic focus() {\n\t\tthis.summaryElement()?.nativeElement.focus();\n\t}\n\n\t/**\n\t * Set the focus state of the accordion item\n\t *\n\t * @param hasFocus - Whether the item has focus\n\t */\n\tpublic setFocus(hasFocus: boolean) {\n\t\tthis.hasFocus.set(hasFocus);\n\t}\n\n\t/**\n\t * Register the item to its parent\n\t */\n\tpublic ngOnInit(): void {\n\t\tthis.parent.registerItem(this);\n\t}\n\n\t/**\n\t * Listen to the default HTML events of the details object\n\t */\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: If for some reason no accordion item is found, we return\n\t\tconst detailsElement = this.detailsElement();\n\t\tif (!detailsElement?.nativeElement) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Prevent the accordion from being opened if it is disabled\n\t\tthis.renderer.listen(detailsElement.nativeElement, 'click', (event: Event) => {\n\t\t\tif (this.disabled()) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Listen to the open state of details and update the internal one\n\t\tthis.renderer.listen(detailsElement.nativeElement, 'toggle', (event: ToggleEvent) => {\n\t\t\tthis.updateAccordionItemState(event.newState === 'open');\n\t\t});\n\t}\n\n\t/**\n\t * Remove the item from its parent when destroyed\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.parent.removeItem(this);\n\t}\n\n\t/**\n\t * Only perform an action when the item has focus\n\t *\n\t * @param  action - The provided action\n\t */\n\tprivate handleWhenFocussed(action: () => void) {\n\t\t// Iben: Early exit if there's no focus\n\t\tif (!this.hasFocus()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Perform the action\n\t\taction();\n\t}\n}\n\n    \n\n    \n        \n\t\n\t\t\n\t\n\n\t\n\t\t\n\t\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t\t\t\t\t\t\t\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxAccordionItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxAriaSortPipe.html":{"url":"pipes/NgxAriaSortPipe.html","title":"pipe - NgxAriaSortPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxAriaSortPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/aria-sort/aria-sort.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxAriaSort\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/aria-sort/aria-sort.pipe.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     \"none\" | \"ascending\" | \"descending\"\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { NgxAbstractTableCellDirective } from '../../components';\nimport { NgxTableSortEvent } from '../../types';\n\n\n@Pipe({\n\tname: 'ngxAriaSort',\n\tstandalone: true,\n})\nexport class NgxAriaSortPipe implements PipeTransform {\n\ttransform(value: {\n\t\tcurrentSorting: NgxTableSortEvent;\n\t\tcell: NgxAbstractTableCellDirective;\n\t}): 'none' | 'ascending' | 'descending' {\n\t\tconst { cell } = value;\n\n\t\tif (!cell || !cell.sortDirection) {\n\t\t\treturn 'none';\n\t\t}\n\n\t\treturn cell.sortDirection.toLocaleLowerCase() as 'ascending' | 'descending';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxAuthenticatedHttpClient.html":{"url":"injectables/NgxAuthenticatedHttpClient.html","title":"injectable - NgxAuthenticatedHttpClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxAuthenticatedHttpClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An opinionated wrapper of the HttpClient providing easy ways to make authenticated and unauthenticated calls\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                download\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Private\n                                handleUrl\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                post\n                            \n                            \n                                    Public\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(url: string, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:99\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a DELETE request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        download\n                        \n                    \n                \n            \n            \n                \n                        \n                    download(url: string, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Constructs a GET request tailored to downloading to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(url: string, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:41\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a GET request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUrl(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Adds a base-url to every request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe url of the request\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        patch\n                        \n                    \n                \n            \n            \n                \n                        \n                    patch(url: string, body: any, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:166\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a PATCH request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe body we wish to send\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        post\n                        \n                    \n                \n            \n            \n                \n                        \n                    post(url: string, body: any, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:120\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a POST request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe body we wish to send\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(url: string, body?: any, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:143\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a PUT request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe body we wish to send\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpClient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable, inject } from '@angular/core';\nimport clean from 'obj-clean';\nimport { map, Observable } from 'rxjs';\n\nimport { NgxAuthenticationUrlHandlerToken } from '../../tokens';\nimport { NgxAuthenticatedHttpClientConfiguration } from '../../types';\n\n/**\n * An opinionated wrapper of the HttpClient providing easy ways to make authenticated and unauthenticated calls\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxAuthenticatedHttpClient {\n\tprivate readonly httpClient = inject(HttpClient);\n\n\tprivate baseUrl: string;\n\n\tconstructor() {\n\t\tconst baseUrlHandler = inject(NgxAuthenticationUrlHandlerToken);\n\n\t\t// Iben: Setup the base url\n\t\tthis.baseUrl = baseUrlHandler ? baseUrlHandler() : '';\n\t}\n\n\t/**\n\t * Adds a base-url to every request\n\t * @param {string} url - The url of the request\n\t */\n\tprivate handleUrl(url: string): string {\n\t\treturn `${this.baseUrl}/${url}`;\n\t}\n\n\t/**\n\t * Constructs a GET request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic get(\n\t\turl: string,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.get(\n\t\t\tthis.handleUrl(url),\n\t\t\tclean({ withCredentials, params, context }) as Parameters[1]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a GET request tailored to downloading to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic download(\n\t\turl: string,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient\n\t\t\t.get(\n\t\t\t\tthis.handleUrl(url),\n\t\t\t\tclean({\n\t\t\t\t\twithCredentials,\n\t\t\t\t\tparams,\n\t\t\t\t\tresponseType: 'blob',\n\t\t\t\t\tobserve: 'response',\n\t\t\t\t\tcontext,\n\t\t\t\t}) as Parameters[1]\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\tmap((response: HttpResponse) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tfileType: response.headers.get('content-disposition').split('.')[1],\n\t\t\t\t\t\tblob: response.body as Blob,\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\t/**\n\t * Constructs a DELETE request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic delete(\n\t\turl: string,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.delete(\n\t\t\tthis.handleUrl(url),\n\t\t\tclean({ params, withCredentials, context }) as Parameters[1]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a POST request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param body - The body we wish to send\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic post(\n\t\turl: string,\n\t\tbody: any,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.post(\n\t\t\tthis.handleUrl(url),\n\t\t\tbody,\n\t\t\tclean({ params, withCredentials, context }) as Parameters[2]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a PUT request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param body - The body we wish to send\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic put(\n\t\turl: string,\n\t\tbody?: any,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.put(\n\t\t\tthis.handleUrl(url),\n\t\t\tbody,\n\t\t\tclean({ params, withCredentials, context }) as Parameters[2]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a PATCH request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param body - The body we wish to send\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic patch(\n\t\turl: string,\n\t\tbody: any,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.patch(\n\t\t\tthis.handleUrl(url),\n\t\t\tbody,\n\t\t\tclean({ params, withCredentials, context }) as Parameters[2]\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{"url":"interfaces/NgxAuthenticatedHttpClientConfiguration.html","title":"interface - NgxAuthenticatedHttpClientConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAuthenticatedHttpClientConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/types/authentication-configuration.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            authenticatedCallHandler\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            baseUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            interceptors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authenticatedCallHandler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authenticatedCallHandler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional handler for each authenticated API request made by the NgxAuthenticatedHttpClient\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseUrl:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A base url generator function that will be run at injection time used by any request made by the NgxAuthenticatedHttpClient\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interceptors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        interceptors:     HttpInterceptorFn[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpInterceptorFn[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional list of interceptors that will be provided to the HttpClient\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpInterceptorFn, HttpRequest } from '@angular/common/http';\nimport { Type } from '@angular/core';\n\nimport { NgxAuthenticationAbstractService } from '../abstracts';\n\n/**\n * The configuration of the authentication handlers\n */\nexport interface NgxAuthenticationConfiguration {\n\t/**\n\t * The provided implementation of the NgxAuthenticationAbstractService\n\t */\n\tservice: Type;\n\t/**\n\t * An optional set of configuration to provide when the NgxAuthenticatedHttpClient needs to be used\n\t */\n\thttpClientConfiguration?: NgxAuthenticatedHttpClientConfiguration;\n}\n\nexport interface NgxAuthenticatedHttpClientConfiguration {\n\t/**\n\t * An optional list of interceptors that will be provided to the HttpClient\n\t */\n\tinterceptors?: HttpInterceptorFn[];\n\t/**\n\t * A base url generator function that will be run at injection time used by any request made by the NgxAuthenticatedHttpClient\n\t */\n\tbaseUrl?: () => string;\n\t/**\n\t * An optional handler for each authenticated API request made by the NgxAuthenticatedHttpClient\n\t */\n\tauthenticatedCallHandler?: (request: HttpRequest) => HttpRequest;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAuthenticatedRoute.html":{"url":"interfaces/NgxAuthenticatedRoute.html","title":"interface - NgxAuthenticatedRoute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAuthenticatedRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/types/authenticated-route.types.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface for the routes used in an application that has uses the NgxAuthenticationAbstractService\n\n            \n\n            \n                Extends\n            \n            \n                        Route\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Route } from '@angular/router';\n\n/**\n * An interface for the routes used in an application that has uses the NgxAuthenticationAbstractService\n */\nexport interface NgxAuthenticatedRoute extends Route {\n\tdata?: {\n\t\t/**\n\t\t * The features for the NgxHasFeatureGuard\n\t\t */\n\t\tfeature?: FeatureType | FeatureType[];\n\t\t/**\n\t\t * Whether all features should be provided, by default true, for the NgxHasFeatureGuard\n\t\t */\n\t\tshouldHaveAllFeatures?: boolean;\n\t\t/**\n\t\t * The permissions for the NgxHasPermissionGuard\n\t\t */\n\t\tpermission?: PermissionType | PermissionType[];\n\t\t/**\n\t\t * Whether all permissions should be provided, by default true, for the NgxHasPermissionGuard\n\t\t */\n\t\tshouldHaveAllPermissions?: boolean;\n\t\t/**\n\t\t * Whether the user should be authenticated, for the NgxIsAuthenticatedGuard\n\t\t */\n\t\tshouldBeAuthenticated?: boolean;\n\t\t/**\n\t\t * The location to redirect to if one of the guards conditions isn't met\n\t\t */\n\t\tredirect?: string[];\n\t\t/**\n\t\t * Remaining additional properties\n\t\t */\n\t\t[key: string]: unknown;\n\t};\n}\n\nexport type NgxAuthenticatedRoutes = NgxAuthenticatedRoute[];\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxAuthenticationAbstractService.html":{"url":"classes/NgxAuthenticationAbstractService.html","title":"class - NgxAuthenticationAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxAuthenticationAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/abstracts/authentication.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service used by the directives, guards and other components of @ibenvandeveire/ngx-auth\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationResponseSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                authenticationStatusSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                globalFeaturesSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                hasAuthenticated$\n                            \n                            \n                                    Public\n                                    Readonly\n                                isAuthenticated$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                getAuthenticationResponse\n                            \n                            \n                                    Private\n                                getSession\n                            \n                            \n                                    Public\n                                hasFeature\n                            \n                            \n                                    Public\n                                hasPermission\n                            \n                            \n                                    Public\n                                setGlobalFeatures\n                            \n                            \n                                    Public\n                                signIn\n                            \n                            \n                                    Protected\n                                    Abstract\n                                signInUser\n                            \n                            \n                                    Public\n                                signOut\n                            \n                            \n                                    Protected\n                                    Abstract\n                                signOutUser\n                            \n                            \n                                    Protected\n                                storeAuthenticationResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    user$\n                                \n                                \n                                    session$\n                                \n                                \n                                    metadata$\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationResponseSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(undefined)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:34\n                        \n                    \n\n            \n                \n                    A subject to store the authentication response if no other state implementation was provided\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationStatusSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject('unset')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:40\n                        \n                    \n\n            \n                \n                    A subject to store whether we've authenticated already\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        globalFeaturesSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject[]>([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:46\n                        \n                    \n\n            \n                \n                    A subject to store global features that are available for all users, regardless of their authenticated state\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        hasAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status !== 'unset')\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:53\n                        \n                    \n\n            \n                \n                    Whether an authentication attempt has been made\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        isAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status === 'signed-in')\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:61\n                        \n                    \n\n            \n                \n                    Whether the user is authenticated\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getAuthenticationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuthenticationResponse()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Returns the authentication response from the state\n\n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:232\n                        \n                    \n\n\n            \n                \n                        Returns a session or an empty session depending on the authenticated state\n\n\n                        \n                            Returns :     Observable<>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasFeature\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasFeature(requiredFeatures: NgxAuthenticationResponseFeature[], shouldHaveAllFeatures: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Returns whether the user has the required features.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                requiredFeatures\n                                            \n                                                            NgxAuthenticationResponseFeature[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn array of required features\n\n\n                                            \n                                        \n                                        \n                                                shouldHaveAllFeatures\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether all features in the array are required, by default true\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasPermission\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasPermission(requiredPermissions, shouldHaveAllPermissions: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:211\n                        \n                    \n\n\n            \n                \n                        Returns whether the user has the required permissions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                requiredPermissions\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn array of required permissions\n\n\n                                            \n                                        \n                                        \n                                                shouldHaveAllPermissions\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether all permissions in the array are required, by default true\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setGlobalFeatures\n                        \n                    \n                \n            \n            \n                \n                        \n                    setGlobalFeatures(features: NgxAuthenticationResponseFeature[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:199\n                        \n                    \n\n\n            \n                \n                        Sets a set of global features that are always present, regardless of the authenticated state of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                features\n                                            \n                                                            NgxAuthenticationResponseFeature[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA list of features\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInData: SignInDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Signs in a user and stores the authentication response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInData\n                                            \n                                                            SignInDataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data needed to sign in a user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        signInUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInUser(signInData: SignInDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:71\n                        \n                    \n\n\n            \n                \n                        The call required to sign in a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInData\n                                            \n                                                            SignInDataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data needed to sign in a user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        signOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOut(signoutDataType?: SignoutDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:158\n                        \n                    \n\n\n            \n                \n                        Signs out a user and removes the stored authentication response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signoutDataType\n                                            \n                                                            SignoutDataType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional data needed to sign out a use\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        signOutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOutUser(signoutDataType?: SignoutDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:80\n                        \n                    \n\n\n            \n                \n                        The call required to sign out a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signoutDataType\n                                            \n                                                            SignoutDataType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional data needed to sign out a user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        storeAuthenticationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeAuthenticationResponse(response: AuthenticationResponseType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Stores the authentication response in the state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                        AuthenticationResponseType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe authentication response\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        user$\n                    \n                \n\n                \n                    \n                        getuser$()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:103\n                                \n                            \n                    \n                        \n                                The authenticated user\n\n\n                                \n                                    Returns :     Observable<>\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        session$\n                    \n                \n\n                \n                    \n                        getsession$()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:114\n                                \n                            \n                    \n                        \n                                The session of the authenticated user\n\n\n                                \n                                    Returns :     Observable<>\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        metadata$\n                    \n                \n\n                \n                    \n                        getmetadata$()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:125\n                                \n                            \n                    \n                        \n                                The metadata of the authenticated user\n\n\n                                \n                                    Returns :     Observable<>\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { AuthenticationResponse } from '@ibenvandeveire/types-authentication';\nimport {\n\tBehaviorSubject,\n\tcombineLatest,\n\tdistinctUntilChanged,\n\tfilter,\n\tmap,\n\tObservable,\n\tof,\n\tswitchMap,\n\ttap,\n} from 'rxjs';\n\nimport { NgxAuthenticationResponseFeature, NgxAuthenticationStatus } from '../types';\n\n/**\n * An abstract service used by the directives, guards and other components of @ibenvandeveire/ngx-auth\n *\n * @template AuthenticationResponseType - The type of authentication response\n * @template SignInDataType - The data type used to sign in a user\n * @template SignoutDataType - The data type used to sign out a user\n * @template SignOutResponseType - The data type you get when signing out a user\n */\nexport abstract class NgxAuthenticationAbstractService = AuthenticationResponse,\n\tSignInDataType = any,\n\tSignoutDataType = any,\n\tSignOutResponseType = void,\n> {\n\t/**\n\t * A subject to store the authentication response if no other state implementation was provided\n\t */\n\tprivate readonly authenticationResponseSubject: BehaviorSubject =\n\t\tnew BehaviorSubject(undefined);\n\n\t/**\n\t * A subject to store whether we've authenticated already\n\t */\n\tprivate readonly authenticationStatusSubject: BehaviorSubject =\n\t\tnew BehaviorSubject('unset');\n\n\t/**\n\t * A subject to store global features that are available for all users, regardless of their authenticated state\n\t */\n\tprivate readonly globalFeaturesSubject: BehaviorSubject[]\n\t> = new BehaviorSubject[]>([]);\n\n\t/**\n\t * Whether an authentication attempt has been made\n\t */\n\tpublic readonly hasAuthenticated$: Observable = this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status !== 'unset')\n\t);\n\n\t/**\n\t * Whether the user is authenticated\n\t */\n\tpublic readonly isAuthenticated$: Observable = this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status === 'signed-in')\n\t);\n\n\t/**\n\t * The call required to sign in a user\n\t *\n\t * @param signInData - The data needed to sign in a user\n\t */\n\tprotected abstract signInUser(\n\t\tsignInData: SignInDataType\n\t): Observable;\n\n\t/**\n\t * The call required to sign out a user\n\t *\n\t * @param signoutDataType - Optional data needed to sign out a user\n\t */\n\tprotected abstract signOutUser(\n\t\tsignoutDataType?: SignoutDataType\n\t): Observable;\n\n\t/**\n\t * Stores the authentication response in the state\n\t *\n\t * @param response - The authentication response\n\t */\n\tprotected storeAuthenticationResponse(response: AuthenticationResponseType): void {\n\t\tthis.authenticationResponseSubject.next(response);\n\t}\n\n\t/**\n\t * Returns the authentication response from the state\n\t */\n\tprotected getAuthenticationResponse(): Observable {\n\t\treturn this.authenticationResponseSubject.asObservable();\n\t}\n\n\t/**\n\t * The authenticated user\n\t */\n\tpublic get user$(): Observable {\n\t\treturn this.getAuthenticationResponse().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap((response) => response.user),\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * The session of the authenticated user\n\t */\n\tpublic get session$(): Observable {\n\t\treturn this.getAuthenticationResponse().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap(({ session }: AuthenticationResponseType) => session),\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * The metadata of the authenticated user\n\t */\n\tpublic get metadata$(): Observable {\n\t\treturn this.getAuthenticationResponse().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap(({ metadata }: AuthenticationResponseType) => metadata),\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * Signs in a user and stores the authentication response\n\t *\n\t * @param signInData - The data needed to sign in a user\n\t */\n\tpublic signIn(signInData: SignInDataType): Observable {\n\t\t// Iben: Perform the call to sign in a user\n\t\treturn this.signInUser(signInData).pipe(\n\t\t\ttap((response: AuthenticationResponseType) => {\n\t\t\t\t// Iben: Set the user as signed in\n\t\t\t\tthis.authenticationStatusSubject.next('signed-in');\n\n\t\t\t\t// Iben: Store the authentication response\n\t\t\t\tthis.storeAuthenticationResponse(response);\n\t\t\t}),\n\t\t\t// Iben: Convert to void\n\t\t\tmap(() => undefined)\n\t\t);\n\t}\n\n\t/**\n\t * Signs out a user and removes the stored authentication response\n\t *\n\t * @param signoutDataType - Optional data needed to sign out a use\n\t */\n\tpublic signOut(signoutDataType?: SignoutDataType): Observable {\n\t\t// Iben: Perform the call to sign out a user\n\t\treturn this.signOutUser(signoutDataType).pipe(\n\t\t\ttap(() => {\n\t\t\t\t// Iben: Set the user as signed out\n\t\t\t\tthis.authenticationStatusSubject.next('signed-out');\n\n\t\t\t\t// Iben: Remove the stored authentication response\n\t\t\t\tthis.storeAuthenticationResponse(undefined);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Returns whether the user has the required features.\n\t *\n\t * @param requiredFeatures - An array of required features\n\t * @param shouldHaveAllFeatures - Whether all features in the array are required, by default true\n\t */\n\tpublic hasFeature(\n\t\trequiredFeatures: NgxAuthenticationResponseFeature[],\n\t\tshouldHaveAllFeatures: boolean = true\n\t): Observable {\n\t\t// Iben: Get the session\n\t\treturn combineLatest([this.getSession(), this.globalFeaturesSubject.asObservable()]).pipe(\n\t\t\tmap(([{ features }, globalFeatures]) => {\n\t\t\t\tconst sessionFeatures = new Set([...(features || []), ...(globalFeatures || [])]);\n\t\t\t\t// Iben: Return whether the user has the required features\n\t\t\t\t// We cast to strings here to make the typing work\n\t\t\t\treturn shouldHaveAllFeatures\n\t\t\t\t\t? requiredFeatures.every((feature) => sessionFeatures.has(`${feature}`))\n\t\t\t\t\t: requiredFeatures.some((feature) => sessionFeatures.has(`${feature}`));\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Sets a set of global features that are always present, regardless of the authenticated state of the user\n\t *\n\t * @param  features - A list of features\n\t */\n\tpublic setGlobalFeatures(\n\t\tfeatures: NgxAuthenticationResponseFeature[]\n\t): void {\n\t\tthis.globalFeaturesSubject.next(features);\n\t}\n\n\t/**\n\t * Returns whether the user has the required permissions.\n\t *\n\t * @param requiredPermissions - An array of required permissions\n\t * @param shouldHaveAllPermissions - Whether all permissions in the array are required, by default true\n\t */\n\tpublic hasPermission(\n\t\trequiredPermissions: AuthenticationResponseType['session']['permissions'],\n\t\tshouldHaveAllPermissions: boolean = true\n\t): Observable {\n\t\t// Iben: Get the session\n\t\treturn this.getSession().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap(({ permissions }) => {\n\t\t\t\tconst sessionPermissions = new Set([...permissions]);\n\n\t\t\t\t// Iben: Return whether the user has the required permissions\n\t\t\t\treturn shouldHaveAllPermissions\n\t\t\t\t\t? requiredPermissions.every((permission) => sessionPermissions.has(permission))\n\t\t\t\t\t: requiredPermissions.some((permission) => sessionPermissions.has(permission));\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Returns a session or an empty session depending on the authenticated state\n\t */\n\tprivate getSession(): Observable {\n\t\treturn this.isAuthenticated$.pipe(\n\t\t\tswitchMap((isAuthenticated) => {\n\t\t\t\t// Iben: If the user is authenticated, we return the session, if not, we return an empty version for the hasPermission and hasFeature methods\n\t\t\t\t// This ensures we always get a response\n\t\t\t\treturn isAuthenticated\n\t\t\t\t\t? this.session$\n\t\t\t\t\t: of({\n\t\t\t\t\t\t\tfeatures: [],\n\t\t\t\t\t\t\tpermissions: [],\n\t\t\t\t\t\t});\n\t\t\t})\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAuthenticationConfiguration.html":{"url":"interfaces/NgxAuthenticationConfiguration.html","title":"interface - NgxAuthenticationConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAuthenticationConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/types/authentication-configuration.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration of the authentication handlers\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            httpClientConfiguration\n                                        \n                                \n                                \n                                        \n                                            service\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        httpClientConfiguration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        httpClientConfiguration:         NgxAuthenticatedHttpClientConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxAuthenticatedHttpClientConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional set of configuration to provide when the NgxAuthenticatedHttpClient needs to be used\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        service\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        service:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The provided implementation of the NgxAuthenticationAbstractService\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpInterceptorFn, HttpRequest } from '@angular/common/http';\nimport { Type } from '@angular/core';\n\nimport { NgxAuthenticationAbstractService } from '../abstracts';\n\n/**\n * The configuration of the authentication handlers\n */\nexport interface NgxAuthenticationConfiguration {\n\t/**\n\t * The provided implementation of the NgxAuthenticationAbstractService\n\t */\n\tservice: Type;\n\t/**\n\t * An optional set of configuration to provide when the NgxAuthenticatedHttpClient needs to be used\n\t */\n\thttpClientConfiguration?: NgxAuthenticatedHttpClientConfiguration;\n}\n\nexport interface NgxAuthenticatedHttpClientConfiguration {\n\t/**\n\t * An optional list of interceptors that will be provided to the HttpClient\n\t */\n\tinterceptors?: HttpInterceptorFn[];\n\t/**\n\t * A base url generator function that will be run at injection time used by any request made by the NgxAuthenticatedHttpClient\n\t */\n\tbaseUrl?: () => string;\n\t/**\n\t * An optional handler for each authenticated API request made by the NgxAuthenticatedHttpClient\n\t */\n\tauthenticatedCallHandler?: (request: HttpRequest) => HttpRequest;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxBroadcastChannelService.html":{"url":"injectables/NgxBroadcastChannelService.html","title":"injectable - NgxBroadcastChannelService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxBroadcastChannelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that wraps the BroadCastChannel API and provides an Observable based implementation to the channel messages.\nFor more information:\nhttps://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                broadcastChannel\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closeChannel\n                            \n                            \n                                    Public\n                                initChannel\n                            \n                            \n                                    Public\n                                postMessage\n                            \n                            \n                                    Public\n                                selectChannelMessageErrors\n                            \n                            \n                                    Public\n                                selectChannelMessages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        closeChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeChannel(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:55\n                        \n                    \n\n\n            \n                \n                        closeChannel\nThe closeChannel method closes a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    initChannel(...args: ConstructorParameters<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:29\n                        \n                    \n\n\n            \n                \n                        initChannel\nThe initChannel method initializes a new BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ConstructorParameters<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe arguments to pass to the BroadcastChannel constructor.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        postMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    postMessage(channelName: string, message: MessageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:72\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    MessageType\n                            \n                        \n                    \n\n            \n                \n                        postMessage\nThe postMessage method sends a message to a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                        \n                                                message\n                                            \n                                                        MessageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe payload to send through the channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectChannelMessageErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectChannelMessageErrors(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:115\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    MessageType\n                            \n                        \n                    \n\n            \n                \n                        selectChannelMessageErrors\nThe selectChannelMessageErrors method subscribes to the messageerror (bc.onmessageerror) event of a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                Observable - The messageerror event of the channel wrapped in an observable.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectChannelMessages\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectChannelMessages(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:93\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    MessageType\n                            \n                        \n                    \n\n            \n                \n                        selectChannelMessages\nThe selectChannelMessages method subscribes to the message (bc.onmessage) event of a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                Observable - The message event of the channel wrapped in an observable.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        broadcastChannel\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:20\n                        \n                    \n\n            \n                \n                    A record holding all the broadcast channels\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { EMPTY, fromEvent, Observable } from 'rxjs';\n\n/**\n * A service that wraps the BroadCastChannel API and provides an Observable based implementation to the channel messages.\n *\n * For more information:\n * https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxBroadcastChannelService {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A record holding all the broadcast channels\n\t */\n\tprivate broadcastChannel: Record = {};\n\n\t/**\n\t * initChannel\n\t *\n\t * The initChannel method initializes a new BroadcastChannel instance.\n\t *\n\t * @param args{ConstructorParameters} - The arguments to pass to the BroadcastChannel constructor.\n\t */\n\tpublic initChannel(...args: ConstructorParameters): void {\n\t\t// Iben: Only run when in browser\n\t\tthis.windowService.runInBrowser(() => {\n\t\t\tconst [channelName] = args;\n\n\t\t\tif (!channelName) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t'NgxUtils: There was an attempt to initialize a BroadcastChannel without providing a name.'\n\t\t\t\t);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!this.broadcastChannel[channelName]) {\n\t\t\t\tthis.broadcastChannel[channelName] = new BroadcastChannel(...args);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * closeChannel\n\t *\n\t * The closeChannel method closes a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t */\n\tpublic closeChannel(channelName: string): void {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.broadcastChannel[channelName].close();\n\t\tdelete this.broadcastChannel[channelName];\n\t}\n\n\t/**\n\t * postMessage\n\t *\n\t * The postMessage method sends a message to a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t * @param message{any} - The payload to send through the channel.\n\t */\n\tpublic postMessage(channelName: string, message: MessageType): void {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxUtils: There was an attempt to post a message to a channel without providing a name or the selected channel does not exist. The included message was:',\n\t\t\t\tmessage\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.broadcastChannel[channelName].postMessage(message);\n\t}\n\n\t/**\n\t * selectChannelMessages\n\t *\n\t * The selectChannelMessages method subscribes to the `message` (bc.onmessage) event of a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t * @returns Observable - The message event of the channel wrapped in an observable.\n\t */\n\tpublic selectChannelMessages(\n\t\tchannelName: string\n\t): Observable> {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\tconsole.error(\n\t\t\t\t\"NgxUtils: There was an attempt to select a BroadcastChannel's messages without providing a name or the selected channel does not exist.\"\n\t\t\t);\n\n\t\t\treturn EMPTY;\n\t\t}\n\n\t\treturn fromEvent>(this.broadcastChannel[channelName], 'message');\n\t}\n\n\t/**\n\t * selectChannelMessageErrors\n\t *\n\t * The selectChannelMessageErrors method subscribes to the `messageerror` (bc.onmessageerror) event of a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t * @returns Observable - The messageerror event of the channel wrapped in an observable.\n\t */\n\tpublic selectChannelMessageErrors(\n\t\tchannelName: string\n\t): Observable> {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\tconsole.error(\n\t\t\t\t\"NgxUtils: There was an attempt to select a BroadcastChannel's message errors without providing a name or the selected channel does not exist.\"\n\t\t\t);\n\n\t\t\treturn EMPTY;\n\t\t}\n\n\t\treturn fromEvent>(\n\t\t\tthis.broadcastChannel[channelName],\n\t\t\t'messageerror'\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxButtonConfiguration.html":{"url":"interfaces/NgxButtonConfiguration.html","title":"interface - NgxButtonConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxButtonConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/button.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The default configuration of the button\nloading - An optional component used for the loading state\nicon - An optional component used for the icon\niconPosition - The optional default position of the icon, by default left\nlabelWrapper - The optional default HTML element used to wrap the button label, by default span\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            iconPosition\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            labelWrapper\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            loading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iconPosition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iconPosition:         NgxButtonIconPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxButtonIconPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelWrapper\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelWrapper:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../abstracts';\n\n/**\n * The priority of the button\n */\nexport type NgxButtonPriority = 'primary' | 'secondary' | 'tertiary' | 'danger';\n\n/**\n * The type of the button\n */\nexport type NgxButtonType = 'regular' | 'icon' | 'fab' | 'text' | 'outline';\n\n/**\n * The position of the icon in the button\n */\nexport type NgxButtonIconPosition = 'left' | 'right';\n\n/**\n * The default configuration of the button\n *\n * loading - An optional component used for the loading state\n * icon - An optional component used for the icon\n * iconPosition - The optional default position of the icon, by default `left`\n * labelWrapper - The optional default HTML element used to wrap the button label, by default `span`\n */\nexport interface NgxButtonConfiguration {\n\tloading?: Type;\n\ticon?: Type;\n\ticonPosition?: NgxButtonIconPosition;\n\tlabelWrapper?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxButtonDirective.html":{"url":"directives/NgxButtonDirective.html","title":"directive - NgxButtonDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxButtonDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/button/button.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that adds the classic button states, priority, loading and icon handling\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxButton]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                buttonClasses\n                            \n                            \n                                    Public\n                                buttonType\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Private\n                                iconComponent\n                            \n                            \n                                    Private\n                                iconElement\n                            \n                            \n                                    Public\n                                iconPosition\n                            \n                            \n                                    Public\n                                loading\n                            \n                            \n                                    Private\n                                loadingComponent\n                            \n                            \n                                    Public\n                                loadingData\n                            \n                            \n                                    Public\n                                priority\n                            \n                            \n                                    Private\n                                    Readonly\n                                renderer\n                            \n                            \n                                    Private\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleIcon\n                            \n                            \n                                    Private\n                                handleLoading\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                icon\n                            \n                            \n                                loading\n                            \n                            \n                                loadingData\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        icon\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:111\n                            \n                        \n                \n                    \n                        An optional icon we wish to display alongside the button text\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        loading\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:91\n                            \n                        \n                \n                    \n                        Whether the button is currently loading\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        loadingData\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:96\n                            \n                        \n                \n                    \n                        Optional loading data\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleIcon\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleIcon()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:159\n                        \n                    \n\n\n            \n                \n                        Adds or removes an icon\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleLoading\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleLoading()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:136\n                        \n                    \n\n\n            \n                \n                        Adds or removes the loading component\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:120\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        buttonClasses\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n\t\t// Iben: Inserts the icon\n\t\tthis.handleIcon();\n\n\t\t// Iben: Inserts the loading component when needed\n\t\tthis.handleLoading();\n\n\t\treturn `\n    ngx-button\n    ngx-button-${this.buttonType()}\n    ngx-button-${this.priority()}\n    ${this.loading() ? 'ngx-button-loading' : ''}\n    ${this.icon() ? 'ngx-button-with-icon' : ''}`;\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:73\n                        \n                    \n\n            \n                \n                    The classes of the button generated by its configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        buttonType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('regular')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:101\n                        \n                    \n\n            \n                \n                    Whether the button is a Regular, Icon, Link or Fab button. By default, this is Regular.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxButtonConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxButtonConfigurationToken, {\n\t\toptional: true,\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:54\n                        \n                    \n\n            \n                \n                    An optional set of configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tElementRef\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:42\n                        \n                    \n\n            \n                \n                    An instance of the elementRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:111\n                        \n                    \n\n            \n                \n                    An optional icon we wish to display alongside the button text\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        iconComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:66\n                        \n                    \n\n            \n                \n                    The icon component in case we did configure an icon component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        iconElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:61\n                        \n                    \n\n            \n                \n                    The icon element in case we did not configure an icon component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        iconPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input(\n\t\tthis.configuration?.iconPosition || 'left'\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:116\n                        \n                    \n\n            \n                \n                    The position of the icon when provided, by default this is Left unless overwritten in the configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loading\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:91\n                        \n                    \n\n            \n                \n                    Whether the button is currently loading\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadingComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loadingData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:96\n                        \n                    \n\n            \n                \n                    Optional loading data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('primary')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:106\n                        \n                    \n\n            \n                \n                    Whether the button has Primary, Secondary or Tertiary priority. By default, this is Primary.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                \n                    \n                        Default value : inject(Renderer2)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:49\n                        \n                    \n\n            \n                \n                    An instance of the renderer\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ViewContainerRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:37\n                        \n                    \n\n            \n                \n                    An instance of the viewContainer\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tComponentRef,\n\tcomputed,\n\tDirective,\n\tElementRef,\n\tinject,\n\tinput,\n\tInputSignal,\n\tOnInit,\n\tRenderer2,\n\tSignal,\n\tViewContainerRef,\n} from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../abstracts';\nimport { NgxButtonConfigurationToken } from '../../tokens';\nimport {\n\tNgxButtonConfiguration,\n\tNgxButtonIconPosition,\n\tNgxButtonPriority,\n\tNgxButtonType,\n} from '../../types';\n\n/**\n * A directive that adds the classic button states, priority, loading and icon handling\n */\n@Directive({\n\tselector: '[ngxButton]',\n\thost: {\n\t\t'[attr.class]': 'buttonClasses()',\n\t},\n})\nexport class NgxButtonDirective implements OnInit {\n\t/**\n\t * An instance of the viewContainer\n\t */\n\tprivate readonly viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n\t/**\n\t * An instance of the elementRef\n\t */\n\tprivate readonly elementRef: ElementRef = inject(\n\t\tElementRef\n\t);\n\n\t/**\n\t * An instance of the renderer\n\t */\n\tprivate readonly renderer: Renderer2 = inject(Renderer2);\n\n\t/**\n\t * An optional set of configuration\n\t */\n\tprivate readonly configuration: NgxButtonConfiguration = inject(NgxButtonConfigurationToken, {\n\t\toptional: true,\n\t});\n\n\t/**\n\t * The icon element in case we did not configure an icon component\n\t */\n\tprivate iconElement: HTMLElement;\n\n\t/**\n\t * The icon component in case we did configure an icon component\n\t */\n\tprivate iconComponent: ComponentRef;\n\n\tprivate loadingComponent: ComponentRef;\n\n\t/**\n\t * The classes of the button generated by its configuration\n\t */\n\tprotected buttonClasses: Signal = computed(() => {\n\t\t// Iben: Inserts the icon\n\t\tthis.handleIcon();\n\n\t\t// Iben: Inserts the loading component when needed\n\t\tthis.handleLoading();\n\n\t\treturn `\n    ngx-button\n    ngx-button-${this.buttonType()}\n    ngx-button-${this.priority()}\n    ${this.loading() ? 'ngx-button-loading' : ''}\n    ${this.icon() ? 'ngx-button-with-icon' : ''}`;\n\t});\n\n\t/**\n\t * Whether the button is currently loading\n\t */\n\tpublic loading: InputSignal = input(false);\n\n\t/**\n\t * Optional loading data\n\t */\n\tpublic loadingData: InputSignal = input();\n\n\t/**\n\t * Whether the button is a Regular, Icon, Link or Fab button. By default, this is Regular.\n\t */\n\tpublic buttonType: InputSignal = input('regular');\n\n\t/**\n\t * Whether the button has Primary, Secondary or Tertiary priority. By default, this is Primary.\n\t */\n\tpublic priority: InputSignal = input('primary');\n\n\t/**\n\t * An optional icon we wish to display alongside the button text\n\t */\n\tpublic icon: InputSignal = input();\n\n\t/**\n\t * The position of the icon when provided, by default this is Left unless overwritten in the configuration\n\t */\n\tpublic iconPosition: InputSignal = input(\n\t\tthis.configuration?.iconPosition || 'left'\n\t);\n\n\tngOnInit() {\n\t\t// Iben: Wrap the base text in an element\n\t\tconst wrapperElement: HTMLSpanElement = this.renderer.createElement(\n\t\t\tthis.configuration?.labelWrapper || 'span'\n\t\t);\n\t\twrapperElement.innerText = this.elementRef.nativeElement.innerHTML;\n\t\twrapperElement.setAttribute('class', 'ngx-button-label');\n\n\t\t// Iben: Remove the current innerHtml and replace it with a span element\n\t\tthis.elementRef.nativeElement.innerHTML = '';\n\t\tthis.elementRef.nativeElement.appendChild(wrapperElement);\n\t}\n\n\t/**\n\t * Adds or removes the loading component\n\t */\n\tprivate handleLoading(): void {\n\t\t// Iben: If the loading state is on and a loading component is provided we add it\n\t\tif (this.loading() && this.configuration?.loading) {\n\t\t\t// Iben: Create the loading component and set its data\n\t\t\tthis.loadingComponent = this.viewContainer.createComponent(this.configuration.loading);\n\t\t\tthis.loadingComponent.setInput('data', this.loadingData());\n\n\t\t\t// Iben: Add the loading component to the button\n\t\t\tthis.elementRef.nativeElement.appendChild(\n\t\t\t\tthis.loadingComponent.instance.elementRef.nativeElement\n\t\t\t);\n\t\t} else {\n\t\t\t// Iben: If the loading has stopped and a loading component is present, remove it\n\t\t\tif (!this.loading() && this.loadingComponent) {\n\t\t\t\tthis.loadingComponent.destroy();\n\t\t\t\tthis.loadingComponent = undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds or removes an icon\n\t */\n\tprivate handleIcon(): void {\n\t\t// Iben: Check if we need to add an icon\n\t\tif (this.icon()) {\n\t\t\t// Iben: Check if the button already has an icon, if not, add it\n\t\t\tif (!this.iconElement && !this.iconComponent) {\n\t\t\t\t// Iben: If no icon component exists, we create a regular i element\n\t\t\t\tif (!this.configuration?.icon) {\n\t\t\t\t\t// Iben: Create a new icon element\n\t\t\t\t\tthis.iconElement = this.renderer.createElement('i');\n\t\t\t\t\tthis.iconElement.className = `ngx-button-icon ${this.icon()}`;\n\t\t\t\t} else {\n\t\t\t\t\t// Iben: Create new component and add the icon\n\t\t\t\t\tthis.iconComponent =\n\t\t\t\t\t\tthis.viewContainer.createComponent(\n\t\t\t\t\t\t\tthis.configuration.icon,\n\t\t\t\t\t\t\t{ index: 0 }\n\t\t\t\t\t\t);\n\t\t\t\t\tthis.iconComponent.setInput('data', this.icon());\n\t\t\t\t\tthis.renderer.addClass(\n\t\t\t\t\t\tthis.iconComponent.instance.elementRef.nativeElement,\n\t\t\t\t\t\t'ngx-button-icon'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Iben: Add the icon depending on whether we want to add it on the left or the right\n\t\t\t\tthis.iconPosition() === 'left'\n\t\t\t\t\t? this.elementRef.nativeElement.prepend(\n\t\t\t\t\t\t\tthis.iconElement || this.iconComponent.instance.elementRef.nativeElement\n\t\t\t\t\t  )\n\t\t\t\t\t: this.elementRef.nativeElement.appendChild(\n\t\t\t\t\t\t\tthis.iconElement || this.iconComponent.instance.elementRef.nativeElement\n\t\t\t\t\t  );\n\t\t\t}\n\t\t}\n\t\t// Iben: If an icon already exists and we no longer have an icon presented, we remove it\n\t\telse if (this.iconElement || this.iconComponent) {\n\t\t\tif (!this.configuration?.icon) {\n\t\t\t\tthis.elementRef.nativeElement?.removeChild(this.iconElement);\n\t\t\t\tthis.iconElement = undefined;\n\t\t\t} else {\n\t\t\t\tthis.iconComponent?.destroy();\n\t\t\t\tthis.iconComponent = undefined;\n\t\t\t}\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxConfigurableLayoutItemComponent.html":{"url":"components/NgxConfigurableLayoutItemComponent.html","title":"component - NgxConfigurableLayoutItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxConfigurableLayoutItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts\n\n\n\n    \n        Description\n    \n    \n        The layout item pairs with the  container.\nThis component will in itself not be rendered. The key provided in this component\nwill need to be provided in the [keys] input or the formControl of the layout container\nas well. The order in which they are provided there, will define the order in which\nthe items will be rendered.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-configurable-layout-item\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./configurable-layout-item.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                key\n                            \n                            \n                                    Public\n                                    Readonly\n                                label\n                            \n                            \n                                    Public\n                                    Readonly\n                                template\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                key\n                            \n                            \n                                label\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        key\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:19\n                            \n                        \n                \n                    \n                        The unique key of the layout item.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:24\n                            \n                        \n                \n                    \n                        An optional label for the layout item used for WCAG purposes.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        key\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:19\n                        \n                    \n\n            \n                \n                    The unique key of the layout item.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        label\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:24\n                        \n                    \n\n            \n                \n                    An optional label for the layout item used for WCAG purposes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        template\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild>('contentTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:29\n                        \n                    \n\n            \n                \n                    The template reference of the;\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, TemplateRef, input, viewChild } from '@angular/core';\n\n/**\n * The layout item pairs with the `` container.\n * This component will in itself not be rendered. The key provided in this component\n * will need to be provided in the `[keys]` input or the `formControl` of the layout container\n * as well. The order in which they are provided there, will define the order in which\n * the items will be rendered.\n */\n@Component({\n\tselector: 'ngx-configurable-layout-item',\n\ttemplateUrl: './configurable-layout-item.component.html',\n\tstandalone: true,\n})\nexport class NgxConfigurableLayoutItemComponent {\n\t/**\n\t * The unique key of the layout item.\n\t */\n\tpublic readonly key = input.required();\n\n\t/**\n\t * An optional label for the layout item used for WCAG purposes.\n\t */\n\tpublic readonly label = input();\n\n\t/**\n\t * The template reference of the;\n\t */\n\tpublic readonly template = viewChild>('contentTmpl');\n}\n\n    \n\n    \n        \n\t\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxConfigurableLayoutItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{"url":"interfaces/NgxConfigurableLayoutItemDropEvent.html","title":"interface - NgxConfigurableLayoutItemDropEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxConfigurableLayoutItemDropEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/configurable-layout.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentGrid\n                                        \n                                \n                                \n                                        \n                                            element\n                                        \n                                \n                                \n                                        \n                                            eventType\n                                        \n                                \n                                \n                                        \n                                            showInactive\n                                        \n                                \n                                \n                                        \n                                            targetRowIndex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentGrid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentGrid:         NgxConfigurableLayoutGrid\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxConfigurableLayoutGrid\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        element:         NgxConfigurableLayoutItemEntity\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxConfigurableLayoutItemEntity\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventType:     \"sorting\" | \"moving\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"sorting\" | \"moving\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showInactive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showInactive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targetRowIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        targetRowIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxConfigurableLayoutItemSizeOption = 'fit-content' | 'fill' | 'equal';\n\nexport type NgxConfigurableLayoutType = 'static' | 'editable';\n\nexport interface NgxConfigurableLayoutItemEntity {\n\tkey: string;\n\tisActive: boolean;\n\tdisabled?: boolean;\n}\n\nexport type NgxConfigurableLayoutGrid = NgxConfigurableLayoutItemEntity[][];\n\nexport interface NgxConfigurableLayoutItemDropEvent {\n\tcurrentGrid: NgxConfigurableLayoutGrid;\n\teventType: 'sorting' | 'moving';\n\telement: NgxConfigurableLayoutItemEntity;\n\tshowInactive: boolean;\n\ttargetRowIndex: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxConfigurableLayoutItemEntity.html":{"url":"interfaces/NgxConfigurableLayoutItemEntity.html","title":"interface - NgxConfigurableLayoutItemEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxConfigurableLayoutItemEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/configurable-layout.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            disabled\n                                        \n                                \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxConfigurableLayoutItemSizeOption = 'fit-content' | 'fill' | 'equal';\n\nexport type NgxConfigurableLayoutType = 'static' | 'editable';\n\nexport interface NgxConfigurableLayoutItemEntity {\n\tkey: string;\n\tisActive: boolean;\n\tdisabled?: boolean;\n}\n\nexport type NgxConfigurableLayoutGrid = NgxConfigurableLayoutItemEntity[][];\n\nexport interface NgxConfigurableLayoutItemDropEvent {\n\tcurrentGrid: NgxConfigurableLayoutGrid;\n\teventType: 'sorting' | 'moving';\n\telement: NgxConfigurableLayoutItemEntity;\n\tshowInactive: boolean;\n\ttargetRowIndex: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxConfigurableLayoutItemSizePipe.html":{"url":"pipes/NgxConfigurableLayoutItemSizePipe.html","title":"pipe - NgxConfigurableLayoutItemSizePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxConfigurableLayoutItemSizePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/item-size/item-size.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxConfigurableLayoutItemSize\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(undefined: literal type, itemSize: NgxConfigurableLayoutItemSizeOption)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/item-size/item-size.pipe.ts:17\n                        \n                    \n\n\n            \n                \n                        Returns the needed styling for the ngx-configurable-layout component\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {\n\t\t\tkeys: null,\n\t\t\tshowInactive: true,\n\t\t}\n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                itemSize\n                                            \n                                                            NgxConfigurableLayoutItemSizeOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe itemSize used by the layout\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { NgxConfigurableLayoutItemEntity, NgxConfigurableLayoutItemSizeOption } from '../../types';\n\n@Pipe({\n\tname: 'ngxConfigurableLayoutItemSize',\n\tstandalone: true,\n})\nexport class NgxConfigurableLayoutItemSizePipe implements PipeTransform {\n\t/**\n\t * Returns the needed styling for the ngx-configurable-layout component\n\t *\n\t * @param keys - The keys used in the grid\n\t * @param showInactive - Whether we want to show inactive items\n\t * @param itemSize - The itemSize used by the layout\n\t */\n\ttransform(\n\t\t{\n\t\t\tkeys,\n\t\t\tshowInactive,\n\t\t}: { keys: NgxConfigurableLayoutItemEntity[][]; showInactive: boolean } = {\n\t\t\tkeys: null,\n\t\t\tshowInactive: true,\n\t\t},\n\t\titemSize: NgxConfigurableLayoutItemSizeOption\n\t): Record {\n\t\t// Iben: If non data source is provided or if the itemSize is 'fill',\n\t\t// we can use the default grid size which will result in filling up the available grid space.\n\t\tif (!keys || itemSize === 'fill') {\n\t\t\treturn {};\n\t\t}\n\n\t\t// Iben: If itemSize is 'fit-content', the columns will be based on the content of the template\n\t\tif (itemSize === 'fit-content') {\n\t\t\treturn {\n\t\t\t\t'grid-auto-columns': 'max-content',\n\t\t\t};\n\t\t}\n\n\t\t// Iben: If itemSize is 'equal', all items in the grid need to be of equal size.\n\t\t// For this, we grab the row with the largest amount of items, which will define the amount of columns\n\t\tconst longestRow = Math.max(\n\t\t\t...[...keys].map((item) => {\n\t\t\t\treturn item.filter((key) => {\n\t\t\t\t\tif (!showInactive) {\n\t\t\t\t\t\treturn key.isActive;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}).length;\n\t\t\t})\n\t\t);\n\n\t\treturn {\n\t\t\t'grid-template-columns': `repeat(${longestRow}, minmax(0, 1fr))`,\n\t\t};\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookie.html":{"url":"interfaces/NgxCookie.html","title":"interface - NgxCookie","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookie\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            domain\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresAfterDays\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sameSite\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useLocalStorage\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        domain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresAfterDays\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresAfterDays:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sameSite\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sameSite:     \"Lax\" | \"Strict\" | \"None\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"Lax\" | \"Strict\" | \"None\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useLocalStorage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useLocalStorage:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieChangedEvent.html":{"url":"interfaces/NgxCookieChangedEvent.html","title":"interface - NgxCookieChangedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieChangedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxCookieEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            changedCategories\n                                        \n                                \n                                \n                                        \n                                            changedServices\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        changedCategories\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        changedCategories:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        changedServices\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        changedServices:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieConfiguration.html":{"url":"interfaces/NgxCookieConfiguration.html","title":"interface - NgxCookieConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoClearCookies\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            autoShow\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cookie\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            guiOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideFromBots\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lazyHtmlGeneration\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            manageScriptTags\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revision\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            root\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoClearCookies\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoClearCookies:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        autoShow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoShow:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cookie\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cookie:         NgxCookie\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxCookie\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        guiOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        guiOptions:     GuiOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     GuiOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideFromBots\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideFromBots:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lazyHtmlGeneration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lazyHtmlGeneration:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        manageScriptTags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        manageScriptTags:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \"opt-in\" | \"opt-out\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"opt-in\" | \"opt-out\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revision\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revision:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        root\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        root:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieEvent.html":{"url":"interfaces/NgxCookieEvent.html","title":"interface - NgxCookieEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cookie\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cookie\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cookie:     CookieValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CookieValue\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieLanguageConfiguration.html":{"url":"interfaces/NgxCookieLanguageConfiguration.html","title":"interface - NgxCookieLanguageConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieLanguageConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoDetect\n                                        \n                                \n                                \n                                        \n                                            default\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            rtl\n                                        \n                                \n                                \n                                        \n                                            translations\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoDetect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoDetect:     \"document\" | \"browser\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"document\" | \"browser\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rtl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rtl:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translations:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxCookieService.html":{"url":"injectables/NgxCookieService.html","title":"injectable - NgxCookieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxCookieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/services/cookie/cookie.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that implements the CookieConsent from https://cookieconsent.orestbida.com and provides the necessary Observables to handle this setup.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                cookiesChanged$\n                            \n                            \n                                    Private\n                                    Readonly\n                                cookiesChangedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                cookiesConsentChanged$\n                            \n                            \n                                    Private\n                                    Readonly\n                                cookiesConsentChangedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                cookiesConsented$\n                            \n                            \n                                    Private\n                                    Readonly\n                                cookiesConsentedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                firstCookiesConsented$\n                            \n                            \n                                    Private\n                                    Readonly\n                                firstCookiesConsentedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                modalVisible$\n                            \n                            \n                                    Private\n                                    Readonly\n                                modalVisibleSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                acceptCategory\n                            \n                            \n                                    Public\n                                acceptService\n                            \n                            \n                                    Public\n                                getCookie\n                            \n                            \n                                    Public\n                                getCookieObservable\n                            \n                            \n                                    Public\n                                hasAcceptedCategory\n                            \n                            \n                                    Public\n                                hasAcceptedService\n                            \n                            \n                                    Public\n                                removeCookie\n                            \n                            \n                                    Public\n                                setCookie\n                            \n                            \n                                    Public\n                                setupCookiesHandler\n                            \n                            \n                                    Public\n                                showModal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        acceptCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    acceptCategory(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:184\n                        \n                    \n\n\n            \n                \n                        Accept a category of cookies\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the categories\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        acceptService\n                        \n                    \n                \n            \n            \n                \n                        \n                    acceptService(category: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:213\n                        \n                    \n\n\n            \n                \n                        Accept a category of cookies\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the category\n\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the service\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCookie\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCookie(cookie: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:229\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Get a cookie\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nName of the cookie\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataType | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCookieObservable\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCookieObservable(cookie: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:238\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Get a cookie as an observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nName of the cookie\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasAcceptedCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasAcceptedCategory(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:166\n                        \n                    \n\n\n            \n                \n                        Whether a certain category of cookies was accepted\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the category\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasAcceptedService\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasAcceptedService(category: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:194\n                        \n                    \n\n\n            \n                \n                        Whether a certain service within a category was accepted\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the category\n\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the service\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeCookie\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeCookie(cookie: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:277\n                        \n                    \n\n\n            \n                \n                        Remove a cookie\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cookie we wish to remove\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setCookie\n                        \n                    \n                \n            \n            \n                \n                        \n                    setCookie(cookie: NgxCookieValue)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:256\n                        \n                    \n\n\n            \n                \n                        Set a cookie\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            NgxCookieValue\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cookie we wish to set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setupCookiesHandler\n                        \n                    \n                \n            \n            \n                \n                        \n                    setupCookiesHandler(categories: NgxCookieCategories, language: NgxCookieLanguageConfiguration, configuration?: NgxCookieConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Sets up the CookieConsent.\nFor more information of on this configuration, check the documentation\nhttps://cookieconsent.orestbida.com/essential/getting-started.html\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                categories\n                                            \n                                                            NgxCookieCategories\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe categories of cookies\n\n\n                                            \n                                        \n                                        \n                                                language\n                                            \n                                                            NgxCookieLanguageConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe language settings of the cookies\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxCookieConfiguration\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional set configuration settings\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showModal\n                        \n                    \n                \n            \n            \n                \n                        \n                    showModal()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:220\n                        \n                    \n\n\n            \n                \n                        Show the cookie modal\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cookiesChanged$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable>\n\n                    \n                \n                \n                    \n                        Default value : this.cookiesChangedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:86\n                        \n                    \n\n            \n                \n                    Emits every time the set cookies have been changed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cookiesChangedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject>\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:53\n                        \n                    \n\n            \n                \n                    Subject to hold the cookiesChanged event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cookiesConsentChanged$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.cookiesConsentChangedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:75\n                        \n                    \n\n            \n                \n                    An event triggered when the user modifies their preferences and only if consent has already been provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cookiesConsentChangedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:41\n                        \n                    \n\n            \n                \n                    Subject to hold the consentChanged event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cookiesConsented$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.cookiesConsentedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:69\n                        \n                    \n\n            \n                \n                    An event triggering the choice of consent on every page load.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cookiesConsentedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:36\n                        \n                    \n\n            \n                \n                    Subject to hold the onConsent event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        firstCookiesConsented$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.firstCookiesConsentedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:63\n                        \n                    \n\n            \n                \n                    An event triggered only the very first time that the user expresses their choice of consent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        firstCookiesConsentedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:31\n                        \n                    \n\n            \n                \n                    Subject to hold the onFirstConsent event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        modalVisible$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.modalVisibleSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:81\n                        \n                    \n\n            \n                \n                    Whether the cookies modal is currently visible\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        modalVisibleSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tfalse\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:46\n                        \n                    \n\n            \n                \n                    Subject to hold the modalVisible event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:58\n                        \n                    \n\n            \n                \n                    Instance of the window service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport {\n\tBehaviorSubject,\n\tObservable,\n\tSubject,\n\tcombineLatest,\n\tdistinctUntilChanged,\n\tmap,\n\tstartWith,\n} from 'rxjs';\nimport * as CookieConsent from 'vanilla-cookieconsent';\n\nimport {\n\tNgxCookieCategories,\n\tNgxCookieChangedEvent,\n\tNgxCookieConfiguration,\n\tNgxCookieEvent,\n\tNgxCookieLanguageConfiguration,\n\tNgxCookieValue,\n} from '../../types';\n\n/**\n * A service that implements the CookieConsent from https://cookieconsent.orestbida.com and provides the necessary Observables to handle this setup.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxCookieService {\n\t/**\n\t * Subject to hold the onFirstConsent event\n\t */\n\tprivate readonly firstCookiesConsentedSubject: Subject = new Subject();\n\n\t/**\n\t * Subject to hold the onConsent event\n\t */\n\tprivate readonly cookiesConsentedSubject: Subject = new Subject();\n\n\t/**\n\t * Subject to hold the consentChanged event\n\t */\n\tprivate readonly cookiesConsentChangedSubject: Subject = new Subject();\n\n\t/**\n\t * Subject to hold the modalVisible event\n\t */\n\tprivate readonly modalVisibleSubject: BehaviorSubject = new BehaviorSubject(\n\t\tfalse\n\t);\n\n\t/**\n\t * Subject to hold the cookiesChanged event\n\t */\n\tprivate readonly cookiesChangedSubject: Subject> = new Subject();\n\n\t/**\n\t * Instance of the window service\n\t */\n\tprivate readonly windowService: NgxWindowService = inject(NgxWindowService);\n\n\t/**\n\t * An event triggered only the very first time that the user expresses their choice of consent\n\t */\n\tpublic readonly firstCookiesConsented$: Observable =\n\t\tthis.firstCookiesConsentedSubject.asObservable();\n\n\t/**\n\t * An event triggering the choice of consent on every page load.\n\t */\n\tpublic readonly cookiesConsented$: Observable =\n\t\tthis.cookiesConsentedSubject.asObservable();\n\n\t/**\n\t * An event triggered when the user modifies their preferences and only if consent has already been provided.\n\t */\n\tpublic readonly cookiesConsentChanged$: Observable =\n\t\tthis.cookiesConsentChangedSubject.asObservable();\n\n\t/**\n\t * Whether the cookies modal is currently visible\n\t */\n\tpublic readonly modalVisible$: Observable = this.modalVisibleSubject.asObservable();\n\n\t/**\n\t * Emits every time the set cookies have been changed\n\t */\n\tpublic readonly cookiesChanged$: Observable> =\n\t\tthis.cookiesChangedSubject.asObservable();\n\n\t/**\n\t * Sets up the CookieConsent.\n\t *\n\t * For more information of on this configuration, check the documentation\n\t * https://cookieconsent.orestbida.com/essential/getting-started.html\n\t *\n\t * @param categories - The categories of cookies\n\t * @param language - The language settings of the cookies\n\t * @param configuration - An optional set configuration settings\n\t */\n\tpublic setupCookiesHandler(\n\t\tcategories: NgxCookieCategories,\n\t\tlanguage: NgxCookieLanguageConfiguration,\n\t\tconfiguration?: NgxCookieConfiguration\n\t): void {\n\t\t// Iben: If we're not in the browser, we early exit, so server-side rendering can be enabled\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If no categories were provided, we early exit and throw an error, as the cookie preference cannot be shown without.\n\t\tif (!categories || Object.keys(categories).length === 0) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxCookies: No categories were provided for the cookie handler. At least one category is required.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Setup the onFirstConsent listener\n\t\tconst onFirstConsent = (event) => {\n\t\t\tthis.firstCookiesConsentedSubject.next(event);\n\t\t};\n\t\tonFirstConsent.bind(this);\n\n\t\t// Iben: Setup the onConsent listener\n\t\tconst onConsent = (event) => {\n\t\t\tthis.cookiesConsentedSubject.next(event);\n\t\t};\n\t\tonConsent.bind(this);\n\n\t\t// Iben: Setup the onChange listener\n\t\tconst onChange = (event) => {\n\t\t\tthis.cookiesConsentChangedSubject.next(event);\n\t\t};\n\t\tonChange.bind(this);\n\n\t\t// Iben: Setup the onModalShow listener\n\t\tconst onModalShow = () => {\n\t\t\tthis.modalVisibleSubject.next(true);\n\t\t};\n\t\tonModalShow.bind(this);\n\n\t\t// Iben: Setup the onModalHide listener\n\t\tconst onModalHide = () => {\n\t\t\tthis.modalVisibleSubject.next(false);\n\t\t};\n\t\tonModalHide.bind(this);\n\n\t\t// Iben: Run the CookieConsent handler\n\t\tCookieConsent.run({\n\t\t\t...(configuration || {}),\n\t\t\tonFirstConsent,\n\t\t\tonConsent,\n\t\t\tonChange,\n\t\t\tonModalHide,\n\t\t\tonModalShow,\n\t\t\tcategories,\n\t\t\tlanguage,\n\t\t});\n\t}\n\n\t/**\n\t * Whether a certain category of cookies was accepted\n\t *\n\t * @param name - The name of the category\n\t */\n\tpublic hasAcceptedCategory(name: string): Observable {\n\t\t// Iben: Return every time the cookie consent has changed\n\t\treturn combineLatest([\n\t\t\tthis.cookiesConsented$.pipe(startWith(undefined)),\n\t\t\tthis.cookiesConsentChanged$.pipe(startWith(undefined)),\n\t\t]).pipe(\n\t\t\tmap(() => {\n\t\t\t\t// Iben: Check if the category was accepted\n\t\t\t\treturn CookieConsent.acceptedCategory(name);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Accept a category of cookies\n\t *\n\t * @param name - The name of the categories\n\t */\n\tpublic acceptCategory(name: string): void {\n\t\tCookieConsent.acceptCategory(name);\n\t}\n\n\t/**\n\t * Whether a certain service within a category was accepted\n\t *\n\t * @param category - The name of the category\n\t * @param name - The name of the service\n\t */\n\tpublic hasAcceptedService(category: string, name: string): Observable {\n\t\t// Iben: Return every time the cookie consent has changed\n\t\treturn combineLatest([\n\t\t\tthis.cookiesConsented$.pipe(startWith(undefined)),\n\t\t\tthis.cookiesConsentChanged$.pipe(startWith(undefined)),\n\t\t]).pipe(\n\t\t\tmap(() => {\n\t\t\t\t// Iben: Check if the service within the provided category was accepted\n\t\t\t\treturn CookieConsent.acceptedService(name, category);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Accept a category of cookies\n\t *\n\t * @param category - The name of the category\n\t * @param name - The name of the service\n\t */\n\tpublic acceptService(category: string, name: string): void {\n\t\tCookieConsent.acceptService(name, category);\n\t}\n\n\t/**\n\t * Show the cookie modal\n\t */\n\tpublic showModal(): void {\n\t\tCookieConsent.show(true);\n\t}\n\n\t/**\n\t * Get a cookie\n\t *\n\t * @param cookie - Name of the cookie\n\t */\n\tpublic getCookie(cookie: string): DataType | undefined {\n\t\treturn (CookieConsent.getCookie('data') || {})[cookie];\n\t}\n\n\t/**\n\t * Get a cookie as an observable\n\t *\n\t * @param cookie - Name of the cookie\n\t */\n\tpublic getCookieObservable(cookie: string): Observable {\n\t\t// Iben: Return every time the set cookies are changed\n\t\treturn this.cookiesChanged$.pipe(\n\t\t\tstartWith(CookieConsent.getCookie('data') || {}),\n\t\t\t// Iben: Get the cookie value\n\t\t\tmap(() => {\n\t\t\t\treturn this.getCookie(cookie);\n\t\t\t}),\n\t\t\t// Iben: As the cookiesChanged event emits every time all cookies are rest, we check if the cookie value was really changed\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * Set a cookie\n\t *\n\t * @param cookie - The cookie we wish to set\n\t */\n\tpublic setCookie(cookie: NgxCookieValue): void {\n\t\t// Iben: Set the cookie\n\t\tconst isSet = CookieConsent.setCookieData({\n\t\t\tvalue: { [cookie.name]: cookie.value },\n\t\t\tmode: 'update',\n\t\t});\n\n\t\t// Iben: If the cookie was not set, we return\n\t\tif (!isSet) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Update the subject so we can notify listeners\n\t\tthis.cookiesChangedSubject.next(CookieConsent.getCookie('data'));\n\t}\n\n\t/**\n\t * Remove a cookie\n\t *\n\t * @param cookie - The cookie we wish to remove\n\t */\n\tpublic removeCookie(cookie: string): void {\n\t\t// Iben: Get the current cookies\n\t\tconst currentCookies = CookieConsent.getCookie('data') || {};\n\n\t\t// Iben: Remove the cookie from the currently set cookies\n\t\tconst { [cookie]: _removedValue, ...value } = currentCookies;\n\n\t\t// Iben: Remove the cookie from the cookies holder\n\t\tconst isSet = CookieConsent.setCookieData({ value, mode: 'overwrite' });\n\n\t\t// Iben: If the cookie was not set, we return\n\t\tif (!isSet) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Update the subject so we can notify listeners\n\t\tthis.cookiesChangedSubject.next(CookieConsent.getCookie('data'));\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieValue.html":{"url":"interfaces/NgxCookieValue.html","title":"interface - NgxCookieValue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieValue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/set-cookie.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgxCookieValue {\n\tname: string;\n\tvalue: DataType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxCookiesFallBackComponent.html":{"url":"directives/NgxCookiesFallBackComponent.html","title":"directive - NgxCookiesFallBackComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxCookiesFallBackComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/abstracts/cookie-fallback/cookie-fallback.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component that can optionally be used as a fallback to content that depends on accepted cookies\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                cookies\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        cookies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/abstracts/cookie-fallback/cookie-fallback.component.ts:13\n                        \n                    \n\n            \n                \n                    The cookies that were required to show the original content\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\n\nimport { NgxHasCookieConfiguration } from '../../types';\n\n/**\n *An abstract component that can optionally be used as a fallback to content that depends on accepted cookies\n */\n@Directive()\nexport abstract class NgxCookiesFallBackComponent {\n\t/**\n\t * The cookies that were required to show the original content\n\t */\n\treadonly cookies = input([]);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxCurrencyTableCellComponent.html":{"url":"components/NgxCurrencyTableCellComponent.html","title":"component - NgxCurrencyTableCellComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxCurrencyTableCellComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/cell/currency-cell.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxAbstractTableCellDirective\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: NgxAbstractTableCellDirective, useExisting: NgxCurrencyTableCellComponent,\n}\n                \n            \n\n\n            \n                selector\n                ngx-table-currency-cell\n            \n\n\n            \n                imports\n                \n                            CurrencyPipe\n                \n            \n\n\n\n            \n                template\n                \n\t{{ item | currency: currency() }}\n\n\t\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                cellClass\n                            \n                            \n                                    \n                                    Public\n                                    \n                                cellTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                currency\n                            \n                            \n                                    \n                                    Public\n                                    \n                                footerTemplate\n                            \n                            \n                                    \n                                    Public\n                                    \n                                headerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:31\n\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:42\n\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:47\n\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:36\n\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:57\n\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:82\n\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:91\n\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ngx-currency-table-cell'\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:49\n\n                        \n                    \n\n            \n                \n                    A generic class to indicate that this is a currency cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('cellTmpl', {static: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:44\n\n                        \n                    \n\n            \n                \n                    ViewChild that represents the cell template\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('EUR')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/currency-cell.component.ts:25\n                        \n                    \n\n            \n                \n                    The ISO 4217 format of the provided amount, by default EUR\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('footerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:38\n\n                        \n                    \n\n            \n                \n                    A template for the footer of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('headerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:32\n\n                        \n                    \n\n            \n                \n                    A template for the header of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:31\n\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:42\n\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:47\n\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:52\n\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:36\n\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:14\n\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CurrencyPipe } from '@angular/common';\nimport { Component, ContentChild, TemplateRef, ViewChild, input } from '@angular/core';\n\nimport { NgxAbstractTableCellDirective } from './cell.directive';\n\n@Component({\n\tselector: 'ngx-table-currency-cell',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NgxAbstractTableCellDirective,\n\t\t\tuseExisting: NgxCurrencyTableCellComponent,\n\t\t},\n\t],\n\ttemplate: `\n\t\t\n\t\t\t{{ item | currency: currency() }}\n\t\t\n\t`,\n\timports: [CurrencyPipe],\n})\nexport class NgxCurrencyTableCellComponent extends NgxAbstractTableCellDirective {\n\t/**\n\t * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format of the provided amount, by default `EUR`\n\t */\n\tpublic readonly currency = input('EUR');\n\n\t/**\n\t * A template for the header of the cell\n\t */\n\n\t@ContentChild('headerTmpl', { static: false })\n\tpublic override headerTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the footer of the cell\n\t */\n\n\t@ContentChild('footerTmpl', { static: false })\n\tpublic override footerTemplate: TemplateRef = undefined;\n\n\t/**\n\t * ViewChild that represents the cell template\n\t */\n\n\t@ViewChild('cellTmpl', { static: true }) public override cellTemplate: TemplateRef = undefined;\n\n\t/**\n\t * A generic class to indicate that this is a currency cell\n\t */\n\tpublic override cellClass: string = 'ngx-currency-table-cell';\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t{{ item | currency: currency() }}\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxCurrencyTableCellComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxCypressTagDirective.html":{"url":"directives/NgxCypressTagDirective.html","title":"directive - NgxCypressTagDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxCypressTagDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [cypressTag]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cypressTag\n                            \n                            \n                                    Public\n                                tag\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                cypressTag\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        cypressTag\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts:25\n                            \n                        \n                \n                    \n                        Sets the tag for Cypress\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cypressTag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts:25\n                        \n                    \n\n            \n                \n                    Sets the tag for Cypress\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n\t\treturn get({}, this.cypressTag());\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tcomputed,\n\tDirective,\n\tinput,\n\tInputSignal,\n\tSignal,\n} from '@angular/core';\nimport { get } from 'lodash';\n\n@Directive({\n\tselector: '[cypressTag]',\n\tstandalone: true,\n\thost: {\n\t\t'[attr.data-cy]': 'tag()',\n\t},\n})\nexport class NgxCypressTagDirective {\n\tpublic tag: Signal = computed(() => {\n\t\treturn get({}, this.cypressTag());\n\t});\n\n\t/**\n\t * Sets the tag for Cypress\n\t */\n\tpublic cypressTag: InputSignal = input.required();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxDateTableCellComponent.html":{"url":"components/NgxDateTableCellComponent.html","title":"component - NgxDateTableCellComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxDateTableCellComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/cell/date-cell.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxAbstractTableCellDirective\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: NgxAbstractTableCellDirective, useExisting: NgxDateTableCellComponent,\n}\n                \n            \n\n\n            \n                selector\n                ngx-table-date-cell\n            \n\n\n            \n                imports\n                \n                            DatePipe\n                                NgxTableGetPipe\n                \n            \n\n\n\n            \n                template\n                \n\t@if (rowKey()) { @if (row | getProp: rowKey(); as rowItem) {\n\t\n\t\t{{ rowItem | date : format() }}\n\t\n\t} @else {\n\t{{ emptyLabel() }}\n\t} } @else { @if (item) {\n\t{{ (itemKey() ? item[itemKey()] : item) | date : format() }}\n\t} @else {\n\t{{ emptyLabel() }}\n\t} }\n\n\t\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                cellClass\n                            \n                            \n                                    \n                                    Public\n                                    \n                                cellTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                emptyLabel\n                            \n                            \n                                    \n                                    Public\n                                    \n                                footerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                format\n                            \n                            \n                                    \n                                    Public\n                                    \n                                headerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                itemKey\n                            \n                            \n                                    Public\n                                    Readonly\n                                rowKey\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                itemKey\n                            \n                            \n                                rowKey\n                            \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        itemKey\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:47\n                            \n                        \n                \n                    \n                        In case the date is nested in an object, we can provide a key to fetch it\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        rowKey\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:52\n                            \n                        \n                \n                    \n                        In case the date is nested in the row, we can provide a key to fetch it\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:31\n\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:42\n\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:47\n\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:36\n\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:57\n\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:82\n\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:91\n\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ngx-date-table-cell'\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:77\n\n                        \n                    \n\n            \n                \n                    A generic class to indicate that this is a date cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('cellTmpl', {static: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:72\n\n                        \n                    \n\n            \n                \n                    ViewChild that represents the cell template\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        emptyLabel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('Empty date')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:42\n                        \n                    \n\n            \n                \n                    The label to display when date is invalid or empty\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef<>\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('footerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:65\n\n                        \n                    \n\n            \n                \n                    A template for the footer of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('dd/MM/yyyy')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:37\n                        \n                    \n\n            \n                \n                    The format of the provided date, by default dd/MM/yyyy\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef<>\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('headerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:59\n\n                        \n                    \n\n            \n                \n                    A template for the header of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        itemKey\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:47\n                        \n                    \n\n            \n                \n                    In case the date is nested in an object, we can provide a key to fetch it\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        rowKey\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:52\n                        \n                    \n\n            \n                \n                    In case the date is nested in the row, we can provide a key to fetch it\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:31\n\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:42\n\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:47\n\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:52\n\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:36\n\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:14\n\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { DatePipe } from '@angular/common';\nimport { Component, ContentChild, TemplateRef, ViewChild, input } from '@angular/core';\n\nimport { NgxTableGetPipe } from '../../pipes/get-pipe/get.pipe';\n\nimport { NgxAbstractTableCellDirective } from './cell.directive';\n\n@Component({\n\tselector: 'ngx-table-date-cell',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NgxAbstractTableCellDirective,\n\t\t\tuseExisting: NgxDateTableCellComponent,\n\t\t},\n\t],\n\ttemplate: `\n\t\t\n\t\t\t@if (rowKey()) { @if (row | getProp: rowKey(); as rowItem) {\n\t\t\t\n\t\t\t\t{{ rowItem | date : format() }}\n\t\t\t\n\t\t\t} @else {\n\t\t\t{{ emptyLabel() }}\n\t\t\t} } @else { @if (item) {\n\t\t\t{{ (itemKey() ? item[itemKey()] : item) | date : format() }}\n\t\t\t} @else {\n\t\t\t{{ emptyLabel() }}\n\t\t\t} }\n\t\t\n\t`,\n\timports: [DatePipe, NgxTableGetPipe],\n})\nexport class NgxDateTableCellComponent extends NgxAbstractTableCellDirective {\n\t/**\n\t * The format of the provided date, by default `dd/MM/yyyy`\n\t */\n\tpublic readonly format = input('dd/MM/yyyy');\n\n\t/**\n\t * The label to display when date is invalid or empty\n\t */\n\tpublic readonly emptyLabel = input('Empty date');\n\n\t/**\n\t * In case the date is nested in an object, we can provide a key to fetch it\n\t */\n\tpublic readonly itemKey = input();\n\n\t/**\n\t * In case the date is nested in the row, we can provide a key to fetch it\n\t */\n\tpublic readonly rowKey = input();\n\n\t/**\n\t * A template for the header of the cell\n\t */\n\n\t@ContentChild('headerTmpl', { static: false })\n\tpublic override headerTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the footer of the cell\n\t */\n\n\t@ContentChild('footerTmpl', { static: false })\n\tpublic override footerTemplate: TemplateRef = undefined;\n\n\t/**\n\t * ViewChild that represents the cell template\n\t */\n\n\t@ViewChild('cellTmpl', { static: true })\n\tpublic override cellTemplate: TemplateRef = undefined;\n\n\t/**\n\t * A generic class to indicate that this is a date cell\n\t */\n\tpublic override cellClass: string = 'ngx-date-table-cell';\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t@if (rowKey()) { @if (row | getProp: rowKey(); as rowItem) {\t\t\t{{ rowItem | date : format() }}\t\t} @else {\t{{ emptyLabel() }}\t} } @else { @if (item) {\t{{ (itemKey() ? item[itemKey()] : item) | date : format() }}\t} @else {\t{{ emptyLabel() }}\t} }\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxDateTableCellComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxDisplayContentComponent.html":{"url":"directives/NgxDisplayContentComponent.html","title":"directive - NgxDisplayContentComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxDisplayContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class to use when implementing custom fallbacks for the NgxDisplayContentDirective\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts:13\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts:13\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, inject, input } from '@angular/core';\n\n/**\n * An abstract class to use when implementing custom fallbacks for the NgxDisplayContentDirective\n */\n@Directive()\nexport abstract class NgxDisplayContentComponent {\n\tpublic elementRef: ElementRef = inject(ElementRef);\n\n\t/**\n\t * An optional data input to provide data to the fallback components. This property is typed as any.\n\t */\n\treadonly data = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxDisplayContentConfiguration.html":{"url":"interfaces/NgxDisplayContentConfiguration.html","title":"interface - NgxDisplayContentConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxDisplayContentConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/display-content.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            components\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideWhenNoTemplateProvided\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            listenToOnlineStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        components\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        components:         NgxDisplayContentComponentConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxDisplayContentComponentConfiguration\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideWhenNoTemplateProvided\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideWhenNoTemplateProvided:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        listenToOnlineStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        listenToOnlineStatus:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TemplateRef, Type } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../abstracts';\n\nexport type NgxDisplayContentStatus = 'loading' | 'error' | 'offline';\n\nexport type NgxDisplayContentAriaLive = 'polite' | 'assertive' | 'off';\n\ntype NgxDisplayContentRecord = Partial>;\n\nexport type NgxDisplayContentConditions = NgxDisplayContentRecord;\n\nexport type NgxDisplayContentComponentConfiguration = NgxDisplayContentRecord\n>;\n\nexport type NgxDisplayContentOverrideConfiguration = NgxDisplayContentRecord;\n\tdata?: any;\n}>;\n\nexport interface NgxDisplayContentConfiguration {\n\tcomponents: NgxDisplayContentComponentConfiguration;\n\thideWhenNoTemplateProvided?: boolean;\n\tlistenToOnlineStatus?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxDisplayContentDirective.html":{"url":"directives/NgxDisplayContentDirective.html","title":"directive - NgxDisplayContentDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxDisplayContentDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                NgxDisplayContentDirective handles whether content should be shown based on a loading, error or offline condition by using provided default components or a provided override template\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [displayContent]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                conditions\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                displayContent\n                            \n                            \n                                    Readonly\n                                displayContentAriaLive\n                            \n                            \n                                    Public\n                                displayContentConfiguration\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                onlineService\n                            \n                            \n                                    Private\n                                overrideConfiguration\n                            \n                            \n                                    Private\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                updateViewSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                renderInitialTemplate\n                            \n                            \n                                    Private\n                                renderTemplate\n                            \n                            \n                                    Private\n                                setAriaBusyTag\n                            \n                            \n                                    Private\n                                setAriaLiveTag\n                            \n                            \n                                    Private\n                                updateConditions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                displayContent\n                            \n                            \n                                displayContentConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:81\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        displayContent\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:68\n                            \n                        \n                \n                    \n                        Renders the item or a default fallback based on the provided conditions\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        displayContentConfiguration\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:73\n                            \n                        \n                \n                    \n                        Override the existing configuration with custom configuration\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:118\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:168\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderInitialTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderInitialTemplate()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:214\n                        \n                    \n\n\n            \n                \n                        Renders the initial template\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderTemplate(status: NgxDisplayContentStatus, component: Type)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:179\n                        \n                    \n\n\n            \n                \n                        Renders the provided component or template\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            NgxDisplayContentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe status we're handling\n\n\n                                            \n                                        \n                                        \n                                                component\n                                            \n                                                            Type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component we're wishing to render\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setAriaBusyTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAriaBusyTag(isLoading: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:277\n                        \n                    \n\n\n            \n                \n                        Sets the aria-busy tag of the item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isLoading\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe loading state of the item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setAriaLiveTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAriaLiveTag(value: \"polite\" | \"assertive\" | \"off\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:237\n                        \n                    \n\n\n            \n                \n                        Sets the aria-live tag of the item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        \"polite\" | \"assertive\" | \"off\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value we wish to set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateConditions\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateConditions(conditions: NgxDisplayContentConditions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:223\n                        \n                    \n\n\n            \n                \n                        Updates the conditions\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                conditions\n                                            \n                                                            NgxDisplayContentConditions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe conditions we want to merge with the current set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        conditions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxDisplayContentConditions\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:63\n                        \n                    \n\n            \n                \n                    Holds the conditions we use to render the component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxDisplayContentConfigurationToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        displayContent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:68\n                        \n                    \n\n            \n                \n                    Renders the item or a default fallback based on the provided conditions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        displayContentAriaLive\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('polite')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:81\n                        \n                    \n\n            \n                \n                    The aria-live label we wish to provide to the parent element. By default, this is 'polite'.\nhttps://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        displayContentConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:73\n                        \n                    \n\n            \n                \n                    Override the existing configuration with custom configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:48\n                        \n                    \n\n            \n                \n                    A subject to handle the destroyed flow\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onlineService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxOnlineService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overrideConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxDisplayContentOverrideConfiguration\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:58\n                        \n                    \n\n            \n                \n                    Holds an optional override configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        updateViewSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:53\n                        \n                    \n\n            \n                \n                    A subject to know when we need to update the view\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tAfterViewInit,\n\tChangeDetectorRef,\n\tDirective,\n\tElementRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tType,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject, distinctUntilChanged, takeUntil, tap } from 'rxjs';\n\nimport { NgxDisplayContentComponent } from '../../abstracts';\nimport { NgxOnlineService } from '../../services';\nimport { NgxDisplayContentConfigurationToken } from '../../tokens';\nimport {\n\tNgxDisplayContentAriaLive,\n\tNgxDisplayContentConditions,\n\tNgxDisplayContentConfiguration,\n\tNgxDisplayContentOverrideConfiguration,\n\tNgxDisplayContentStatus,\n} from '../../types';\n\n/**\n * NgxDisplayContentDirective handles whether content should be shown based on a loading, error or offline condition by using provided default components or a provided override template\n */\n@Directive({\n\tselector: '[displayContent]',\n\tstandalone: true,\n})\nexport class NgxDisplayContentDirective implements AfterViewInit, OnDestroy {\n\tprivate readonly elementRef = inject(ElementRef);\n\tprivate readonly templateRef = inject>(TemplateRef);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\tprivate readonly viewContainer = inject(ViewContainerRef);\n\tprivate readonly onlineService = inject(NgxOnlineService);\n\tprivate readonly configuration = inject(\n\t\tNgxDisplayContentConfigurationToken\n\t);\n\n\t/**\n\t * A subject to handle the destroyed flow\n\t */\n\tprivate readonly onDestroySubject: Subject = new Subject();\n\n\t/**\n\t * A subject to know when we need to update the view\n\t */\n\tprivate readonly updateViewSubject: Subject = new Subject();\n\n\t/**\n\t * Holds an optional override configuration\n\t */\n\tprivate overrideConfiguration: NgxDisplayContentOverrideConfiguration = {};\n\n\t/**\n\t * Holds the conditions we use to render the component\n\t */\n\tprivate conditions: NgxDisplayContentConditions = {};\n\n\t/**\n\t * Renders the item or a default fallback based on the provided conditions\n\t */\n\tpublic displayContent: InputSignal = input.required();\n\n\t/**\n\t * Override the existing configuration with custom configuration\n\t */\n\tpublic displayContentConfiguration: InputSignal =\n\t\tinput();\n\n\t/**\n\t * The aria-live label we wish to provide to the parent element. By default, this is 'polite'.\n\t *\n\t * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n\t */\n\treadonly displayContentAriaLive = input('polite');\n\n\tconstructor() {\n\t\t// Iben: If we want to listen to the online status, we set up a listener to the status of the application\n\t\tif (this.configuration.listenToOnlineStatus) {\n\t\t\tthis.onlineService.online$\n\t\t\t\t.pipe(\n\t\t\t\t\tdistinctUntilChanged(),\n\t\t\t\t\ttap((online) => {\n\t\t\t\t\t\t// Iben: Update the conditions with the new status\n\t\t\t\t\t\tthis.updateConditions({ offline: !online });\n\n\t\t\t\t\t\t// Iben: Notify that the view needs to be updated\n\t\t\t\t\t\tthis.updateViewSubject.next();\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.onDestroySubject)\n\t\t\t\t)\n\t\t\t\t.subscribe();\n\t\t}\n\n\t\teffect(() => {\n\t\t\t// Iben: Update the conditions\n\t\t\tthis.updateConditions(this.displayContent() || {});\n\n\t\t\t// Iben: Notify that the view needs to be updated\n\t\t\tthis.updateViewSubject.next();\n\t\t});\n\n\t\teffect(() => {\n\t\t\t// Iben: Update the override configuration\n\t\t\tthis.overrideConfiguration = this.displayContentConfiguration() || {};\n\n\t\t\t// Iben: Notify that the view needs to be updated\n\t\t\tthis.updateViewSubject.next();\n\t\t});\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Set the aria-live and aria-busy tag of the parent\n\t\tthis.setAriaLiveTag(this.displayContentAriaLive());\n\n\t\t// Iben: Listen to whenever we need to update the view and act accordingly\n\t\tthis.updateViewSubject\n\t\t\t.asObservable()\n\t\t\t.pipe(\n\t\t\t\ttap(() => {\n\t\t\t\t\t// Iben: Clear the current view container\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Update the busy tag\n\t\t\t\t\tthis.setAriaBusyTag(this.conditions.loading);\n\n\t\t\t\t\t// Iben: If we're offline, we render the offline component or template\n\t\t\t\t\tif (this.conditions.offline) {\n\t\t\t\t\t\tthis.renderTemplate('offline', this.configuration.components.offline);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// Iben: If we're loading, we render the loading component or template\n\t\t\t\t\tif (this.conditions.loading) {\n\t\t\t\t\t\tthis.renderTemplate('loading', this.configuration.components.loading);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// Iben: If we've encountered an error, we render the error component or template\n\t\t\t\t\tif (this.conditions.error) {\n\t\t\t\t\t\tthis.renderTemplate('error', this.configuration.components.error);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t//Iben: Render the initial template\n\t\t\t\t\tthis.renderInitialTemplate();\n\t\t\t\t}),\n\t\t\t\t// Iben: We add a second tap here, so the detectChanges gets run after each outcome we did earlier\n\t\t\t\ttap(() => {\n\t\t\t\t\t// Iben: Detect the changes so this works with (nested) OnPush component\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Run the initial content check\n\t\tthis.updateViewSubject.next();\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.onDestroySubject.next();\n\t\tthis.onDestroySubject.complete();\n\t}\n\n\t/**\n\t * Renders the provided component or template\n\t *\n\t * @param  status - The status we're handling\n\t * @param  component - The component we're wishing to render\n\t */\n\tprivate renderTemplate(\n\t\tstatus: NgxDisplayContentStatus,\n\t\tcomponent: Type\n\t): void {\n\t\t// Iben: If an override for this template exists, we render the override template and early exit\n\t\tif (this.overrideConfiguration[status]?.template) {\n\t\t\tthis.viewContainer.createEmbeddedView(this.overrideConfiguration[status]?.template);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If a component was provided, we render this component and pass along the provided data and early exit\n\t\tif (component) {\n\t\t\t// Iben: Render the component\n\t\t\tconst componentRef =\n\t\t\t\tthis.viewContainer.createComponent(component);\n\n\t\t\t// Iben: Pass the data\n\t\t\tcomponentRef.setInput('data', this.overrideConfiguration[status]?.data);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If we need to hide the template when no template was provided, we early exit\n\t\tif (this.configuration.hideWhenNoTemplateProvided) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: In case we don't need to hide the initial template, we render it\n\t\tthis.renderInitialTemplate();\n\t}\n\n\t/**\n\t * Renders the initial template\n\t */\n\tprivate renderInitialTemplate(): void {\n\t\tthis.viewContainer.createEmbeddedView(this.templateRef);\n\t}\n\n\t/**\n\t * Updates the conditions\n\t *\n\t * @param conditions - The conditions we want to merge with the current set\n\t */\n\tprivate updateConditions(conditions: NgxDisplayContentConditions): void {\n\t\t// Iben: Update the conditions, but use a merge so that the online status can be preserved\n\t\tif (conditions) {\n\t\t\tthis.conditions = {\n\t\t\t\t...this.conditions,\n\t\t\t\t...conditions,\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Sets the aria-live tag of the item\n\t * @param  value - The value we wish to set\n\t */\n\tprivate setAriaLiveTag(value: 'polite' | 'assertive' | 'off'): void {\n\t\t// Iben: Get the parent element and early exit if it isn't found\n\t\tconst parentElement: HTMLElement = this.elementRef.nativeElement.parentElement;\n\n\t\tif (!parentElement) {\n\t\t\t// Iben:\n\t\t\tconsole.error(\n\t\t\t\t'NgxLayout: No parent element was found for NgxDisplayContentDirective. Because of that, the correct aria-live label could not be set.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the value is assertive then we always set it, as it has the highest priority\n\t\tif (value === 'assertive') {\n\t\t\tparentElement.setAttribute('aria-live', value);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Fetch the current aria-live label. If none were found, set it automatically\n\t\tconst currentValue = parentElement.getAttribute('aria-live');\n\n\t\tif (!currentValue) {\n\t\t\tparentElement.setAttribute('aria-live', value);\n\t\t}\n\n\t\t// Iben: If the current value is assertive or if the values are the same, we early exit\n\t\tif (currentValue === 'assertive' || currentValue === value) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Set the value\n\t\tparentElement.setAttribute('aria-live', value);\n\t}\n\n\t/**\n\t * Sets the aria-busy tag of the item\n\t * @param  isLoading - The loading state of the item\n\t */\n\tprivate setAriaBusyTag(isLoading: boolean): void {\n\t\tthis.elementRef.nativeElement.parentElement?.setAttribute('aria-busy', `${isLoading}`);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxFormsErrorAbstractComponent.html":{"url":"directives/NgxFormsErrorAbstractComponent.html","title":"directive - NgxFormsErrorAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxFormsErrorAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                errorKeys\n                            \n                            \n                                    Public\n                                    Readonly\n                                errors\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:17\n                            \n                        \n                \n                    \n                        The error object provided by the control\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:17\n                        \n                    \n\n            \n                \n                    The error object provided by the control\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        errorKeys\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:13\n                        \n                    \n\n            \n                \n                    An array of error keys that can be rendered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:9\n                        \n                    \n\n            \n                \n                    An array of error messages that can be rendered\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\nimport { ValidationErrors } from '@angular/forms';\n\n@Directive()\nexport class NgxFormsErrorAbstractComponent {\n\t/**\n\t * An array of error messages that can be rendered\n\t */\n\tpublic readonly errors = input.required();\n\t/**\n\t * An array of error keys that can be rendered\n\t */\n\tpublic readonly errorKeys = input.required();\n\t/**\n\t * The error object provided by the control\n\t */\n\tpublic readonly data = input.required();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxFormsErrorConfigurationOptions.html":{"url":"interfaces/NgxFormsErrorConfigurationOptions.html","title":"interface - NgxFormsErrorConfigurationOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxFormsErrorConfigurationOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/interfaces/errors.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for the ngx-errors directive\n errors - A record with the error key and the corresponding message we wish to show\n showWhen - A setting to know when an error has to be shown. Either 'touched' or 'dirty'\n component - An optional component to provide, which will be used to render the error. If not provided,\n                it will render a p-tag with class ngx-forms-error\n show - The amount of errors we wish to show at once. By default, only one error is shown at a time.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            errors\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            show\n                                        \n                                \n                                \n                                        \n                                            showWhen\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errors:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        show\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        show:         NgxFormsErrorShowSettings\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxFormsErrorShowSettings\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showWhen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showWhen:         NgxFormsErrorShowWhenSettings\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxFormsErrorShowWhenSettings\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxFormsErrorAbstractComponent } from '../abstracts';\n\nexport type NgxFormsErrorShowWhenSettings = 'touched' | 'dirty';\nexport type NgxFormsErrorShowSettings = 'all' | number;\n\n/**\n * Configuration for the ngx-errors directive\n *\n *  errors - A record with the error key and the corresponding message we wish to show\n *  showWhen - A setting to know when an error has to be shown. Either 'touched' or 'dirty'\n *  component - An optional component to provide, which will be used to render the error. If not provided,\n * \t\t\t\tit will render a p-tag with class `ngx-forms-error`\n *  show - The amount of errors we wish to show at once. By default, only one error is shown at a time.\n */\nexport interface NgxFormsErrorConfigurationOptions {\n\terrors: Record;\n\tshowWhen: NgxFormsErrorShowWhenSettings;\n\tcomponent?: Type;\n\tshow?: NgxFormsErrorShowSettings;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxFormsErrorsDirective.html":{"url":"directives/NgxFormsErrorsDirective.html","title":"directive - NgxFormsErrorsDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxFormsErrorsDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/directives/errors/errors.directive.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxFormsErrors]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                abstractControl\n                            \n                            \n                                    Protected\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                componentRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                config\n                            \n                            \n                                    Public\n                                    Readonly\n                                control\n                            \n                            \n                                    Protected\n                                    Readonly\n                                destroyRef\n                            \n                            \n                                    Protected\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Private\n                                errorComponent\n                            \n                            \n                                    Private\n                                errorsElement\n                            \n                            \n                                    Protected\n                                    Readonly\n                                formGroupDirective\n                            \n                            \n                                    Protected\n                                    Readonly\n                                formNameDirective\n                            \n                            \n                                    Protected\n                                hasErrors\n                            \n                            \n                                    Protected\n                                    Readonly\n                                renderer\n                            \n                            \n                                    Private\n                                template\n                            \n                            \n                                    Protected\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Protected\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getErrors\n                            \n                            \n                                    Private\n                                handleComponentRender\n                            \n                            \n                                    Private\n                                handleNoComponentFlow\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:122\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrors(data: ValidationErrors)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:280\n                        \n                    \n\n\n            \n                \n                        Returns the errors based on the provided settings\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        ValidationErrors\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe error data we wish to use\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleComponentRender\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleComponentRender(shouldShow: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:206\n                        \n                    \n\n\n            \n                \n                        Renders a provided custom component underneath the input component\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                shouldShow\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether the error should be shown\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleNoComponentFlow\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNoComponentFlow(shouldShow: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:243\n                        \n                    \n\n\n            \n                \n                        Renders a p tag underneath the input component when no custom component was provided\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                shouldShow\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether the error should be shown\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:129\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        abstractControl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AbstractControl\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:100\n                        \n                    \n\n            \n                \n                    The AbstractControl we wish to listen to when using the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:80\n                        \n                    \n\n            \n                \n                     An instance of the ChangeDetectorRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        componentRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:115\n                        \n                    \n\n            \n                \n                    The ref of the component we wish to add error data to\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxFormsErrorConfigurationOptions\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxFormsErrorsConfigurationToken,\n\t\t{ optional: true }\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:52\n                        \n                    \n\n            \n                \n                     The optional global configuration used form the NgxFormsError\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(undefined, {\n\t\talias: 'ngxFormsErrors',\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:120\n                        \n                    \n\n            \n                \n                    A reference to a control or a string reference to the control\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        destroyRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DestroyRef\n\n                    \n                \n                \n                    \n                        Default value : inject(DestroyRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:85\n                        \n                    \n\n            \n                \n                     An instance of the DestroyRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:65\n                        \n                    \n\n            \n                \n                     An instance of the ElementRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxFormsErrorAbstractComponent\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:110\n                        \n                    \n\n            \n                \n                    The component to which the error data is added\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorsElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:105\n                        \n                    \n\n            \n                \n                    The p element we add to the dom when no component is provided\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        formGroupDirective\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroupDirective\n\n                    \n                \n                \n                    \n                        Default value : inject(FormGroupDirective, {\n\t\toptional: true,\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:40\n                        \n                    \n\n            \n                \n                     An optional instance of the FormGroup directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        formNameDirective\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroupName\n\n                    \n                \n                \n                    \n                        Default value : inject(FormGroupName, { optional: true })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:47\n                        \n                    \n\n            \n                \n                     An optional instance of the FormGroupName directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasErrors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:90\n                        \n                    \n\n            \n                \n                     Whether the control has errors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                \n                    \n                        Default value : inject(Renderer2)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:70\n                        \n                    \n\n            \n                \n                     An instance of Renderer2\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        template\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:95\n                        \n                    \n\n            \n                \n                     The actual template of the input element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : inject(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:75\n                        \n                    \n\n            \n                \n                     An instance of the TemplateRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ViewContainerRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:60\n                        \n                    \n\n            \n                \n                     An instance of the ViewContainerRef\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tAfterViewInit,\n\tChangeDetectorRef,\n\tComponentRef,\n\tDirective,\n\tElementRef,\n\tinject,\n\tRenderer2,\n\tTemplateRef,\n\tViewContainerRef,\n\tinput,\n\tDestroyRef,\n\tWritableSignal,\n\tsignal,\n\tcomputed,\n\tSignal,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport {\n\tAbstractControl,\n\tFormGroupDirective,\n\tFormGroupName,\n\tValidationErrors,\n} from '@angular/forms';\nimport { combineLatest, startWith, tap } from 'rxjs';\n\nimport { NgxFormsErrorAbstractComponent } from '../../abstracts';\nimport { NgxFormsErrorConfigurationOptions } from '../../interfaces';\nimport { NgxFormsErrorsConfigurationToken } from '../../tokens';\nimport { touchedEventListener } from '../../utils';\n\n@Directive({\n\tselector: '[ngxFormsErrors]',\n\tstandalone: true,\n})\nexport class NgxFormsErrorsDirective implements AfterViewInit {\n\t/**\n\t *  An optional instance of the FormGroup directive\n\t */\n\tprotected readonly formGroupDirective: FormGroupDirective = inject(FormGroupDirective, {\n\t\toptional: true,\n\t});\n\n\t/**\n\t *  An optional instance of the FormGroupName directive\n\t */\n\tprotected readonly formNameDirective: FormGroupName = inject(FormGroupName, { optional: true });\n\n\t/**\n\t *  The optional global configuration used form the NgxFormsError\n\t */\n\tprivate readonly config: NgxFormsErrorConfigurationOptions = inject(\n\t\tNgxFormsErrorsConfigurationToken,\n\t\t{ optional: true }\n\t);\n\n\t/**\n\t *  An instance of the ViewContainerRef\n\t */\n\tprotected readonly viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n\t/**\n\t *  An instance of the ElementRef\n\t */\n\tprotected readonly elementRef: ElementRef = inject(ElementRef);\n\n\t/**\n\t *  An instance of Renderer2\n\t */\n\tprotected readonly renderer: Renderer2 = inject(Renderer2);\n\n\t/**\n\t *  An instance of the TemplateRef\n\t */\n\tprotected readonly templateRef: TemplateRef = inject(TemplateRef);\n\n\t/**\n\t *  An instance of the ChangeDetectorRef\n\t */\n\tprotected readonly cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n\t/**\n\t *  An instance of the DestroyRef\n\t */\n\tprotected readonly destroyRef: DestroyRef = inject(DestroyRef);\n\n\t/**\n\t *  Whether the control has errors\n\t */\n\tprotected hasErrors: WritableSignal = signal(false);\n\n\t/**\n\t *  The actual template of the input element\n\t */\n\tprivate template: TemplateRef;\n\n\t/**\n\t * The AbstractControl we wish to listen to when using the directive\n\t */\n\tprivate abstractControl: AbstractControl;\n\n\t/**\n\t * The p element we add to the dom when no component is provided\n\t */\n\tprivate errorsElement: any;\n\n\t/**\n\t * The component to which the error data is added\n\t */\n\tprivate errorComponent: NgxFormsErrorAbstractComponent;\n\n\t/**\n\t * The ref of the component we wish to add error data to\n\t */\n\tprivate componentRef: ComponentRef;\n\n\t/**\n\t * A reference to a control or a string reference to the control\n\t */\n\tpublic readonly control = input(undefined, {\n\t\talias: 'ngxFormsErrors',\n\t});\n\n\tconstructor() {\n\t\t// Iben: Set the current template ref at constructor time so we actually have the provided template (as done in the *ngIf directive)\n\t\tthis.template = this.templateRef;\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Render the actual input so that it is always visible\n\t\tthis.viewContainer.clear();\n\t\tthis.viewContainer.createEmbeddedView(this.template);\n\n\t\t// Iben: If no control was provided, we early exit and log an error\n\t\tconst control = this.control();\n\t\tif (!control) {\n\t\t\tconsole.error('NgxForms: No control was provided to the NgxFormsErrorDirective');\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the control is a string, we check the parent to find the actual control.\n\t\t// If not, we use the provided control\n\t\tif (typeof control === 'string') {\n\t\t\tthis.abstractControl = this.formGroupDirective\n\t\t\t\t? this.formGroupDirective.form.get(control)\n\t\t\t\t: this.formNameDirective?.control.get(control);\n\t\t} else {\n\t\t\tthis.abstractControl = control;\n\t\t}\n\n\t\t// Iben: If no control was found, we early exit and log an error\n\t\tif (!this.abstractControl) {\n\t\t\tconsole.error('NgxForms: No control was provided to the NgxFormsErrorDirective');\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Listen to the value changes, status changes and the touched changes of the control\n\t\tcombineLatest([\n\t\t\tthis.abstractControl.valueChanges.pipe(startWith(this.abstractControl.value)),\n\t\t\ttouchedEventListener(this.abstractControl),\n\t\t\tthis.abstractControl.statusChanges.pipe(startWith(this.abstractControl.status)),\n\t\t])\n\t\t\t.pipe(\n\t\t\t\ttap(([, touched]) => {\n\t\t\t\t\t// Iben: Check whether we should show the error based on the provided config\n\t\t\t\t\tthis.hasErrors.set(\n\t\t\t\t\t\tthis.abstractControl.invalid &&\n\t\t\t\t\t\t\t(this.config.showWhen === 'touched'\n\t\t\t\t\t\t\t\t? touched\n\t\t\t\t\t\t\t\t: this.abstractControl.dirty)\n\t\t\t\t\t);\n\n\t\t\t\t\t// Iben: Set the errors class if needed\n\t\t\t\t\tthis.hasErrors()\n\t\t\t\t\t\t? this.renderer.addClass(\n\t\t\t\t\t\t\t\tthis.renderer.nextSibling(this.elementRef.nativeElement),\n\t\t\t\t\t\t\t\t'ngx-forms-errors-invalid'\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: this.renderer.removeClass(\n\t\t\t\t\t\t\t\tthis.renderer.nextSibling(this.elementRef.nativeElement),\n\t\t\t\t\t\t\t\t'ngx-forms-errors-invalid'\n\t\t\t\t\t\t  );\n\n\t\t\t\t\t// Iben: Show the error based on whether or not a component was provided\n\t\t\t\t\tif (!this.config.component) {\n\t\t\t\t\t\tthis.handleNoComponentFlow(this.hasErrors());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.handleComponentRender(this.hasErrors());\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so this works with (nested) OnPush components\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntilDestroyed(this.destroyRef)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Renders a provided custom component underneath the input component\n\t *\n\t * @param shouldShow - Whether the error should be shown\n\t */\n\tprivate handleComponentRender(shouldShow: boolean) {\n\t\t// Iben: If the error should not be shown, we check if there's already an error component and destroy it if needed\n\t\tif (!shouldShow) {\n\t\t\tif (this.errorComponent) {\n\t\t\t\tthis.componentRef.destroy();\n\t\t\t\tthis.componentRef = undefined;\n\t\t\t\tthis.errorComponent = undefined;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If there already is a component, destroy it so it can update correctly\n\t\tif (this.componentRef) {\n\t\t\tthis.componentRef.destroy();\n\t\t\tthis.componentRef = undefined;\n\t\t}\n\n\t\t// Iben: Add the new component to the view\n\t\tthis.componentRef = this.viewContainer.createComponent(\n\t\t\tthis.config.component\n\t\t);\n\t\tthis.errorComponent = this.componentRef.instance;\n\n\t\t// Iben: Set the data of the error component\n\t\tconst { errors, errorKeys, data } = this.getErrors(this.abstractControl.errors);\n\n\t\tthis.componentRef.setInput('errors', errors);\n\t\tthis.componentRef.setInput('errorKeys', errorKeys);\n\t\tthis.componentRef.setInput('data', data);\n\t}\n\n\t/**\n\t * Renders a p tag underneath the input component when no custom component was provided\n\t *\n\t * @param shouldShow - Whether the error should be shown\n\t */\n\tprivate handleNoComponentFlow(shouldShow: boolean) {\n\t\t// Iben: We remove the current errors so that we always have a new element to work with\n\t\tif (this.errorsElement) {\n\t\t\tthis.renderer.removeChild(this.elementRef.nativeElement.parentNode, this.errorsElement);\n\n\t\t\tthis.errorsElement = null;\n\t\t}\n\n\t\t// Iben: Early exit in case there's no error to show\n\t\tif (!shouldShow) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Create a new error paragraph\n\t\tthis.errorsElement = this.renderer.createElement('p');\n\t\tthis.renderer.setAttribute(this.errorsElement, 'class', 'ngx-forms-error');\n\n\t\t// Iben: Set the errors based on the keys\n\t\tthis.renderer.setProperty(\n\t\t\tthis.errorsElement,\n\t\t\t'innerHTML',\n\t\t\tthis.getErrors(this.abstractControl.errors).errors.join(', ')\n\t\t);\n\n\t\t// Iben: insert the paragraph underneath the input component\n\t\tthis.renderer.insertBefore(\n\t\t\tthis.elementRef.nativeElement.parentNode,\n\t\t\tthis.errorsElement,\n\t\t\tthis.renderer.nextSibling(this.elementRef.nativeElement)\n\t\t);\n\t}\n\n\t/**\n\t * Returns the errors based on the provided settings\n\t *\n\t * @param data - The error data we wish to use\n\t */\n\tprivate getErrors(data: ValidationErrors): {\n\t\terrors: string[];\n\t\tdata: ValidationErrors;\n\t\terrorKeys: string[];\n\t} {\n\t\t// Iben: Early exit in case the errors object is null\n\t\tif (!data) {\n\t\t\treturn {\n\t\t\t\terrors: [],\n\t\t\t\tdata: null,\n\t\t\t\terrorKeys: [],\n\t\t\t};\n\t\t}\n\n\t\t// Iben: If the config is set to all, we always show all errors\n\t\tif (this.config.show === 'all') {\n\t\t\treturn {\n\t\t\t\terrors: Object.keys(data).map((key) => this.config.errors[key]),\n\t\t\t\terrorKeys: Object.keys(data),\n\t\t\t\tdata,\n\t\t\t};\n\t\t}\n\n\t\t// Iben: If no limit is provided, we default to a single error\n\t\tconst limit = this.config.show === undefined ? 1 : this.config.show;\n\n\t\t// Iben: Slice the errors based on the provided limit\n\t\treturn {\n\t\t\terrors: Object.keys(data)\n\t\t\t\t.map((key) => this.config.errors[key])\n\t\t\t\t.slice(0, limit),\n\t\t\terrorKeys: Object.keys(data).slice(0, limit),\n\t\t\tdata,\n\t\t};\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxHasCookieConfiguration.html":{"url":"interfaces/NgxHasCookieConfiguration.html","title":"interface - NgxHasCookieConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxHasCookieConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/has-cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            services\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        services\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        services:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgxHasCookieConfiguration {\n\tcategory: string;\n\tservices?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasCookieDirective.html":{"url":"directives/NgxHasCookieDirective.html","title":"directive - NgxHasCookieDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasCookieDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A structural directive that provides a way to render UI elements based on whether a (set of) cookie(s) have been accepted by the user.\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hasCookie]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                component\n                            \n                            \n                                    Private\n                                componentRef\n                            \n                            \n                                    Private\n                                cookies\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Public\n                                hasCookie\n                            \n                            \n                                    Public\n                                hasCookieElse\n                            \n                            \n                                    Private\n                                    Readonly\n                                ngxCookieService\n                            \n                            \n                                    Private\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                renderElseTemplate\n                            \n                            \n                                    Private\n                                renderThenTemplate\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hasCookie\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:70\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        hasCookie\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:64\n                            \n                        \n                \n                    \n                        A cookie or list of cookies the item should have\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:148\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:89\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderElseTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderElseTemplate()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:168\n                        \n                    \n\n\n            \n                \n                        Render the fallbackTemplate or fallBackComponent\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderThenTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderThenTemplate()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:158\n                        \n                    \n\n\n            \n                \n                        Render the template on which the directive is set\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:96\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        component\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Type\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxCookiesFallbackComponentToken,\n\t\t{ optional: true }\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        componentRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:54\n                        \n                    \n\n            \n                \n                    The ref of the component we wish to render as a fallback\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cookies\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxHasCookieConfiguration[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:59\n                        \n                    \n\n            \n                \n                    The list of cookies we need to check\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:34\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasCookie\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:64\n                        \n                    \n\n            \n                \n                    A cookie or list of cookies the item should have\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasCookieElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                \n                    \n                        Default value : input>()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:70\n                        \n                    \n\n            \n                \n                    The else template in case the cookie is not accepted\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        ngxCookieService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxCookieService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxCookieService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : inject(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:48\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ViewContainerRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tComponentRef,\n\tDirective,\n\tTemplateRef,\n\tType,\n\tViewContainerRef,\n\tOnDestroy,\n\tinject,\n\teffect,\n\tinput,\n\tInputSignal,\n} from '@angular/core';\nimport { flatten } from 'lodash';\nimport { Subject, tap, takeUntil, combineLatest, map } from 'rxjs';\n\nimport { NgxCookiesFallBackComponent } from '../../abstracts';\nimport { NgxCookieService } from '../../services';\nimport { NgxCookiesFallbackComponentToken } from '../../tokens';\nimport { NgxHasCookieConfiguration } from '../../types';\n\n/**\n * A structural directive that provides a way to render UI elements based on whether a (set of) cookie(s) have been accepted by the user.\n */\n@Directive({\n\tselector: '[hasCookie]',\n\tstandalone: true,\n})\nexport class NgxHasCookieDirective implements OnDestroy {\n\t//TODO: Iben: Replace this with the OnDestroyComponent flow once we have a shared lib\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\tprivate readonly templateRef: TemplateRef = inject(TemplateRef);\n\tprivate viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\tprivate readonly ngxCookieService: NgxCookieService = inject(NgxCookieService);\n\tprivate readonly cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\tprivate readonly component: Type = inject(\n\t\tNgxCookiesFallbackComponentToken,\n\t\t{ optional: true }\n\t);\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\n\t/**\n\t * The ref of the component we wish to render as a fallback\n\t */\n\tprivate componentRef: ComponentRef;\n\n\t/**\n\t * The list of cookies we need to check\n\t */\n\tprivate cookies: NgxHasCookieConfiguration[] = [];\n\n\t/**\n\t * A cookie or list of cookies the item should have\n\t */\n\tpublic hasCookie: InputSignal =\n\t\tinput.required();\n\n\t/**\n\t * The else template in case the cookie is not accepted\n\t */\n\tpublic hasCookieElse: InputSignal> = input>();\n\n\tconstructor() {\n\t\tthis.thenTemplateRef = this.templateRef;\n\n\t\teffect(() => {\n\t\t\tconst value = this.hasCookie();\n\t\t\tthis.cookies = Array.isArray(value) ? value : [value];\n\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tif (this.hasCookieElse()) {\n\t\t\t\tthis.updateView();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tcombineLatest(\n\t\t\t// Iben Check for each cookie if it is accepted\n\t\t\tthis.cookies.map((cookie) => {\n\t\t\t\t// Iben: If no specific services were provided, we can just check the category\n\t\t\t\tif (!cookie.services) {\n\t\t\t\t\treturn this.ngxCookieService.hasAcceptedCategory(cookie.category);\n\t\t\t\t}\n\n\t\t\t\t// Iben: If specific services were provided, we can just check each individual category\n\t\t\t\treturn combineLatest(\n\t\t\t\t\tcookie.services.map((service) => {\n\t\t\t\t\t\treturn this.ngxCookieService.hasAcceptedService(cookie.category, service);\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t})\n\t\t)\n\t\t\t.pipe(\n\t\t\t\tmap((hasCookies) => {\n\t\t\t\t\treturn flatten(hasCookies).every((hasCookie) => hasCookie);\n\t\t\t\t}),\n\t\t\t\ttap((hasCookie) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: If there already is a component, destroy it so it can update correctly\n\t\t\t\t\tif (this.componentRef) {\n\t\t\t\t\t\tthis.componentRef.destroy();\n\t\t\t\t\t\tthis.componentRef = undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\thasCookie ? this.renderThenTemplate() : this.renderElseTemplate();\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n\n\t/**\n\t * Render the template on which the directive is set\n\t */\n\tprivate renderThenTemplate(): void {\n\t\t// Iben: If a thenTemplateRef is provided, render the template\n\t\tif (this.thenTemplateRef) {\n\t\t\tthis.viewContainer.createEmbeddedView(this.thenTemplateRef);\n\t\t}\n\t}\n\n\t/**\n\t * Render the fallbackTemplate or fallBackComponent\n\t */\n\tprivate renderElseTemplate(): void {\n\t\t// Iben: If a custom template ref was provided, render the template and early exit\n\t\tif (this.hasCookieElse()) {\n\t\t\tthis.viewContainer.createEmbeddedView(this.hasCookieElse());\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If a component was provided as a fallback, we render that\n\t\tif (this.component) {\n\t\t\t// Iben: Render the provided component\n\t\t\tthis.componentRef = this.viewContainer.createComponent(\n\t\t\t\tthis.component\n\t\t\t);\n\n\t\t\t// Iben: Set the cookies of the component\n\t\t\tthis.componentRef.setInput('cookies', this.cookies);\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasFeatureDirective.html":{"url":"directives/NgxHasFeatureDirective.html","title":"directive - NgxHasFeatureDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasFeatureDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that will render a part of the template based on whether the required feature(s) are provided.\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxHasFeature]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationService\n                            \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Private\n                                feature\n                            \n                            \n                                    Public\n                                ngxHasFeature\n                            \n                            \n                                    Public\n                                ngxHasFeatureElse\n                            \n                            \n                                    Public\n                                ngxHasFeatureShouldHaveAllFeatures\n                            \n                            \n                                    Public\n                                ngxHasFeatureShouldHaveFeature\n                            \n                            \n                                    Private\n                                shouldHaveAllFeatures\n                            \n                            \n                                    Private\n                                shouldHaveFeature\n                            \n                            \n                                templateRef\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxHasFeature\n                            \n                            \n                                ngxHasFeatureElse\n                            \n                            \n                                ngxHasFeatureShouldHaveAllFeatures\n                            \n                            \n                                ngxHasFeatureShouldHaveFeature\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:95\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxHasFeature\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:80\n                            \n                        \n                \n                    \n                        A feature or list of features the item should have\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasFeatureElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:85\n                            \n                        \n                \n                    \n                        The else template in case the feature is not enabled\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasFeatureShouldHaveAllFeatures\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:95\n                            \n                        \n                \n                    \n                        Whether all features should be enabled, by default this is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasFeatureShouldHaveFeature\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:90\n                            \n                        \n                \n                    \n                        Whether the feature should be enabled, by default this is true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:175\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:116\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:123\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxAuthenticationServiceToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:41\n                        \n                    \n\n            \n                \n                    The provided AuthenticationService implementation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:47\n                        \n                    \n\n            \n                \n                    The provided ChangeDetectorRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:52\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        feature\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FeatureType | FeatureType[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:65\n                        \n                    \n\n            \n                \n                    The (list of) feature(s) we need to check\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:80\n                        \n                    \n\n            \n                \n                    A feature or list of features the item should have\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeatureElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:85\n                        \n                    \n\n            \n                \n                    The else template in case the feature is not enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeatureShouldHaveAllFeatures\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:95\n                        \n                    \n\n            \n                \n                    Whether all features should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeatureShouldHaveFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:90\n                        \n                    \n\n            \n                \n                    Whether the feature should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHaveAllFeatures\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:75\n                        \n                    \n\n            \n                \n                    Whether all features should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHaveFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:70\n                        \n                    \n\n            \n                \n                    Whether the feature should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:33\n                        \n                    \n\n            \n                \n                    The provided template ref\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:57\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:37\n                        \n                    \n\n            \n                \n                    The provided ViewContainerRef\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A directive that will render a part of the template based on whether the required feature(s) are provided.\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n\n//TODO: Iben: Implement Cypress/PlayWright tests\n@Directive({\n\tselector: '[ngxHasFeature]',\n})\nexport class NgxHasFeatureDirective implements OnDestroy {\n\t/**\n\t * The provided template ref\n\t */\n\ttemplateRef = inject>(TemplateRef);\n\t/**\n\t * The provided ViewContainerRef\n\t */\n\tprivate viewContainer = inject(ViewContainerRef);\n\t/**\n\t * The provided AuthenticationService implementation\n\t */\n\tprivate readonly authenticationService = inject(\n\t\tNgxAuthenticationServiceToken\n\t);\n\t/**\n\t * The provided ChangeDetectorRef\n\t */\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * The (list of) feature(s) we need to check\n\t */\n\tprivate feature: FeatureType | FeatureType[] = [];\n\n\t/**\n\t * Whether the feature should be enabled\n\t */\n\tprivate shouldHaveFeature: boolean = true;\n\n\t/**\n\t * Whether all features should be enabled\n\t */\n\tprivate shouldHaveAllFeatures: boolean = true;\n\n\t/**\n\t * A feature or list of features the item should have\n\t */\n\tpublic ngxHasFeature: InputSignal = input();\n\n\t/**\n\t * The else template in case the feature is not enabled\n\t */\n\tpublic ngxHasFeatureElse: InputSignal> = input();\n\n\t/**\n\t * Whether the feature should be enabled, by default this is true\n\t */\n\tpublic ngxHasFeatureShouldHaveFeature: InputSignal = input();\n\n\t/**\n\t * Whether all features should be enabled, by default this is true\n\t */\n\tpublic ngxHasFeatureShouldHaveAllFeatures: InputSignal = input();\n\n\tconstructor() {\n\t\tconst templateRef = this.templateRef;\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tthis.shouldHaveAllFeatures = this.ngxHasFeatureShouldHaveAllFeatures();\n\t\t\tthis.shouldHaveFeature = this.ngxHasFeatureShouldHaveFeature();\n\t\t\tthis.feature = this.ngxHasFeature();\n\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxHasFeatureElse();\n\t\t\tthis.elseViewRef = null;\n\t\t});\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.authenticationService\n\t\t\t.hasFeature(convertToArray(this.feature), this.shouldHaveAllFeatures)\n\t\t\t.pipe(\n\t\t\t\ttap((hasFeature) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tconst shouldRender: boolean = this.shouldHaveFeature ? hasFeature : !hasFeature;\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\tif (shouldRender) {\n\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\tthis.elseViewRef = null;\n\n\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxHasFeaturePipe.html":{"url":"pipes/NgxHasFeaturePipe.html","title":"pipe - NgxHasFeaturePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxHasFeaturePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe that returns whether a (list of) feature(s) has been provided\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxHasFeature\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:88\n                        \n                    \n\n\n            \n                \n                        Dispose of the feature observable when existing\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribe(observable: Observable)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:64\n                        \n                    \n\n\n            \n                \n                        Handles the changeDetection, latest value and dispose of the hasFeature observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                observable\n                                            \n                                                        Observable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hasFeature observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(feature: FeatureType | FeatureType[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:53\n                        \n                    \n\n\n            \n                \n                        Returns whether or not a feature is provided for the environment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                feature\n                                            \n                                                        FeatureType | FeatureType[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided feature\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxAuthenticationServiceToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        changeDetectorRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef | null\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:31\n                        \n                    \n\n            \n                \n                    Instance of the change detector ref, implemented like this according to the async pipe implementation\nhttps://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:22\n                        \n                    \n\n            \n                \n                    Subject to hold the destroyed state of the current observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:26\n                        \n                    \n\n            \n                \n                    The latest value of the Observable, whether or not the feature is provided\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform, inject } from '@angular/core';\nimport { Observable, Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A pipe that returns whether a (list of) feature(s) has been provided\n */\n@Pipe({\n\tname: 'ngxHasFeature',\n\tpure: false,\n})\nexport class NgxHasFeaturePipe implements PipeTransform, OnDestroy {\n\tprivate readonly authenticationService = inject(NgxAuthenticationServiceToken);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * Subject to hold the destroyed state of the current observable\n\t */\n\tprivate destroyed$: Subject;\n\t/**\n\t * The latest value of the Observable, whether or not the feature is provided\n\t */\n\tprivate hasFeature: boolean;\n\t/**\n\t * Instance of the change detector ref, implemented like this according to the async pipe implementation\n\t * https://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\t */\n\tprivate changeDetectorRef: ChangeDetectorRef | null;\n\n\tconstructor() {\n\t\tconst cdRef = this.cdRef;\n\n\t\t// Iben: Use instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = cdRef;\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Call the dispose when the component is destroyed so we have no running subscriptions left\n\t\tthis.dispose();\n\n\t\t// Iben: Clear instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = null;\n\t}\n\n\t/**\n\t * Returns whether or not a feature is provided for the environment\n\t *\n\t * @param feature - The provided feature\n\t */\n\tpublic transform(feature: FeatureType | FeatureType[]): boolean {\n\t\tthis.subscribe(this.authenticationService.hasFeature(convertToArray(feature)));\n\n\t\treturn this.hasFeature;\n\t}\n\n\t/**\n\t * Handles the changeDetection, latest value and dispose of the hasFeature observable\n\t *\n\t * @param observable - The hasFeature observable\n\t */\n\tprivate subscribe(observable: Observable): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new destroyed subject to handle the destruction when needed\n\t\tthis.destroyed$ = new Subject();\n\n\t\tobservable\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\t// Iben: Update the latest value when it a new value is provided\n\t\t\t\t\tthis.hasFeature = value;\n\n\t\t\t\t\t// Iben: Mark the component as ready for check\n\t\t\t\t\tthis.changeDetectorRef.markForCheck();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose of the feature observable when existing\n\t */\n\tprivate dispose(): void {\n\t\t// Iben: In case there's a destroyed, we have an observable and we destroy the subscription and reset the observable\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasFocusDirective.html":{"url":"directives/NgxHasFocusDirective.html","title":"directive - NgxHasFocusDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasFocusDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract directive used as a base to handle focussed base actions\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                isFocussedOn\n                            \n                            \n                                    \n                                removeFocus\n                            \n                            \n                                    \n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:25\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:18\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:34\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isFocussedOn\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFocussedOn()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:43\n                        \n                    \n\n\n            \n                \n                        Returns when the item has been focussed on\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:25\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:18\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:13\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener } from '@angular/core';\n\n/**\n * An abstract directive used as a base to handle focussed base actions\n */\n@Directive({\n\tstandalone: true,\n})\nexport abstract class NgxHasFocusDirective {\n\t/**\n\t * Whether the current element is focussed\n\t */\n\tprotected hasFocus: boolean = false;\n\n\t/**\n\t * Set the hasFocus flag\n\t */\n\t@HostListener('focus') setFocus() {\n\t\tthis.hasFocus = true;\n\t}\n\n\t/**\n\t * Remove the hasFocus flag\n\t */\n\t@HostListener('blur') removeFocus() {\n\t\tthis.hasFocus = false;\n\t}\n\n\t/**\n\t * Execute an action when the element has focussed\n\t *\n\t * @param action - The provided action\n\t */\n\tpublic handleWhenFocussed(action: () => void): void {\n\t\tif (this.hasFocus) {\n\t\t\taction();\n\t\t}\n\t}\n\n\t/**\n   * Returns when the item has been focussed on\n   */\n  public isFocussedOn(): boolean {\n\t\treturn this.hasFocus;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{"url":"directives/NgxHasFocusDragAndDropAbstractDirective.html","title":"directive - NgxHasFocusDragAndDropAbstractDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasFocusDragAndDropAbstractDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract directive used as a base to handle focussed base actions\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                    Optional\n                                onBlur\n                            \n                            \n                                    Public\n                                    Optional\n                                onFocus\n                            \n                            \n                                    \n                                    Public\n                                removeFocus\n                            \n                            \n                                    \n                                    Public\n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:31\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:20\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:54\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onBlur\n                        \n                    \n                \n            \n            \n                \n                        \n                    onBlur()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    onFocus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:31\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:20\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject( ElementRef )\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:15\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, inject } from '@angular/core';\n\n//TODO: Iben: Move this copy to a shared lib once we have figured out how to handle that.\n\n/**\n * An abstract directive used as a base to handle focussed base actions\n */\n@Directive({\n\tstandalone: true,\n})\nexport abstract class NgxHasFocusDragAndDropAbstractDirective {\n\t/**\n\t * Whether the current element is focussed\n\t */\n\tprotected hasFocus: boolean = false;\n\n\t/**\n\t * Set the hasFocus flag\n\t */\n\t@HostListener('focus') public setFocus(): void {\n\t\tthis.hasFocus = true;\n\n\t\tif (this.onFocus) {\n\t\t\tthis.onFocus();\n\t\t}\n\t}\n\n\t/**\n\t * Remove the hasFocus flag\n\t */\n\t@HostListener('blur') public removeFocus() {\n\t\tthis.hasFocus = false;\n\n\t\tif (this.onBlur) {\n\t\t\tthis.onBlur();\n\t\t}\n\t}\n\n  public readonly elementRef: ElementRef = inject( ElementRef );\n\n\tpublic focus(): void {\n\t\tthis.elementRef.nativeElement.focus();\n\t}\n\n\tpublic onBlur?(): void;\n\n\tpublic onFocus?(): void;\n\n\t/**\n\t * Execute an action when the element has focussed\n\t *\n\t * @param action - The provided action\n\t */\n\tpublic handleWhenFocussed(action: () => void): void {\n\t\tif (this.hasFocus) {\n\t\t\taction();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasPermissionDirective.html":{"url":"directives/NgxHasPermissionDirective.html","title":"directive - NgxHasPermissionDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasPermissionDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that will render a part of the template based on whether the required permissions(s) are provided.\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxHasPermission]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationService\n                            \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Public\n                                ngxHasPermission\n                            \n                            \n                                    Public\n                                ngxHasPermissionElse\n                            \n                            \n                                    Public\n                                ngxHasPermissionShouldHaveAllPermissions\n                            \n                            \n                                    Public\n                                ngxHasPermissionShouldHavePermission\n                            \n                            \n                                    Private\n                                permission\n                            \n                            \n                                    Private\n                                shouldHaveAllPermissions\n                            \n                            \n                                    Private\n                                shouldHavePermission\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxHasPermission\n                            \n                            \n                                ngxHasPermissionElse\n                            \n                            \n                                ngxHasPermissionShouldHaveAllPermissions\n                            \n                            \n                                ngxHasPermissionShouldHavePermission\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:82\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxHasPermission\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:67\n                            \n                        \n                \n                    \n                        A permission or list of permissions the item should have\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasPermissionElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:72\n                            \n                        \n                \n                    \n                        The else template in case the permission is not enabled\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasPermissionShouldHaveAllPermissions\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:82\n                            \n                        \n                \n                    \n                        Whether all permissions should be enabled, by default this is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasPermissionShouldHavePermission\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:77\n                            \n                        \n                \n                    \n                        Whether the permission should be enabled, by default this is true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:167\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:103\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:110\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxAuthenticationServiceToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:39\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:67\n                        \n                    \n\n            \n                \n                    A permission or list of permissions the item should have\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermissionElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:72\n                        \n                    \n\n            \n                \n                    The else template in case the permission is not enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermissionShouldHaveAllPermissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:82\n                        \n                    \n\n            \n                \n                    Whether all permissions should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermissionShouldHavePermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:77\n                        \n                    \n\n            \n                \n                    Whether the permission should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        permission\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PermissionType | PermissionType[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:52\n                        \n                    \n\n            \n                \n                    The (list of) permission(s) we need to check\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHaveAllPermissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:62\n                        \n                    \n\n            \n                \n                    Whether all permissions should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHavePermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:57\n                        \n                    \n\n            \n                \n                    Whether the permission should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:44\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A directive that will render a part of the template based on whether the required permissions(s) are provided.\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n\n//TODO: Iben: Implement Cypress/PlayWright tests\n@Directive({\n\tselector: '[ngxHasPermission]',\n})\nexport class NgxHasPermissionDirective implements OnDestroy {\n\tprivate viewContainer = inject(ViewContainerRef);\n\tprivate readonly authenticationService = inject(\n\t\tNgxAuthenticationServiceToken\n\t);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * The (list of) permission(s) we need to check\n\t */\n\tprivate permission: PermissionType | PermissionType[] = [];\n\n\t/**\n\t * Whether the permission should be enabled\n\t */\n\tprivate shouldHavePermission: boolean = true;\n\n\t/**\n\t * Whether all permissions should be enabled\n\t */\n\tprivate shouldHaveAllPermissions: boolean = true;\n\n\t/**\n\t * A permission or list of permissions the item should have\n\t */\n\tpublic ngxHasPermission: InputSignal = input();\n\n\t/**\n\t * The else template in case the permission is not enabled\n\t */\n\tpublic ngxHasPermissionElse: InputSignal> = input();\n\n\t/**\n\t * Whether the permission should be enabled, by default this is true\n\t */\n\tpublic ngxHasPermissionShouldHavePermission: InputSignal = input();\n\n\t/**\n\t * Whether all permissions should be enabled, by default this is true\n\t */\n\tpublic ngxHasPermissionShouldHaveAllPermissions: InputSignal = input();\n\n\tconstructor() {\n\t\tconst templateRef = inject>(TemplateRef);\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tthis.shouldHaveAllPermissions = this.ngxHasPermissionShouldHaveAllPermissions();\n\t\t\tthis.shouldHavePermission = this.ngxHasPermissionShouldHavePermission();\n\t\t\tthis.permission = this.ngxHasPermission();\n\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxHasPermissionElse();\n\t\t\tthis.elseViewRef = null;\n\t\t});\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.authenticationService\n\t\t\t.hasPermission(\n\t\t\t\tconvertToArray(this.permission),\n\t\t\t\tthis.shouldHaveAllPermissions\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\ttap((hasPermission) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tconst shouldRender: boolean = this.shouldHavePermission\n\t\t\t\t\t\t? hasPermission\n\t\t\t\t\t\t: !hasPermission;\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\tif (shouldRender) {\n\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\tthis.elseViewRef = null;\n\n\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxHasPermissionPipe.html":{"url":"pipes/NgxHasPermissionPipe.html","title":"pipe - NgxHasPermissionPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxHasPermissionPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe that returns whether a (list of) permission(s) has been provided\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxHasPermission\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:92\n                        \n                    \n\n\n            \n                \n                        Dispose of the permission observable when existing\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribe(observable: Observable)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:68\n                        \n                    \n\n\n            \n                \n                        Handles the changeDetection, latest value and dispose of the hasPermission observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                observable\n                                            \n                                                        Observable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hasPermission observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(permission: PermissionType | PermissionType[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:55\n                        \n                    \n\n\n            \n                \n                        Returns whether or not a permission is provided for the environment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                permission\n                                            \n                                                        PermissionType | PermissionType[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided permission\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxAuthenticationServiceToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        changeDetectorRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef | null\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:33\n                        \n                    \n\n            \n                \n                    Instance of the change detector ref, implemented like this according to the async pipe implementation\nhttps://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:24\n                        \n                    \n\n            \n                \n                    Subject to hold the destroyed state of the current observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasPermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:28\n                        \n                    \n\n            \n                \n                    The latest value of the Observable, whether or not the permission is provided\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform, inject } from '@angular/core';\nimport { Observable, Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A pipe that returns whether a (list of) permission(s) has been provided\n */\n@Pipe({\n\tname: 'ngxHasPermission',\n\tpure: false,\n})\nexport class NgxHasPermissionPipe\n\timplements PipeTransform, OnDestroy\n{\n\tprivate readonly authenticationService = inject(NgxAuthenticationServiceToken);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * Subject to hold the destroyed state of the current observable\n\t */\n\tprivate destroyed$: Subject;\n\t/**\n\t * The latest value of the Observable, whether or not the permission is provided\n\t */\n\tprivate hasPermission: boolean;\n\t/**\n\t * Instance of the change detector ref, implemented like this according to the async pipe implementation\n\t * https://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\t */\n\tprivate changeDetectorRef: ChangeDetectorRef | null;\n\n\tconstructor() {\n\t\tconst cdRef = this.cdRef;\n\n\t\t// Iben: Use instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = cdRef;\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Call the dispose when the component is destroyed so we have no running subscriptions left\n\t\tthis.dispose();\n\n\t\t// Iben: Clear instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = null;\n\t}\n\n\t/**\n\t * Returns whether or not a permission is provided for the environment\n\t *\n\t * @param permission - The provided permission\n\t */\n\tpublic transform(permission: PermissionType | PermissionType[]): boolean {\n\t\tthis.subscribe(\n\t\t\tthis.authenticationService.hasPermission(convertToArray(permission))\n\t\t);\n\n\t\treturn this.hasPermission;\n\t}\n\n\t/**\n\t * Handles the changeDetection, latest value and dispose of the hasPermission observable\n\t *\n\t * @param observable - The hasPermission observable\n\t */\n\tprivate subscribe(observable: Observable): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new destroyed subject to handle the destruction when needed\n\t\tthis.destroyed$ = new Subject();\n\n\t\tobservable\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\t// Iben: Update the latest value when it a new value is provided\n\t\t\t\t\tthis.hasPermission = value;\n\n\t\t\t\t\t// Iben: Mark the component as ready for check\n\t\t\t\t\tthis.changeDetectorRef.markForCheck();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose of the permission observable when existing\n\t */\n\tprivate dispose(): void {\n\t\t// Iben: In case there's a destroyed, we have an observable and we destroy the subscription and reset the observable\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxI18nAbstractService.html":{"url":"classes/NgxI18nAbstractService.html","title":"class - NgxI18nAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxI18nAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/abstracts/i18n-service.abstract.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service used to fetch the current language\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/abstracts/i18n-service.abstract.ts:9\n                                \n                            \n                    \n                        \n                                A method to return the current language\n\n\n                                \n                                    Returns :     Language\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export abstract class NgxI18nAbstractService {\n\n\t/**\n   * A method to return the current language\n   */\n  public abstract get currentLanguage(): Language;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxI18nConfiguration.html":{"url":"interfaces/NgxI18nConfiguration.html","title":"interface - NgxI18nConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxI18nConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/i18n.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration we can pass to the translation system\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            availableLanguages\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cacheBust\n                                        \n                                \n                                \n                                        \n                                            defaultAssetPaths\n                                        \n                                \n                                \n                                        \n                                            defaultLanguage\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            languageRouteParam\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        availableLanguages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        availableLanguages:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A list of languages the application has translations for\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cacheBust\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cacheBust:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The cache busting parameter to append to the translation file requests.\nThis can be useful when you want to force the browser to fetch the latest\nversion of the translation files by appending this value to the v query\nparameter.\nWhen not provided, no query parameter will be added to the request.\nExample :`?v=1` when `cacheBust: '' + 1`\n`?v=1.0.0` when `cacheBust: '1.0.0'`\n`?v=1743428073628` when `cacheBust: String(Date.now())`\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultAssetPaths\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultAssetPaths:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A list of default translation files we want to load in if we don't provide a custom loader\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultLanguage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultLanguage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The default language the application should be in\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        languageRouteParam\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        languageRouteParam:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The param name we use for the language, by default this is language\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface NgxI18nConfiguration {\n\t/**\n\t * The default language the application should be in\n\t */\n\tdefaultLanguage: string;\n\t/**\n\t * A list of languages the application has translations for\n\t */\n\tavailableLanguages?: string[];\n\t/**\n\t * A list of default translation files we want to load in if we don't provide a custom loader\n\t */\n\tdefaultAssetPaths: string[];\n\t/**\n\t * The param name we use for the language, by default this is `language`\n\t */\n\tlanguageRouteParam?: string;\n\t/**\n\t * The cache busting parameter to append to the translation file requests.\n\t * This can be useful when you want to force the browser to fetch the latest\n\t * version of the translation files by appending this value to the `v` query\n\t * parameter.\n\t *\n\t * When not provided, no query parameter will be added to the request.\n\t *\n\t * @example\n\t * `?v=1` when `cacheBust: '' + 1`\n\t * `?v=1.0.0` when `cacheBust: '1.0.0'`\n\t * `?v=1743428073628` when `cacheBust: String(Date.now())`\n\t */\n\tcacheBust?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxI18nEmptyComponent.html":{"url":"components/NgxI18nEmptyComponent.html","title":"component - NgxI18nEmptyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxI18nEmptyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/i18n/src/lib/components/empty-component/empty.component.ts\n\n\n\n    \n        Description\n    \n    \n        This is an empty dummy component that can be used in combination with the NgxI18nSetLanguageGuard when needed\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-i18n-empty\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/**\n * This is an empty dummy component that can be used in combination with the NgxI18nSetLanguageGuard when needed\n */\n@Component({\n\tselector: 'ngx-i18n-empty',\n\tstandalone: true,\n\ttemplate: '',\n})\nexport class NgxI18nEmptyComponent {}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxI18nEmptyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nLoadingService.html":{"url":"injectables/NgxI18nLoadingService.html","title":"injectable - NgxI18nLoadingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nLoadingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that holds whether there currently are translation files being loaded into the application\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                translationLoaderActionsSubject$\n                            \n                            \n                                    Public\n                                    Readonly\n                                translationsFailed$\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationsFailedSubject$\n                            \n                            \n                                    Public\n                                    Readonly\n                                translationsLoaded$\n                            \n                            \n                                    Private\n                                translationsLoading\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationsSubject$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addLoadedTranslations\n                            \n                            \n                                    Public\n                                dispatchTranslationLoaderAction\n                            \n                            \n                                    Public\n                                getTranslations\n                            \n                            \n                                    Public\n                                loadTranslations\n                            \n                            \n                                    Public\n                                markTranslationsLoadedAsFailed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addLoadedTranslations\n                        \n                    \n                \n            \n            \n                \n                        \n                    addLoadedTranslations(translations: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Add loaded translations to the loaded translations record\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                translations\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe newly loaded translations\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dispatchTranslationLoaderAction\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispatchTranslationLoaderAction(action: TranslationLoaderActionEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Dispatch the loading state of a set of translations\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            TranslationLoaderActionEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe loading state of a set of translations\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslations()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Fetches all the currently loaded translations\n\n\n                        \n                            Returns :     Record\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loadTranslations\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadTranslations(paths: string, observable: Observable<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Groups all the requests for a series of paths and ensures we only have a single observable to subscribe to\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paths\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe paths of we're loading translations for\n\n\n                                            \n                                        \n                                        \n                                                observable\n                                            \n                                                        Observable<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe translations loading observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markTranslationsLoadedAsFailed\n                        \n                    \n                \n            \n            \n                \n                        \n                    markTranslationsLoadedAsFailed()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Mark the loading of the translations as failed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationLoaderActionsSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        translationsFailed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.translationsFailedSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationsFailedSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        translationsLoaded$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.translationLoaderActionsSubject$.pipe(\n\t\t// Iben: Hold a list of all actions and only add those that have a loading state\n\t\t// If the action is not loading, remove it from the actions array\n\t\tscan((actions: string[], action: TranslationLoaderActionEntity) => {\n\t\t\treturn action.state === 'LOADING'\n\t\t\t\t? actions.concat(action.id)\n\t\t\t\t: actions.filter((actionFromResult) => actionFromResult !== action.id);\n\t\t}, []),\n\t\t// Iben: If no more actions are loading, we return true\n\t\tmap((result) => result.length === 0)\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        translationsLoading\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record>\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationsSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject>({})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:21\n                        \n                    \n\n            \n                \n                    A subject to store all the currently loaded translation files in\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { scan, map, shareReplay } from 'rxjs/operators';\n\nimport { TranslationLoaderActionEntity } from './i18n-loading.types';\n\n/**\n * A service that holds whether there currently are translation files being loaded into the application\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxI18nLoadingService {\n\t// Iben: Keep a subject to store all the translation loading actions\n\tprivate readonly translationLoaderActionsSubject$ =\n\t\tnew Subject();\n\n\t/**\n\t * A subject to store all the currently loaded translation files in\n\t */\n\tprivate readonly translationsSubject$ = new BehaviorSubject>({});\n\n\tprivate readonly translationsFailedSubject$ = new BehaviorSubject(false);\n\n\tprivate translationsLoading: Record> = {};\n\n\t// Iben: Check if all translations actions have completed\n\tpublic readonly translationsLoaded$ = this.translationLoaderActionsSubject$.pipe(\n\t\t// Iben: Hold a list of all actions and only add those that have a loading state\n\t\t// If the action is not loading, remove it from the actions array\n\t\tscan((actions: string[], action: TranslationLoaderActionEntity) => {\n\t\t\treturn action.state === 'LOADING'\n\t\t\t\t? actions.concat(action.id)\n\t\t\t\t: actions.filter((actionFromResult) => actionFromResult !== action.id);\n\t\t}, []),\n\t\t// Iben: If no more actions are loading, we return true\n\t\tmap((result) => result.length === 0)\n\t);\n\n\tpublic readonly translationsFailed$: Observable =\n\t\tthis.translationsFailedSubject$.asObservable();\n\n\t/**\n\t * Dispatch the loading state of a set of translations\n\t *\n\t * @param action - The loading state of a set of translations\n\t */\n\tpublic dispatchTranslationLoaderAction(action: TranslationLoaderActionEntity) {\n\t\tthis.translationLoaderActionsSubject$.next(action);\n\t}\n\n\t/**\n\t * Add loaded translations to the loaded translations record\n\t *\n\t * @param translations - The newly loaded translations\n\t */\n\tpublic addLoadedTranslations(translations: Record) {\n\t\tthis.translationsSubject$.next({\n\t\t\t...this.translationsSubject$.getValue(),\n\t\t\t...translations,\n\t\t});\n\t}\n\n\t/**\n\t * Fetches all the currently loaded translations\n\t */\n\tpublic getTranslations(): Record {\n\t\treturn this.translationsSubject$.getValue();\n\t}\n\n\t/**\n\t * Groups all the requests for a series of paths and ensures we only have a single observable to subscribe to\n\t *\n\t * @param paths - The paths of we're loading translations for\n\t * @param observable - The translations loading observable\n\t */\n\tpublic loadTranslations(paths: string, observable: Observable) {\n\t\t// Iben: If loading of the translations has not been added to the array yet, we set it so we return a single observable\n\t\tif (!this.translationsLoading[paths]) {\n\t\t\t// Iben: Add shareReplay so the result is passed over each subscription\n\t\t\tthis.translationsLoading[paths] = observable.pipe(shareReplay());\n\t\t}\n\n\t\t// Iben: Return the observable\n\t\treturn this.translationsLoading[paths];\n\t}\n\n\t/**\n\t * Mark the loading of the translations as failed\n\t */\n\tpublic markTranslationsLoadedAsFailed() {\n\t\tconsole.error(\n\t\t\t'@ibenvandeveire/ngx-i18n - NgxI18nLoadingService: Something went wrong whilst fetching the translations.'\n\t\t);\n\n\t\tthis.translationsFailedSubject$.next(false);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxI18nMultiTranslationHttpLoader.html":{"url":"classes/NgxI18nMultiTranslationHttpLoader.html","title":"class - NgxI18nMultiTranslationHttpLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxI18nMultiTranslationHttpLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts\n        \n\n\n            \n                Description\n            \n            \n                A loader that allows to load in multiple translation JSON files at the same time\n\n            \n\n\n            \n                Implements\n            \n            \n                        TranslateLoader\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                config\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpBackend\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationLoadingService\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationsPaths\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getTranslation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:25\n                        \n                    \n\n            \n                \n                    The configuration for the NgxI18nModule.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpBackend\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpBackend\n\n                    \n                \n                \n                    \n                        Default value : inject(HttpBackend)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:30\n                        \n                    \n\n            \n                \n                    Instance of the httpBackend\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationLoadingService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nLoadingService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nLoadingService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:19\n                        \n                    \n\n            \n                \n                    The instance of the translation loading service\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationsPaths\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nTranslationPathsToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:35\n                        \n                    \n\n            \n                \n                    The translation paths\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslation(lang: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:42\n                        \n                    \n\n\n            \n                \n                        Fetches the provided translation files and saves them to the translation store\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                lang\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currently used language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpBackend, HttpClient } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { TranslateLoader } from '@ngx-translate/core';\nimport { deepmerge } from 'deepmerge-ts';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { NgxI18nConfiguration } from '../../i18n.types';\nimport { NgxI18nLoadingService } from '../../services';\nimport { NgxI18nConfigurationToken, NgxI18nTranslationPathsToken } from '../../tokens';\n\n/**\n * A loader that allows to load in multiple translation JSON files at the same time\n */\nexport class NgxI18nMultiTranslationHttpLoader implements TranslateLoader {\n\t/**\n\t * The instance of the translation loading service\n\t */\n\tprivate readonly translationLoadingService: NgxI18nLoadingService =\n\t\tinject(NgxI18nLoadingService);\n\n\t/**\n\t * The configuration for the NgxI18nModule.\n\t */\n\tprivate readonly config: NgxI18nConfiguration = inject(NgxI18nConfigurationToken);\n\n\t/**\n\t * Instance of the httpBackend\n\t */\n\tprivate readonly httpBackend: HttpBackend = inject(HttpBackend);\n\n\t/**\n\t * The translation paths\n\t */\n\tprivate readonly translationsPaths: string[] = inject(NgxI18nTranslationPathsToken);\n\n\t/**\n\t * Fetches the provided translation files and saves them to the translation store\n\t *\n\t * @param  lang - The currently used language\n\t */\n\tpublic getTranslation(lang: string): Observable {\n\t\t// Iben: Fetch the currently existing translations, so we can see if they already exist in the loading service\n\t\tconst availableTranslations = this.translationLoadingService.getTranslations();\n\n\t\t// Iben: Convert the translation paths to a combination of calls to get the translations or from the translations store\n\t\tconst requestedTranslations = this.translationsPaths.map((path) => {\n\t\t\tconst fromStore = Boolean(availableTranslations[path]);\n\t\t\tif (fromStore) {\n\t\t\t\t// Iben: If the translations came from the store, mark them as such\n\t\t\t\treturn of({\n\t\t\t\t\ttranslations: availableTranslations[path],\n\t\t\t\t\tfromStore,\n\t\t\t\t\tpath,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Iben: If the translations aren't available in the store, we fetch them from the server\n\t\t\t\t// Wouter: When provided, add a cache busting param so that each request is fetched from the server instead of the browser cache\n\t\t\t\tconst fetchPath = `${path}${lang}.json${\n\t\t\t\t\tthis.config.cacheBust ? '?v=' + this.config.cacheBust : ''\n\t\t\t\t}`;\n\n\t\t\t\treturn new HttpClient(this.httpBackend).get(fetchPath).pipe(\n\t\t\t\t\t// Iben: Map this to an object so we can track which results corresponds with which path\n\t\t\t\t\tmap((translations) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttranslations,\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\tfromStore,\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t\t\t// Iben: In case the translation is not loaded, we log an error\n\t\t\t\t\tcatchError((res) => {\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t'@ibenvandeveire/ngx-i18n - MultiTranslationLoader: Something went wrong for the following translation file:',\n\t\t\t\t\t\t\tfetchPath\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconsole.error(res.message);\n\n\t\t\t\t\t\t// Iben: If we get a not-authorized error from the server, we redirect to the resources not found page\n\t\t\t\t\t\tif (res.status === 401) {\n\t\t\t\t\t\t\tthis.translationLoadingService.markTranslationsLoadedAsFailed();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Iben: Return a translation loaded object so the translations service isn't broken\n\t\t\t\t\t\treturn of({\n\t\t\t\t\t\t\ttranslations: {},\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\tfromStore,\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Join all the requests and merge them\n\t\treturn this.translationLoadingService.loadTranslations(\n\t\t\tthis.translationsPaths.toString(),\n\t\t\tforkJoin(requestedTranslations).pipe(\n\t\t\t\ttap((translations) => {\n\t\t\t\t\t// Iben: Filter out the newly requested translations, and add them to the loaded translations store\n\t\t\t\t\tthis.translationLoadingService.addLoadedTranslations(\n\t\t\t\t\t\ttranslations\n\t\t\t\t\t\t\t.filter((translation) => !translation.fromStore)\n\t\t\t\t\t\t\t.reduce((previous, next) => {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t...previous,\n\t\t\t\t\t\t\t\t\t[next.path]: next.translations,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}, {})\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t\t// Iben: Merge all the translations in a single object for the translation service\n\t\t\t\tmap((response) => deepmerge(...response.map((item) => item.translations)))\n\t\t\t)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nRootService.html":{"url":"injectables/NgxI18nRootService.html","title":"injectable - NgxI18nRootService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nRootService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The single root instance of the translation service, in charge of holding the current language, the available languages and allows for the language to be changed.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                availableLanguages$\n                            \n                            \n                                    Private\n                                    Readonly\n                                availableLanguagesSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentLanguage$\n                            \n                            \n                                    Private\n                                    Readonly\n                                currentLanguageSubject\n                            \n                            \n                                    Public\n                                defaultLanguage\n                            \n                            \n                                    Public\n                                languageRouteParam\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getNewLanguage\n                            \n                            \n                                    Public\n                                initializeLanguage\n                            \n                            \n                                    Public\n                                setAvailableLanguages\n                            \n                            \n                                    Public\n                                setCurrentLanguage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:53\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getNewLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNewLanguage(language: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Checks if the newly proposed language can be set, if not we return either the current language or the default language\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                language\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe newly proposed language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initializeLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeLanguage()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Sets the initial language of the application when no language is set yet.\nIf a previous language was set in the local storage, said language is used. If not, the default language gets used.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setAvailableLanguages\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAvailableLanguages(languages: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:120\n                        \n                    \n\n\n            \n                \n                        Set the list of available languages\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                languages\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe list of available languages\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setCurrentLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    setCurrentLanguage(language: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Sets the current language of the application and saves it to the local storage. Returns true if the language was set\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                language\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        availableLanguages$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.availableLanguagesSubject\n\t\t.asObservable()\n\t\t.pipe(filter((languages) => languages?.length > 0))\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:41\n                        \n                    \n\n            \n                \n                    The available languages\nOnly emits once the list contains at least one language\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        availableLanguagesSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:34\n                        \n                    \n\n            \n                \n                    A subject to hold the available languages\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:17\n                        \n                    \n\n            \n                \n                    Instance of the configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentLanguage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentLanguageSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:65\n                        \n                    \n\n            \n                \n                    The current language of the application, as an Observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        currentLanguageSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tundefined\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:27\n                        \n                    \n\n            \n                \n                    A subject to hold the current language\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        defaultLanguage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:48\n                        \n                    \n\n            \n                \n                    The default language of the application\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        languageRouteParam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:53\n                        \n                    \n\n            \n                \n                    The route param we use to set the language, by default this is language\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:22\n                        \n                    \n\n            \n                \n                    Instance of the @ibenvandeveire/ngx-core NgxWindowService\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:71\n                                \n                            \n                    \n                        \n                                The current language of the application\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { BehaviorSubject, filter, Observable } from 'rxjs';\n\nimport { NgxI18nConfiguration } from '../../i18n.types';\nimport { NgxI18nConfigurationToken } from '../../tokens';\n\n//TODO: Iben: Once we have a shared lib we should replace the storage and the browser approaches with their corresponding implementations\n/**\n * The single root instance of the translation service, in charge of holding the current language, the available languages and allows for the language to be changed.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxI18nRootService {\n\t/**\n\t * Instance of the configuration\n\t */\n\tprivate readonly configuration: NgxI18nConfiguration = inject(NgxI18nConfigurationToken);\n\n\t/**\n\t * Instance of the @ibenvandeveire/ngx-core NgxWindowService\n\t */\n\tprivate readonly windowsService: NgxWindowService = inject(NgxWindowService);\n\n\t/**\n\t * A subject to hold the current language\n\t */\n\tprivate readonly currentLanguageSubject: BehaviorSubject = new BehaviorSubject(\n\t\tundefined\n\t);\n\n\t/**\n\t * A subject to hold the available languages\n\t */\n\tprivate readonly availableLanguagesSubject: BehaviorSubject = new BehaviorSubject([]);\n\n\t/**\n\t * The available languages\n\t *\n\t * Only emits once the list contains at least one language\n\t */\n\tpublic readonly availableLanguages$: Observable = this.availableLanguagesSubject\n\t\t.asObservable()\n\t\t.pipe(filter((languages) => languages?.length > 0));\n\n\t/**\n\t * The default language of the application\n\t */\n\tpublic defaultLanguage: string;\n\n\t/**\n\t * The route param we use to set the language, by default this is `language`\n\t */\n\tpublic languageRouteParam: string;\n\n\tconstructor() {\n\t\t// Iben: Set the initial values so that we can refer to the services as the source of truth\n\t\tthis.defaultLanguage = this.configuration.defaultLanguage;\n\t\tthis.languageRouteParam = this.configuration.languageRouteParam || 'language';\n\t\tthis.availableLanguagesSubject.next(this.configuration.availableLanguages || []);\n\t}\n\n\t/**\n\t * The current language of the application, as an Observable\n\t */\n\tpublic readonly currentLanguage$: Observable =\n\t\tthis.currentLanguageSubject.asObservable();\n\n\t/**\n\t * The current language of the application\n\t */\n\tpublic get currentLanguage(): string {\n\t\treturn this.currentLanguageSubject.getValue();\n\t}\n\n\t/**\n\t * Sets the current language of the application and saves it to the local storage. Returns true if the language was set\n\t *\n\t * @param language - The provided language\n\t */\n\tpublic setCurrentLanguage(language: string): void {\n\t\t// Iben: get the new language\n\t\tconst newLanguage = this.getNewLanguage(language);\n\n\t\t// Iben: Save the current language to the localStorage when we're in the browser\n\t\tthis.windowsService.runInBrowser(() => {\n\t\t\tlocalStorage.setItem('ngx-i18n-language', newLanguage);\n\t\t});\n\n\t\t// Iben: Update the subject\n\t\tthis.currentLanguageSubject.next(newLanguage);\n\t}\n\n\t/**\n\t * Sets the initial language of the application when no language is set yet.\n\t *\n\t * If a previous language was set in the local storage, said language is used. If not, the default language gets used.\n\t */\n\tpublic initializeLanguage(): void {\n\t\t// Iben: If the current language already exists, we early exit\n\t\tif (this.currentLanguage) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the current language does not exist, we check if it exists in the local storage, if not, we use the default config\n\t\tlet language = this.defaultLanguage;\n\n\t\tthis.windowsService.runInBrowser(() => {\n\t\t\tlanguage = localStorage.getItem('ngx-i18n-language') || this.defaultLanguage;\n\t\t});\n\n\t\t// Iben: We set the new language\n\t\tthis.setCurrentLanguage(language);\n\t}\n\n\t/**\n\t * Set the list of available languages\n\t *\n\t * @param languages - The list of available languages\n\t */\n\tpublic setAvailableLanguages(languages: string[]): void {\n\t\tthis.availableLanguagesSubject.next(languages);\n\t}\n\n\t/**\n\t * Checks if the newly proposed language can be set, if not we return either the current language or the default language\n\t *\n\t * @param {string} language - The newly proposed language\n\t */\n\tprivate getNewLanguage(language: string): string {\n\t\t// Iben: Save the currently being set language\n\t\tlet newLanguage = language;\n\n\t\t// Iben: Check if the new language is part of the available languages\n\t\tif (!this.availableLanguagesSubject.getValue().includes(language)) {\n\t\t\t// Iben: If a language is set that's not part of the available languages, we return a warn\n\t\t\tconsole.warn(\n\t\t\t\t`NgxI18n: A language, ${language}, was attempted to be set that was not part of the available languages (${this.availableLanguagesSubject\n\t\t\t\t\t.getValue()\n\t\t\t\t\t.join(', ')})`\n\t\t\t);\n\n\t\t\t// Iben: If there is already a language set, we early exit and keep the remaining language\n\t\t\tif (this.currentLanguage) {\n\t\t\t\treturn this.currentLanguage;\n\t\t\t}\n\n\t\t\t// Iben: If no language exists, we use the default language\n\t\t\tnewLanguage = this.defaultLanguage;\n\t\t}\n\n\t\treturn newLanguage;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nService.html":{"url":"injectables/NgxI18nService.html","title":"injectable - NgxI18nService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/i18n/i18n.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that holds the translations for an individual feature. Multiple instances of this service will exist throughout your application.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                rootI18nService\n                            \n                            \n                                    Public\n                                setLanguage\n                            \n                            \n                                    Public\n                                    Readonly\n                                translateService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getTranslation\n                            \n                            \n                                    Public\n                                getTranslationObservable\n                            \n                            \n                                    Public\n                                initI18n\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                                \n                                    availableLanguages\n                                \n                                \n                                    defaultLanguage\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslation(key: string, params?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:76\n                        \n                    \n\n\n            \n                \n                        Returns an instant translation based on a provided key and params\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the translation\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional set of params\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslationObservable\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslationObservable(key: string, params?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:87\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TranslationType\n                            \n                        \n                    \n\n            \n                \n                        Returns a observable based translation based on a provided key and params\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the translation\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional set of params\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initI18n\n                        \n                    \n                \n            \n            \n                \n                        \n                    initI18n(language: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Initializes the translations based on the provided language\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                language\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        rootI18nService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nRootService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nRootService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:21\n                        \n                    \n\n            \n                \n                    Instance of the NgxI8nRootService\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setLanguage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:65\n                        \n                    \n\n            \n                \n                    Set the current language of the application\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    language\n                                                    \n                                                            \nThe provided language\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        translateService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TranslateService\n\n                    \n                \n                \n                    \n                        Default value : inject(TranslateService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:16\n                        \n                    \n\n            \n                \n                    Instance of the ngx-translate TranslateService\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:26\n                                \n                            \n                    \n                        \n                                Returns the current language of the application\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        availableLanguages\n                    \n                \n\n                \n                    \n                        getavailableLanguages()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:33\n                                \n                            \n                    \n                        \n                                Returns the available languages of the application\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        defaultLanguage\n                    \n                \n\n                \n                    \n                        getdefaultLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:40\n                                \n                            \n                    \n                        \n                                Returns the default language of the application\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\n\nimport { NgxI18nAbstractService } from '../../abstracts';\nimport { NgxI18nRootService } from '../root-i18n/root-i18n.service';\n\n/**\n * A service that holds the translations for an individual feature. Multiple instances of this service will exist throughout your application.\n */\n@Injectable()\nexport class NgxI18nService implements NgxI18nAbstractService {\n\t/**\n\t * Instance of the ngx-translate TranslateService\n\t */\n\tpublic readonly translateService: TranslateService = inject(TranslateService);\n\n\t/**\n\t * Instance of the NgxI8nRootService\n\t */\n\tprivate readonly rootI18nService: NgxI18nRootService = inject(NgxI18nRootService);\n\n\t/**\n\t * Returns the current language of the application\n\t */\n\tpublic get currentLanguage(): string {\n\t\treturn this.rootI18nService.currentLanguage;\n\t}\n\n\t/**\n\t * Returns the available languages of the application\n\t */\n\tpublic get availableLanguages(): string[] {\n\t\treturn this.translateService.getLangs() as string[];\n\t}\n\n\t/**\n\t * Returns the default language of the application\n\t */\n\tpublic get defaultLanguage(): string {\n\t\treturn this.translateService.getFallbackLang();\n\t}\n\n\t/**\n\t * Initializes the translations based on the provided language\n\t *\n\t * @param language - The provided language\n\t */\n\tpublic initI18n(language: string): Observable {\n\t\t// Iben: If the language is provided, set it in the root service\n\t\tif (language) {\n\t\t\tthis.rootI18nService.setCurrentLanguage(language);\n\t\t}\n\n\t\tthis.translateService.use(this.rootI18nService.currentLanguage);\n\n\t\treturn this.translateService.reloadLang(language);\n\t}\n\n\t/**\n\t * Set the current language of the application\n\t *\n\t * @param language - The provided language\n\t */\n\tpublic setLanguage = (language: string): void => {\n\t\tthis.rootI18nService.setCurrentLanguage(language);\n\t\tthis.translateService.use(this.rootI18nService.currentLanguage);\n\t};\n\n\t/**\n\t * Returns an instant translation based on a provided key and params\n\t *\n\t * @param key - The key of the translation\n\t * @param params - An optional set of params\n\t */\n\tpublic getTranslation(key: string, params?: any): string {\n\t\treturn this.translateService.instant(key, params);\n\t}\n\n\t// Denis: Set the default to string but allow for others.\n\t/**\n\t * Returns a observable based translation based on a provided key and params\n\t *\n\t * @param key - The key of the translation\n\t * @param params - An optional set of params\n\t */\n\tpublic getTranslationObservable(\n\t\tkey: string,\n\t\tparams?: any\n\t): Observable {\n\t\treturn this.translateService.get(key, params);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nTranslationLoaderResolver.html":{"url":"injectables/NgxI18nTranslationLoaderResolver.html","title":"injectable - NgxI18nTranslationLoaderResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nTranslationLoaderResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts\n        \n\n\n            \n                Description\n            \n            \n                This NgxI18nTranslationLoaderResolver will make sure that the translations are loaded from the moment you route to a detail module\nIt is essential you put this resolver at the root of your modules, whether it be lazy loaded through the guard or calling the resolver in the constructor\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                i18nLoadingService\n                            \n                            \n                                    Private\n                                    Readonly\n                                i18nService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resolve\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolve()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        i18nLoadingService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nLoadingService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nLoadingService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:20\n                        \n                    \n\n            \n                \n                    The NgxI18nLoadingService instance\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        i18nService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:16\n                        \n                    \n\n            \n                \n                    The NgxI18nService instance\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { finalize, map, Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxI18nLoadingService, NgxI18nService } from '../../services';\n\n/**\n * This NgxI18nTranslationLoaderResolver will make sure that the translations are loaded from the moment you route to a detail module\n * It is essential you put this resolver at the root of your modules, whether it be lazy loaded through the guard or calling the resolver in the constructor\n */\n@Injectable()\nexport class NgxI18nTranslationLoaderResolver {\n\t/**\n\t * The NgxI18nService instance\n\t */\n\tprivate readonly i18nService: NgxI18nService = inject(NgxI18nService);\n\t/**\n\t * The NgxI18nLoadingService instance\n\t */\n\tprivate readonly i18nLoadingService: NgxI18nLoadingService = inject(NgxI18nLoadingService);\n\n\tpublic resolve(): Observable {\n\t\t// Iben: Generate an id for the translations we're about to load\n\t\tconst id = uuid();\n\n\t\t// Iben: Dispatch to the loader service that we're about to load a set of translations\n\t\tthis.i18nLoadingService.dispatchTranslationLoaderAction({ id, state: 'LOADING' });\n\n\t\t// Iben: This will reload the translations, and fetch the newly needed lazy loaded translations\n\t\treturn this.i18nService.initI18n(this.i18nService.currentLanguage).pipe(\n\t\t\t// Iben: Map to true for the guard\n\t\t\tmap(() => true),\n\t\t\tfinalize(() => {\n\t\t\t\t// Iben: Dispatch to the loader service that the translations have been loaded\n\t\t\t\tthis.i18nLoadingService.dispatchTranslationLoaderAction({ id, state: 'LOADED' });\n\t\t\t})\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerBase.html":{"url":"interfaces/NgxImageMarkerBase.html","title":"interface - NgxImageMarkerBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            close\n                                        \n                                \n                                \n                                        \n                                            mode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        close\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        close:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \"view\" | \"edit\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"view\" | \"edit\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxImageMarkerComponent.html":{"url":"components/NgxImageMarkerComponent.html","title":"component - NgxImageMarkerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxImageMarkerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts\n\n\n\n    \n        Description\n    \n    \n        A component wrapper for MarkerJs views\nhttps://markerjs.com/\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnChanges\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-image-marker\n            \n\n\n\n\n\n            \n                template\n                \n            \n\n\n\n\n            \n                styleUrl\n                ./image-marker.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                canEdit\n                            \n                            \n                                    Private\n                                currentMarker\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentZoomLevel\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                image\n                            \n                            \n                                    Public\n                                    Readonly\n                                imageDescription\n                            \n                            \n                                    Public\n                                    Readonly\n                                imageElement\n                            \n                            \n                                    Private\n                                    Readonly\n                                imageMarkerService\n                            \n                            \n                                    Public\n                                markerClicked\n                            \n                            \n                                    Private\n                                    Readonly\n                                markerDestroyedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                markerTypes\n                            \n                            \n                                    Public\n                                    Readonly\n                                startState\n                            \n                            \n                                    Public\n                                stateUpdated\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                            \n                                    Public\n                                    Readonly\n                                zoomLevels\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createMarker\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                canEdit\n                            \n                            \n                                currentZoomLevel\n                            \n                            \n                                image\n                            \n                            \n                                imageDescription\n                            \n                            \n                                markerTypes\n                            \n                            \n                                startState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                markerClicked\n                            \n                            \n                                stateUpdated\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        canEdit\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:84\n                            \n                        \n                \n                    \n                        Whether we can edit the view, by default this is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        currentZoomLevel\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:89\n                            \n                        \n                \n                    \n                        An optional current zoom level\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        image\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:69\n                            \n                        \n                \n                    \n                        The url to the image we wish to render\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        imageDescription\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:74\n                            \n                        \n                \n                    \n                        A WCAG/WAI-ARIA compliant description of the image\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        markerTypes\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:99\n                            \n                        \n                \n                    \n                        An optional record of types of Markerjs markers we wish to render\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        startState\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:79\n                            \n                        \n                \n                    \n                        The start data we wish to render\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        markerClicked\n                    \n                \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:109\n                            \n                        \n                \n                    \n                        Emits when a marker is clicked when the view is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        stateUpdated\n                    \n                \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:104\n                            \n                        \n                \n                    \n                        Emits when the state has been updated\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createMarker\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMarker()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:149\n                        \n                    \n\n\n            \n                \n                        Creates a MarkerJs view based on the provided configuration\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:111\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:137\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        canEdit\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:84\n                        \n                    \n\n            \n                \n                    Whether we can edit the view, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentMarker\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxImageMarker\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:54\n                        \n                    \n\n            \n                \n                    The currently created marker\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentZoomLevel\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:89\n                        \n                    \n\n            \n                \n                    An optional current zoom level\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        image\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:69\n                        \n                    \n\n            \n                \n                    The url to the image we wish to render\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        imageDescription\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:74\n                        \n                    \n\n            \n                \n                    A WCAG/WAI-ARIA compliant description of the image\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        imageElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('imageElement')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:64\n                        \n                    \n\n            \n                \n                    The rendered image element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        imageMarkerService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxImageMarkerService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxImageMarkerService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markerClicked\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:109\n                        \n                    \n\n            \n                \n                    Emits when a marker is clicked when the view is in readonly mode\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        markerDestroyedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:59\n                        \n                    \n\n            \n                \n                    A subject holding the destroy state of the marker\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        markerTypes\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:99\n                        \n                    \n\n            \n                \n                    An optional record of types of Markerjs markers we wish to render\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        startState\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:79\n                        \n                    \n\n            \n                \n                    The start data we wish to render\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stateUpdated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:104\n                        \n                    \n\n            \n                \n                    Emits when the state has been updated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        zoomLevels\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:94\n                        \n                    \n\n            \n                \n                    An optional amount of times we can zoom in and out\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  inject,\n  OnChanges,\n  OnDestroy,\n  input,\n  OutputEmitterRef,\n  output,\n  viewChild\n} from '@angular/core';\nimport { NgxWindowService, simpleChangeHasChanged } from '@ibenvandeveire/ngx-core';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxImageMarkerService } from '../../services';\nimport {\n\tNgxImageMarker,\n\tNgxImageMarkerItem,\n\tNgxImageMarkerState,\n\tNgxImageMarkerTypes,\n} from '../../types';\n\n/**\n * A component wrapper for MarkerJs views\n *\n * https://markerjs.com/\n */\n\n// TODO: Iben: Once we figured out how we'll share the FormAccessors with other packages, we should make this a ControlValueAccessor\n@Component({\n\tselector: 'ngx-image-marker',\n\ttemplate: ``,\n\tstyleUrl: './image-marker.component.scss',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\thost: {\n\t\tclass: 'ngx-image-marker',\n\t},\n})\nexport class NgxImageMarkerComponent implements AfterViewInit, OnChanges, OnDestroy {\n\tprivate readonly imageMarkerService: NgxImageMarkerService = inject(NgxImageMarkerService);\n\tprivate readonly windowService: NgxWindowService = inject(NgxWindowService);\n\tprivate readonly elementRef: ElementRef = inject(ElementRef);\n\n\t/**\n\t * The currently created marker\n\t */\n\tprivate currentMarker: NgxImageMarker;\n\n\t/**\n\t * A subject holding the destroy state of the marker\n\t */\n\tprivate readonly markerDestroyedSubject: Subject = new Subject();\n\n\t/**\n\t * The rendered image element\n\t */\n\tpublic readonly imageElement = viewChild('imageElement');\n\n\t/**\n\t * The url to the image we wish to render\n\t */\n\tpublic readonly image = input.required();\n\n\t/**\n\t * A WCAG/WAI-ARIA compliant description of the image\n\t */\n\tpublic readonly imageDescription = input.required();\n\n\t/**\n\t * The start data we wish to render\n\t */\n\tpublic readonly startState = input();\n\n\t/**\n\t * Whether we can edit the view, by default this is true\n\t */\n\tpublic readonly canEdit = input(true);\n\n\t/**\n\t * An optional current zoom level\n\t */\n\tpublic readonly currentZoomLevel = input();\n\n\t/**\n\t * An optional amount of times we can zoom in and out\n\t */\n\tpublic readonly zoomLevels = input();\n\n\t/**\n\t * An optional record of types of Markerjs markers we wish to render\n\t */\n\tpublic readonly markerTypes = input();\n\n\t/**\n\t * Emits when the state has been updated\n\t */\n\tpublic stateUpdated: OutputEmitterRef = output();\n\n\t/**\n\t * Emits when a marker is clicked when the view is in readonly mode\n\t */\n\tpublic markerClicked: OutputEmitterRef = output();\n\n\tngAfterViewInit(): void {\n\t\t// Iben: Create the initial marker\n\t\tthis.createMarker();\n\t}\n\n\tngOnChanges(changes: any): void {\n\t\t// Iben: If no marker exists or if the image has not rendered, early exit\n\t\tif (!this.currentMarker || !this.imageElement()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Check if there are changes to the state or the configuration when there is a marker\n\t\tconst hasChanges =\n\t\t\tthis.currentMarker &&\n\t\t\t(simpleChangeHasChanged(changes.startState) ||\n\t\t\t\tsimpleChangeHasChanged(changes.canEdit) ||\n\t\t\t\tsimpleChangeHasChanged(changes.markerTypes) ||\n\t\t\t\tsimpleChangeHasChanged(changes.currentZoomLevel) ||\n\t\t\t\tsimpleChangeHasChanged(changes.zoomLevels));\n\n\t\t// Iben: Recreate the marker whenever the configuration is adjusted\n\t\tif (!this.currentMarker || hasChanges) {\n\t\t\tthis.createMarker();\n\t\t}\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Close the marker\n\t\tthis.currentMarker.close();\n\n\t\t// Iben: Complete the destroy subject\n\t\tthis.markerDestroyedSubject.next();\n\t\tthis.markerDestroyedSubject.complete();\n\t}\n\n\t/**\n\t * Creates a MarkerJs view based on the provided configuration\n\t */\n\tprivate createMarker() {\n\t\t// Iben: Only create the image when we're in the browser\n\t\tthis.windowService.runInBrowser(() => {\n\t\t\t// Iben: Close the existing marker if needed\n\t\t\tif (this.currentMarker) {\n\t\t\t\tthis.currentMarker.close();\n\t\t\t\tthis.markerDestroyedSubject.next();\n\t\t\t}\n\n\t\t\t// Iben: Create a new marker view based on the provided configuration\n\t\t\tconst currentZoomLevel = this.currentZoomLevel();\n\t\t\tconst zoomLevels = this.zoomLevels();\n\t\t\tthis.currentMarker = this.imageMarkerService.createImageMarker(\n\t\t\t\tthis.imageElement().nativeElement,\n\t\t\t\tthis.elementRef.nativeElement,\n\t\t\t\t{\n\t\t\t\t\tmode: this.canEdit() ? 'edit' : 'view',\n\t\t\t\t\tallowZoom: true,\n\t\t\t\t\tdefaultState: this.startState() || undefined,\n\t\t\t\t\tmarkerTypes: this.markerTypes(),\n\t\t\t\t\tzoom:\n\t\t\t\t\t\tcurrentZoomLevel !== undefined && zoomLevels\n\t\t\t\t\t\t\t? { current: currentZoomLevel, levels: zoomLevels }\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Iben: Listen to the valueChanges based on the provided type.\n\t\t\tif (this.currentMarker.mode === 'edit') {\n\t\t\t\tthis.currentMarker.valueChanges\n\t\t\t\t\t.pipe(\n\t\t\t\t\t\ttap((value) => {\n\t\t\t\t\t\t\tthis.stateUpdated.emit(value);\n\t\t\t\t\t\t}),\n\t\t\t\t\t\ttakeUntil(this.markerDestroyedSubject)\n\t\t\t\t\t)\n\t\t\t\t\t.subscribe();\n\t\t\t} else {\n\t\t\t\tthis.currentMarker.valueChanges\n\t\t\t\t\t.pipe(\n\t\t\t\t\t\ttap((value) => {\n\t\t\t\t\t\t\tthis.markerClicked.emit(value);\n\t\t\t\t\t\t}),\n\t\t\t\t\t\ttakeUntil(this.markerDestroyedSubject)\n\t\t\t\t\t)\n\t\t\t\t\t.subscribe();\n\t\t\t}\n\t\t});\n\t}\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxImageMarkerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerConfiguration.html":{"url":"interfaces/NgxImageMarkerConfiguration.html","title":"interface - NgxImageMarkerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for the marker view\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowClear\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            allowZoom\n                                        \n                                \n                                \n                                        \n                                            defaultState\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            markerTypes\n                                        \n                                \n                                \n                                        \n                                            mode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            zoom\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowClear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowClear:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether clearing the marker view is allowed, by default false\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        allowZoom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowZoom:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether zooming in is allowed, by default false\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultState\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultState:         NgxImageMarkerState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxImageMarkerState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state the view has to start from\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        markerTypes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        markerTypes:         NgxImageMarkerTypes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxImageMarkerTypes\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional set of allowed marker types, by default all\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \"view\" | \"edit\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"view\" | \"edit\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the record is readonly or not\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zoom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zoom:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerEdit.html":{"url":"interfaces/NgxImageMarkerEdit.html","title":"interface - NgxImageMarkerEdit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerEdit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxImageMarkerBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mode\n                                        \n                                \n                                \n                                        \n                                            valueChanges\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valueChanges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        valueChanges:     Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Observable\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxImageMarkerService.html":{"url":"injectables/NgxImageMarkerService.html","title":"injectable - NgxImageMarkerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxImageMarkerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that serves as a wrapper for MarkerJs2 and MarkerJs-live\nhttps://markerjs.com/\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                markers\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createImageMakerEdit\n                            \n                            \n                                    Public\n                                createImageMarker\n                            \n                            \n                                    Private\n                                createMarkerClickedListener\n                            \n                            \n                                    Private\n                                createMarkerValueChanges\n                            \n                            \n                                    Private\n                                createReadonlyImageMarker\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createImageMakerEdit\n                        \n                    \n                \n            \n            \n                \n                        \n                    createImageMakerEdit(id: string, image: HTMLImageElement | HTMLElement, rootTarget: HTMLElement, configuration: NgxImageMarkerConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:117\n                        \n                    \n\n\n            \n                \n                        Creates an editable marker view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                image\n                                            \n                                                        HTMLImageElement | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe image element we wish to draw markers on\n\n\n                                            \n                                        \n                                        \n                                                rootTarget\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we render the image in\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxImageMarkerConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration we wish to pass to the image markers\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxImageMarkerEdit\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createImageMarker\n                        \n                    \n                \n            \n            \n                \n                        \n                    createImageMarker(image: HTMLImageElement | HTMLElement, rootTarget: HTMLElement, configuration: NgxImageMarkerConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Create an image with markers\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                image\n                                            \n                                                        HTMLImageElement | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe image element we wish to draw markers on\n\n\n                                            \n                                        \n                                        \n                                                rootTarget\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we render the image in\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxImageMarkerConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration we wish to pass to the image markers\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxImageMarker\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createMarkerClickedListener\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMarkerClickedListener(marker: MarkerView)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:207\n                        \n                    \n\n\n            \n                \n                        Listen to the marker clicks in the readonly view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                marker\n                                            \n                                                        MarkerView\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe marker view\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createMarkerValueChanges\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMarkerValueChanges(marker: MarkerArea)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:188\n                        \n                    \n\n\n            \n                \n                        Listen to the value changes in the editable view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                marker\n                                            \n                                                        MarkerArea\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe marker view\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createReadonlyImageMarker\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReadonlyImageMarker(id: string, image: HTMLImageElement | HTMLElement, rootTarget: HTMLElement, configuration: NgxImageMarkerConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Creates a readonly marker view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                image\n                                            \n                                                        HTMLImageElement | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe image element we wish to draw markers on\n\n\n                                            \n                                        \n                                        \n                                                rootTarget\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we render the image in\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxImageMarkerConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration we wish to pass to the image markers\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxImageMarkerView\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:221\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        markers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:31\n                        \n                    \n\n            \n                \n                    A record with all markers\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { MarkerView } from 'markerjs-live';\nimport { MarkerArea, MarkerAreaState } from 'markerjs2';\nimport { Observable, Subject } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport {\n\tNgxImageMarker,\n\tNgxImageMarkerConfiguration,\n\tNgxImageMarkerEdit,\n\tNgxImageMarkerItem,\n\tNgxImageMarkerView,\n} from '../../types';\n\n/**\n * A service that serves as a wrapper for MarkerJs2 and MarkerJs-live\n *\n * https://markerjs.com/\n */\n// TODO: Iben: To avoid essentially only testing a mocked version of this package, we need to test this through Cypress/Playwrite/... tests\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxImageMarkerService implements OnDestroy {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A record with all markers\n\t */\n\tprivate readonly markers: Record = {};\n\n\t/**\n\t * Create an image with markers\n\t *\n\t * @param image - The image element we wish to draw markers on\n\t * @param rootTarget - The element we render the image in\n\t * @param configuration - The configuration we wish to pass to the image markers\n\t */\n\tpublic createImageMarker(\n\t\timage: HTMLImageElement | HTMLElement,\n\t\trootTarget: HTMLElement,\n\t\tconfiguration: NgxImageMarkerConfiguration\n\t): NgxImageMarker {\n\t\t// Iben: Return undefined if we're not in the browser\n\t\tif (!this.windowService.isBrowser) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Create an id for the marker\n\t\tconst id = uuid();\n\n\t\t// Iben: Depending on the provided mode, we create a edit view or a non editable view\n\t\treturn configuration.mode === 'edit'\n\t\t\t? this.createImageMakerEdit(id, image, rootTarget, configuration)\n\t\t\t: this.createReadonlyImageMarker(id, image, rootTarget, configuration);\n\t}\n\n\t/**\n\t * Creates a readonly marker view\n\t *\n\t * @param image - The image element we wish to draw markers on\n\t * @param rootTarget - The element we render the image in\n\t * @param configuration - The configuration we wish to pass to the image markers\n\t */\n\tprivate createReadonlyImageMarker(\n\t\tid: string,\n\t\timage: HTMLImageElement | HTMLElement,\n\t\trootTarget: HTMLElement,\n\t\tconfiguration: NgxImageMarkerConfiguration\n\t): NgxImageMarkerView {\n\t\t// Iben: Create the new marker view\n\t\tconst marker = new MarkerView(image);\n\n\t\t// Iben: Set the root element so the marker layer is rendered in the same element\n\t\tmarker.targetRoot = rootTarget;\n\n\t\t// Iben: Create the Angular marker view\n\t\tconst result: NgxImageMarkerView = {\n\t\t\tmode: 'view',\n\t\t\tclose: (() => {\n\t\t\t\t// Iben: Remove the event listener and close the marker\n\t\t\t\tmarker.removeEventListener('select', () => {});\n\t\t\t\tmarker.close();\n\n\t\t\t\t// Iben: Remove the marker from the record\n\t\t\t\tthis.markers[id] = undefined;\n\t\t\t}).bind(this),\n\t\t\tvalueChanges: this.createMarkerClickedListener(marker),\n\t\t};\n\n\t\t// Iben: Create a clicked listener for the currently clicked item\n\t\tthis.createMarkerClickedListener(marker);\n\n\t\t// Iben: If custom marker types were provided, set them as the available types\n\t\tif (configuration.markerTypes?.view) {\n\t\t\tmarker.availableMarkerTypes = configuration.markerTypes.view;\n\t\t}\n\n\t\t// Iben: Show the marker once all settings are set\n\t\tmarker.show(configuration.defaultState);\n\n\t\t// Iben: Add the marker to the record\n\t\tthis.markers[id] = result;\n\n\t\t// Iben: Return the Angular view\n\t\treturn result;\n\t}\n\n\t/**\n\t * Creates an editable marker view\n\t *\n\t * @param image - The image element we wish to draw markers on\n\t * @param rootTarget - The element we render the image in\n\t * @param configuration - The configuration we wish to pass to the image markers\n\t */\n\tprivate createImageMakerEdit(\n\t\tid: string,\n\t\timage: HTMLImageElement | HTMLElement,\n\t\trootTarget: HTMLElement,\n\t\tconfiguration: NgxImageMarkerConfiguration\n\t): NgxImageMarkerEdit {\n\t\t// Iben: Create a new marker view\n\t\tconst marker = new MarkerArea(image);\n\n\t\t// Iben: Set the root element so the marker layer is rendered in the same element\n\t\tmarker.targetRoot = rootTarget;\n\n\t\t// Iben: Create the Angular based view\n\t\tconst result: NgxImageMarkerEdit = {\n\t\t\tmode: 'edit',\n\t\t\tclose: (() => {\n\t\t\t\t// Iben: Remove the event listener and close the marker\n\t\t\t\tmarker.removeEventListener('statechange', () => {});\n\t\t\t\tmarker.close();\n\n\t\t\t\t// Iben: Remove the marker from the record\n\t\t\t\tthis.markers[id] = undefined;\n\t\t\t}).bind(this),\n\t\t\tvalueChanges: this.createMarkerValueChanges(marker),\n\t\t};\n\n\t\t// Iben: Set the configuration settings\n\t\t// These can later on be extended when needed\n\t\tmarker.uiStyleSettings.zoomButtonVisible = configuration.allowZoom;\n\t\tmarker.uiStyleSettings.zoomOutButtonVisible = configuration.allowZoom;\n\t\tmarker.zoomSteps = configuration.zoom?.levels || [1, 2, 3, 4];\n\t\tmarker.zoomLevel = configuration.zoom?.current ?? 1;\n\t\tmarker.uiStyleSettings.clearButtonVisible = configuration.allowClear;\n\n\t\t// Iben: Set the available marker types\n\t\tmarker.availableMarkerTypes =\n\t\t\t(configuration.markerTypes?.edit as any) || marker.ALL_MARKER_TYPES;\n\n\t\t// Iben: Set the class names of the items\n\t\tmarker.uiStyleSettings.notesAreaStyleClassName = 'ngx-image-marker-notes-area';\n\t\tmarker.uiStyleSettings.toolbarStyleColorsClassName = 'ngx-image-marker-toolbar';\n\t\tmarker.uiStyleSettings.toolboxStyleColorsClassName = 'ngx-image-marker-toolbox';\n\t\tmarker.uiStyleSettings.toolbarButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbar-button';\n\t\tmarker.uiStyleSettings.toolbarActiveButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbar-button-active';\n\t\tmarker.uiStyleSettings.toolboxButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbox-button';\n\t\tmarker.uiStyleSettings.toolboxActiveButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbox-button-active';\n\n\t\t// Iben: Show the marker once all settings are set\n\t\tmarker.show();\n\n\t\t// Iben: If there was state before, set it accordingly\n\t\tif (configuration.defaultState) {\n\t\t\tmarker.restoreState(configuration.defaultState);\n\t\t}\n\n\t\t// Iben: Add the marker to the record\n\t\tthis.markers[id] = result;\n\n\t\t// Iben: Return the Angular view\n\t\treturn result;\n\t}\n\n\t/**\n\t * Listen to the value changes in the editable view\n\t *\n\t * @param {MarkerArea} marker - The marker view\n\t */\n\tprivate createMarkerValueChanges(marker: MarkerArea): Observable {\n\t\t// Iben: Setup valueChanges\n\t\tconst valueChanges = new Subject();\n\n\t\t// Iben: Update the subject whenever a new item was added to the marker view\n\t\tmarker.addEventListener('statechange', (event) => {\n\t\t\tvalueChanges.next(event?.markerArea?.getState());\n\t\t});\n\n\t\t// Iben: Return changes observable\n\t\t// This Observable gets closed in the NgxImageMarkerComponent and therefor do not require a takeUntil here\n\t\treturn valueChanges.asObservable();\n\t}\n\n\t/**\n\t * Listen to the marker clicks in the readonly view\n\t *\n\t * @param {MarkerArea} marker - The marker view\n\t */\n\tprivate createMarkerClickedListener(marker: MarkerView): Observable {\n\t\t// Iben: Setup valueChanges\n\t\tconst valueChanges = new Subject();\n\n\t\t// Iben: Update the subject whenever a marker was clicked\n\t\tmarker.addEventListener('select', (_, marker) => {\n\t\t\tvalueChanges.next(marker);\n\t\t});\n\n\t\t// Iben: Return changes observable\n\t\t// This Observable gets closed in the NgxImageMarkerComponent and therefor do not require a takeUntil here\n\t\treturn valueChanges.asObservable();\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Close all existing markers, removing the listeners where needed\n\t\tObject.values(this.markers)\n\t\t\t.filter(Boolean)\n\t\t\t.forEach((marker) => {\n\t\t\t\tmarker.close();\n\t\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerTypes.html":{"url":"interfaces/NgxImageMarkerTypes.html","title":"interface - NgxImageMarkerTypes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerTypes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n            \n                Description\n            \n            \n                A record with the marker types we wish to show, both for the view and the edit mode\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            edit\n                                        \n                                \n                                \n                                        \n                                            view\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edit:     ()[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ()[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        view\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        view:     ()[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ()[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerView.html":{"url":"interfaces/NgxImageMarkerView.html","title":"interface - NgxImageMarkerView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxImageMarkerBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mode\n                                        \n                                \n                                \n                                        \n                                            valueChanges\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valueChanges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        valueChanges:     Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Observable\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxIsAuthenticatedDirective.html":{"url":"directives/NgxIsAuthenticatedDirective.html","title":"directive - NgxIsAuthenticatedDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxIsAuthenticatedDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                \nA directive that will render a part of the template based on whether the user is authenticated.\n\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxIsAuthenticated]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationService\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Public\n                                ngxIsAuthenticated\n                            \n                            \n                                    Public\n                                ngxIsAuthenticatedElse\n                            \n                            \n                                    Private\n                                shouldBeAuthenticated\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxIsAuthenticated\n                            \n                            \n                                ngxIsAuthenticatedElse\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:48\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxIsAuthenticated\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:70\n                            \n                        \n                \n                    \n                        Whether the user has to be authenticated\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxIsAuthenticatedElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:74\n                            \n                        \n                \n                    \n                        The else template in case the condition is not matched\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:125\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:76\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:80\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxAuthenticationServiceToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:35\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxIsAuthenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:70\n                        \n                    \n\n            \n                \n                    Whether the user has to be authenticated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxIsAuthenticatedElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:74\n                        \n                    \n\n            \n                \n                    The else template in case the condition is not matched\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldBeAuthenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:48\n                        \n                    \n\n            \n                \n                    Whether the user has to be authenticated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:40\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\n\n/**\n *  * A directive that will render a part of the template based on whether the user is authenticated.\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n@Directive({\n\tselector: '[ngxIsAuthenticated]',\n})\nexport class NgxIsAuthenticatedDirective implements OnDestroy {\n\tprivate readonly authenticationService = inject(\n\t\tNgxAuthenticationServiceToken\n\t);\n\tprivate viewContainer = inject(ViewContainerRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * Whether the user has to be authenticated\n\t */\n\tprivate shouldBeAuthenticated: boolean = true;\n\n\tconstructor() {\n\t\tconst templateRef = inject>(TemplateRef);\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tthis.shouldBeAuthenticated = this.ngxIsAuthenticated();\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxIsAuthenticatedElse();\n\t\t\tthis.elseViewRef = null;\n\t\t\tthis.updateView();\n\t\t});\n\t}\n\n\t/**\n\t * Whether the user has to be authenticated\n\t */\n\tpublic ngxIsAuthenticated: InputSignal = input();\n\t/**\n\t * The else template in case the condition is not matched\n\t */\n\tpublic ngxIsAuthenticatedElse: InputSignal> = input();\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.authenticationService.isAuthenticated$\n\t\t\t.pipe(\n\t\t\t\ttap((isAuthenticated) => {\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tif (\n\t\t\t\t\t\t(isAuthenticated && this.shouldBeAuthenticated) ||\n\t\t\t\t\t\t(!isAuthenticated && !this.shouldBeAuthenticated)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.thenViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.elseViewRef = null;\n\t\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxMediaQuery.html":{"url":"interfaces/NgxMediaQuery.html","title":"interface - NgxMediaQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxMediaQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/media-query.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            query\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgxMediaQuery {\n\tid: string;\n\tquery: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxMediaQueryDirective.html":{"url":"directives/NgxMediaQueryDirective.html","title":"directive - NgxMediaQueryDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxMediaQueryDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that will render a part of the template based on whether the current screen size matches the provided query\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxMediaQuery]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Protected\n                                destroyed$\n                            \n                            \n                                    Protected\n                                elseTemplateRef\n                            \n                            \n                                    Protected\n                                elseViewRef\n                            \n                            \n                                    Protected\n                                    Readonly\n                                mediaQueryService\n                            \n                            \n                                    Public\n                                ngxMediaQuery\n                            \n                            \n                                    Public\n                                ngxMediaQueryElse\n                            \n                            \n                                    Public\n                                ngxMediaQueryShouldMatch\n                            \n                            \n                                    Protected\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Protected\n                                thenTemplateRef\n                            \n                            \n                                    Protected\n                                thenViewRef\n                            \n                            \n                                    Protected\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxMediaQuery\n                            \n                            \n                                ngxMediaQueryElse\n                            \n                            \n                                ngxMediaQueryShouldMatch\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:68\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxMediaQuery\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:58\n                            \n                        \n                \n                    \n                        The query it should match\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxMediaQueryElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:63\n                            \n                        \n                \n                    \n                        The else template in case the query isn't matched\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxMediaQueryShouldMatch\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:68\n                            \n                        \n                \n                    \n                        Whether the query should be matched, by default this is true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:151\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:90\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:97\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:40\n                        \n                    \n\n            \n                \n                    The provided ChangeDetectorRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:45\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef<> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef<> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        mediaQueryService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxMediaQueryService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxMediaQueryService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxMediaQuery\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:58\n                        \n                    \n\n            \n                \n                    The query it should match\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxMediaQueryElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:63\n                        \n                    \n\n            \n                \n                    The else template in case the query isn't matched\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxMediaQueryShouldMatch\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:68\n                        \n                    \n\n            \n                \n                    Whether the query should be matched, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:31\n                        \n                    \n\n            \n                \n                    The provided template ref\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef<> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:50\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef<> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:35\n                        \n                    \n\n            \n                \n                    The provided ViewContainerRef\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tDirective,\n\tEmbeddedViewRef,\n\tinject,\n\tinput,\n\tInputSignal,\n\tTemplateRef,\n\tViewContainerRef,\n\tOnDestroy,\n} from '@angular/core';\nimport { takeUntilDestroyed, toObservable } from '@angular/core/rxjs-interop';\nimport { Subject, tap, takeUntil, combineLatest } from 'rxjs';\n\nimport { NgxMediaQueryService } from '../../services';\n\n/**\n * A directive that will render a part of the template based on whether the current screen size matches the provided query\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n\n@Directive({\n\tselector: '[ngxMediaQuery]',\n})\nexport class NgxMediaQueryDirective implements OnDestroy {\n\tprotected readonly mediaQueryService: NgxMediaQueryService = inject(NgxMediaQueryService);\n\t/**\n\t * The provided template ref\n\t */\n\tprotected readonly templateRef = inject>(TemplateRef);\n\t/**\n\t * The provided ViewContainerRef\n\t */\n\tprotected readonly viewContainer = inject(ViewContainerRef);\n\n\t/**\n\t * The provided ChangeDetectorRef\n\t */\n\tprotected readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprotected destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprotected thenTemplateRef: TemplateRef | null = null;\n\tprotected thenViewRef: EmbeddedViewRef | null = null;\n\tprotected elseTemplateRef: TemplateRef | null = null;\n\tprotected elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * The query it should match\n\t */\n\tpublic ngxMediaQuery: InputSignal = input();\n\n\t/**\n\t * The else template in case the query isn't matched\n\t */\n\tpublic ngxMediaQueryElse: InputSignal> = input(undefined);\n\n\t/**\n\t * Whether the query should be matched, by default this is true\n\t */\n\tpublic ngxMediaQueryShouldMatch: InputSignal = input(true);\n\n\tconstructor() {\n\t\tconst templateRef = this.templateRef;\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\t// Iben: Listen to the changes and handle them accordingly\n\t\tcombineLatest([\n\t\t\ttoObservable(this.ngxMediaQuery),\n\t\t\ttoObservable(this.ngxMediaQueryElse),\n\t\t\ttoObservable(this.ngxMediaQueryShouldMatch),\n\t\t])\n\t\t\t.pipe(\n\t\t\t\ttap(() => {\n\t\t\t\t\tthis.updateView();\n\t\t\t\t}),\n\t\t\t\ttakeUntilDestroyed()\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.mediaQueryService\n\t\t\t.matchesQuery(this.ngxMediaQuery())\n\t\t\t.pipe(\n\t\t\t\ttap((matchesQuery) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tconst shouldRender: boolean = this.ngxMediaQueryShouldMatch()\n\t\t\t\t\t\t? matchesQuery\n\t\t\t\t\t\t: !matchesQuery;\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\tif (shouldRender) {\n\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\tthis.elseViewRef = null;\n\n\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxMediaQueryService.html":{"url":"injectables/NgxMediaQueryService.html","title":"injectable - NgxMediaQueryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxMediaQueryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/media-query/media-query.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that can be used to track media queries and their changes.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                currentQueryMatch\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentQueryMatch$\n                            \n                            \n                                    Private\n                                listeners\n                            \n                            \n                                    Private\n                                    Readonly\n                                mediaQueries\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matchesQuery\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                registerQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:38\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        matchesQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    matchesQuery(id: string | string[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Check if the query matches with the current screen size\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the query we wish to match\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerQuery(value: NgxMediaQuery | NgxMediaQuery[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Registers one or multiple queries to listen to\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            NgxMediaQuery | NgxMediaQuery[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOne or multiple queries to register\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        currentQueryMatch\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tundefined\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:34\n                        \n                    \n\n            \n                \n                    The id of the current query match\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentQueryMatch$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentQueryMatch.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        listeners\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:28\n                        \n                    \n\n            \n                \n                    A record of all the registered listeners\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        mediaQueries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxMediaQuery[]\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxMediaQueriesToken, {\n\t\toptional: true,\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:21\n                        \n                    \n\n            \n                \n                    An optional list of default mediaQueries we want to register at start time\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:16\n                        \n                    \n\n            \n                \n                    An instance of the NgxWindowService\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { BehaviorSubject, distinctUntilChanged, filter, map, Observable, throwError } from 'rxjs';\n\nimport { NgxMediaQueriesToken } from '../../tokens';\nimport { NgxMediaQuery } from '../../types';\n\n/**\n * A service that can be used to track media queries and their changes.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxMediaQueryService implements OnDestroy {\n\t/**\n\t * An instance of the NgxWindowService\n\t */\n\tprivate readonly windowService: NgxWindowService = inject(NgxWindowService);\n\n\t/**\n\t * An optional list of default mediaQueries we want to register at start time\n\t */\n\tprivate readonly mediaQueries: NgxMediaQuery[] = inject(NgxMediaQueriesToken, {\n\t\toptional: true,\n\t});\n\n\t/**\n\t * A record of all the registered listeners\n\t */\n\tprivate listeners: Record =\n\t\t{};\n\n\t/**\n\t * The id of the current query match\n\t */\n\tprivate readonly currentQueryMatch: BehaviorSubject = new BehaviorSubject(\n\t\tundefined\n\t);\n\n\tpublic readonly currentQueryMatch$: Observable = this.currentQueryMatch.asObservable();\n\n\tconstructor() {\n\t\t// Iben: Register the optionally provided standard queries\n\t\tthis.registerQuery(this.mediaQueries || []);\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Remove all the listeners\n\t\tObject.values(this.listeners).forEach(({ listener, mediaQueryList }) => {\n\t\t\tmediaQueryList.removeEventListener('change', listener);\n\t\t});\n\t}\n\n\t/**\n\t * Registers one or multiple queries to listen to\n\t *\n\t * @param value - One or multiple queries to register\n\t */\n\tpublic registerQuery(value: NgxMediaQuery | NgxMediaQuery[]): void {\n\t\t// Iben: Only run when we're in the browser\n\t\tthis.windowService.runInBrowser(({ browserWindow }) => {\n\t\t\t// Iben: Loop over all the queries\n\t\t\t(Array.isArray(value) ? value : [value]).forEach((item) => {\n\t\t\t\tconst { id, query } = item;\n\n\t\t\t\t// Iben: Early exit if a query already exists\n\t\t\t\tif (this.listeners[id]) {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t'@ibenvandeveire/ngx-layout: NgxMediaQueryService: A query with this id already exists.'\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Match the query with the browser\n\t\t\t\tconst mediaQueryList = browserWindow.matchMedia(query);\n\n\t\t\t\t// Iben: Perform an initial check to see if the query matches\n\t\t\t\tif (mediaQueryList.matches) {\n\t\t\t\t\tthis.currentQueryMatch.next(id);\n\t\t\t\t}\n\n\t\t\t\t// Iben: Setup a listener to track the changes\n\t\t\t\tconst listener = (queryChangedEvent: MediaQueryListEvent) => {\n\t\t\t\t\tif (queryChangedEvent.matches) {\n\t\t\t\t\t\t// Iben: Emit the id of the query that has changed\n\t\t\t\t\t\tthis.currentQueryMatch.next(id);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Iben: Register the listener to the query\n\t\t\t\tmediaQueryList.addEventListener('change', listener);\n\n\t\t\t\t// Iben: Save the listener to remove it later\n\t\t\t\tthis.listeners[id] = {\n\t\t\t\t\tlistener,\n\t\t\t\t\tmediaQueryList,\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Check if the query matches with the current screen size\n\t *\n\t * @param id - The id of the query we wish to match\n\t */\n\tpublic matchesQuery(id: string | string[]): Observable {\n\t\tconst ids = Array.isArray(id) ? id : [id];\n\n\t\t// Iben: If the listener does not exist yet, throw an error\n\t\tif (ids.every((item) => !this.listeners[item])) {\n\t\t\treturn throwError(\n\t\t\t\t() =>\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t'@ibenvandeveire/ngx-layout: NgxMediaQueryService: No provided query matched with the provided ids.'\n\t\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// Iben: Create a matching set\n\t\tconst matchingSet = new Set(ids);\n\n\t\t// Iben: Return whether the current screen size matches the query\n\t\treturn this.currentQueryMatch.pipe(\n\t\t\tfilter(Boolean),\n\t\t\tdistinctUntilChanged(),\n\t\t\tmap((query) => matchingSet.has(query))\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxMediaQueryService-1.html":{"url":"injectables/NgxMediaQueryService-1.html","title":"injectable - NgxMediaQueryService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxMediaQueryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that can be used to track media queries and their changes. It exposes a method\nto register media queries, which takes an array of tuples with the id of the media query\nand the query itself. The service will then emit the id of the media query that has\nchanged when subscribed to the getMatchingQuery$ method.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                mediaQueryListenerMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                queryChangedSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                queryIdMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                queryListMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getMatchingQuery$\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                registerMediaQueries\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getMatchingQuery$\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMatchingQuery$(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Pass the id of the query whose changes need to be listened to.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the media query that should be checked.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits a boolean value whenever the requested media query changes.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:121\n                        \n                    \n\n\n            \n                \n                        Unregister all media query subscriptions from the service.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerMediaQueries\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerMediaQueries(...queries: [])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Register a list of media queries that need to be tracked by the service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                        []\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA list of media queries that should be registered with the service.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        mediaQueryListenerMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queryChangedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReplaySubject\n\n                    \n                \n                \n                    \n                        Default value : new ReplaySubject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:37\n                        \n                    \n\n            \n                \n                    A subject that emits the id of the media query that has changed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queryIdMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:23\n                        \n                    \n\n            \n                \n                    A map of the registered media queries with their id.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queryListMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:18\n                        \n                    \n\n            \n                \n                    A map of media queries that are registered with the service.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { filter, map, Observable, ReplaySubject } from 'rxjs';\n\n/**\n * A service that can be used to track media queries and their changes. It exposes a method\n * to register media queries, which takes an array of tuples with the id of the media query\n * and the query itself. The service will then emit the id of the media query that has\n * changed when subscribed to the `getMatchingQuery$` method.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxMediaQueryService implements OnDestroy {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A map of media queries that are registered with the service.\n\t */\n\tprivate readonly queryListMap: Map = new Map();\n\n\t/**\n\t * A map of the registered media queries with their id.\n\t */\n\tprivate readonly queryIdMap: Map = new Map();\n\n\t/*\n\t * A map of listeners that are registered with the service.\n\t * They are saved to be able to remove them when the service is destroyed.\n\t */\n\tprivate readonly mediaQueryListenerMap: Map void\n\t> = new Map();\n\n\t/**\n\t * A subject that emits the id of the media query that has changed.\n\t */\n\tprivate readonly queryChangedSubject: ReplaySubject = new ReplaySubject();\n\n\t/**\n\t * Register a list of media queries that need to be tracked by the service.\n\t *\n\t * @param queries - A list of media queries that should be registered with the service.\n\t */\n\tpublic registerMediaQueries(...queries: [id: string, query: string][]): void {\n\t\tthis.windowService.runInBrowser(({ browserWindow }) => {\n\t\t\tfor (const [id, query] of queries) {\n\t\t\t\t// Wouter: Warn if the id has already been registered.\n\t\t\t\tif (this.queryIdMap.get(id)) {\n\t\t\t\t\treturn console.warn(\n\t\t\t\t\t\t`NgxMediaQueryService: Media query with id '${id}' already exists and is defined by '${this.queryIdMap.get(\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t)}'`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Wouter: If the query has already been registered, throw an error to prevent duplicate subscriptions\n\t\t\t\tif ([...this.queryIdMap].some(([_, value]) => value === query)) {\n\t\t\t\t\tconst duplicateQuery = [...this.queryIdMap].find(\n\t\t\t\t\t\t([_, value]) => value === query\n\t\t\t\t\t);\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`NgxMediaQueryService: Query of ['${id}', ${query}] already exists and is defined by ['${duplicateQuery[0]}', ${duplicateQuery[1]}]`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Wouter: save the id and query\n\t\t\t\tthis.queryIdMap.set(id, query);\n\n\t\t\t\t// Wouter: For each query, create a MediaQueryList object\n\t\t\t\tconst matchedQuery = browserWindow.matchMedia(query);\n\n\t\t\t\t// Wouter: Save the query\n\t\t\t\tthis.queryListMap.set(id, matchedQuery);\n\n\t\t\t\t// Wouter: Emit the id of the query that has changed\n\t\t\t\tthis.queryChangedSubject.next(id);\n\n\t\t\t\t// Wouter: Create a listener for the query. This is done separately to be\n\t\t\t\t// able to remove the listener when the service is destroyed\n\t\t\t\tconst listener = (queryChangedEvent: MediaQueryListEvent) => {\n\t\t\t\t\tthis.queryListMap.set(id, queryChangedEvent.currentTarget as MediaQueryList);\n\n\t\t\t\t\t// Wouter: Emit the id of the query that has changed\n\t\t\t\t\tthis.queryChangedSubject.next(id);\n\t\t\t\t};\n\n\t\t\t\t// Wouter: Register the listener to the query\n\t\t\t\tmatchedQuery.addEventListener('change', listener);\n\n\t\t\t\t// Wouter: Save the listener\n\t\t\t\tthis.mediaQueryListenerMap.set(id, listener);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Pass the id of the query whose changes need to be listened to.\n\t *\n\t * @param id - The id of the media query that should be checked.\n\t * @returns An observable that emits a boolean value whenever the requested media query changes.\n\t */\n\tpublic getMatchingQuery$(id: string): Observable {\n\t\t// Wouter: Throw an error if the query has not been registered\n\t\tif (!this.queryIdMap.has(id)) {\n\t\t\tthrow new Error(\n\t\t\t\t`NgxMediaQueryService: No media query with id '${id}' has been registered. Please register the media query first using the 'registerMediaQueries' method.`\n\t\t\t);\n\t\t}\n\n\t\treturn this.queryChangedSubject.asObservable().pipe(\n\t\t\t// Wouter: Filter the query that has changed.\n\t\t\t// This will make sure only the [id] streams are triggered.\n\t\t\tfilter((queryId) => queryId === id),\n\t\t\tmap(() => this.queryListMap.get(id).matches)\n\t\t);\n\t}\n\n\t/**\n\t * Unregister all media query subscriptions from the service.\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.windowService.runInBrowser(() => {\n\t\t\t// Wouter: Remove all eventListeners\n\t\t\tfor (const [id, query] of this.queryListMap) {\n\t\t\t\tquery.removeEventListener('change', this.mediaQueryListenerMap.get(id));\n\t\t\t}\n\n\t\t\t// Wouter: Complete subscriptions\n\t\t\tthis.queryChangedSubject.next(null);\n\t\t\tthis.queryChangedSubject.complete();\n\n\t\t\t// Wouter: Clear maps\n\t\t\tthis.queryListMap.clear();\n\t\t\tthis.mediaQueryListenerMap.clear();\n\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxMobileLayout.html":{"url":"interfaces/NgxMobileLayout.html","title":"interface - NgxMobileLayout","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxMobileLayout\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/mobile-layout.types.ts\n        \n\n\n            \n                Description\n            \n            \n                A layout configuration for the NgxMobileLayoutService\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            aside\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            flyout\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            header\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            navigation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aside\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aside:         ComponentType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional aside we wish to render\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        flyout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flyout:         ComponentType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional flyout we wish to render\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footer:         ComponentType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The footer we wish to render\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        header\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        header:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The header we wish to render\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        navigation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        navigation:         ComponentType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional navigation we wish to render\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nexport type ComponentType = Type | null;\n\n/**\n * A layout configuration for the `NgxMobileLayoutService`\n */\nexport interface NgxMobileLayout {\n\t/**\n\t * The header we wish to render\n\t */\n\theader?: {\n\t\t/**\n\t\t * The center part of the header we wish to render\n\t\t */\n\t\tmain?: ComponentType;\n\t\t/**\n\t\t * The left part of the header we wish to render\n\t\t */\n\t\tleft?: ComponentType;\n\t\t/**\n\t\t * The right part of the header we wish to render\n\t\t */\n\t\tright?: ComponentType;\n\t};\n\t/**\n\t * An optional flyout we wish to render\n\t */\n\tflyout?: ComponentType;\n\t/**\n\t * An optional aside we wish to render\n\t */\n\taside?: ComponentType;\n\t/**\n\t * An optional navigation we wish to render\n\t */\n\tnavigation?: ComponentType;\n\t/**\n\t * The footer we wish to render\n\t */\n\tfooter?: ComponentType;\n}\n\n/**\n * All possible elements of the mobile layout\n */\nexport type NgxMobileLayoutElements =\n\t| keyof Omit\n\t| `header.${keyof NgxMobileLayout['header']}`;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxMobileLayoutComponent.html":{"url":"components/NgxMobileLayoutComponent.html","title":"component - NgxMobileLayoutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxMobileLayoutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts\n\n\n\n    \n        Description\n    \n    \n        A component used to render a mobile-first layout\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-mobile-layout\n            \n\n\n            \n                imports\n                \n                            NgComponentOutlet\n                            NgTemplateOutlet\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./mobile-layout.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                asideShown\n                            \n                            \n                                    Public\n                                    Readonly\n                                contentTemplate\n                            \n                            \n                                    Protected\n                                    Readonly\n                                flyoutShown\n                            \n                            \n                                    Protected\n                                layout\n                            \n                            \n                                    Protected\n                                    Readonly\n                                layoutService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        asideShown\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.layoutService.asideShown\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:36\n                        \n                    \n\n            \n                \n                    Whether the aside needs to be shown\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        contentTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChild>('contentTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:41\n                        \n                    \n\n            \n                \n                    An optional template we can pass to replace the default routerOutlet\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        flyoutShown\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.layoutService.flyoutShown\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:31\n                        \n                    \n\n            \n                \n                    Whether the flyout needs to be shown\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        layout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : toSignal(this.layoutService.layout$)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:26\n                        \n                    \n\n            \n                \n                    The currently displayed layout\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        layoutService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxMobileLayoutService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxMobileLayoutService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:21\n                        \n                    \n\n            \n                \n                    The instance of the NgxMobileLayoutService\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgComponentOutlet, NgTemplateOutlet } from '@angular/common';\nimport { Component, contentChild, inject, OnInit, Signal, TemplateRef } from '@angular/core';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { RouterModule } from '@angular/router';\n\nimport { NgxMobileLayoutService } from '../../services';\nimport { NgxMobileLayout } from '../../types';\n\n/**\n * A component used to render a mobile-first layout\n */\n@Component({\n\tselector: 'ngx-mobile-layout',\n\timports: [NgComponentOutlet, NgTemplateOutlet, RouterModule],\n\ttemplateUrl: './mobile-layout.component.html',\n})\nexport class NgxMobileLayoutComponent implements OnInit {\n\t/**\n\t * The instance of the NgxMobileLayoutService\n\t */\n\tprotected readonly layoutService: NgxMobileLayoutService = inject(NgxMobileLayoutService);\n\n\t/**\n\t * The currently displayed layout\n\t */\n\tprotected layout: Signal = toSignal(this.layoutService.layout$);\n\n\t/**\n\t * Whether the flyout needs to be shown\n\t */\n\tprotected readonly flyoutShown: Signal = this.layoutService.flyoutShown;\n\n\t/**\n\t * Whether the aside needs to be shown\n\t */\n\tprotected readonly asideShown: Signal = this.layoutService.asideShown;\n\n\t/**\n\t * An optional template we can pass to replace the default routerOutlet\n\t */\n\tpublic readonly contentTemplate = contentChild>('contentTmpl');\n\n\tngOnInit(): void {\n\t\t// Iben: Sets up the initial layout if one was provided\n\t\tthis.layoutService.setUpInitialLayout();\n\t}\n}\n\n    \n\n    \n        @if(layout()) {\n\n\t@if(layout().header) {\n\t\n\t\t@if(layout().header.left) {\n\t\t\n\t\t}\n\t\t\n\n\t\t@if(layout().header.right) {\n\t\t\n\t\t}\n\t\n\t} @if(layout().navigation) {\n\t\n\t\t\n\t\n\t} @if(layout().aside && asideShown()) {\n\t\n\t\t\n\t\n\t}\n\n\t\n\t\t@if(contentTemplate()) {\n\t\t\n\t\t} @else {\n\t\t\n\t\t}\n\t\n\n\t@if(layout().flyout && flyoutShown()) {\n\t\n\t\t\n\t\n\t} @if(layout().footer) {\n\t\n\t\t\n\t\n\t}\n\n}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if(layout()) {\t@if(layout().header) {\t\t\t@if(layout().header.left) {\t\t\t\t}\t\t\t\t@if(layout().header.right) {\t\t\t\t}\t\t} @if(layout().navigation) {\t\t\t\t\t} @if(layout().aside && asideShown()) {\t\t\t\t\t}\t\t\t@if(contentTemplate()) {\t\t\t\t} @else {\t\t\t\t}\t\t@if(layout().flyout && flyoutShown()) {\t\t\t\t\t} @if(layout().footer) {\t\t\t\t\t}}'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxMobileLayoutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxMobileLayoutService.html":{"url":"injectables/NgxMobileLayoutService.html","title":"injectable - NgxMobileLayoutService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxMobileLayoutService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The NgxMobileLayoutService allows us to configure an entire layout based on routing rather than on HTML. This allows for an easier use for mobile-first applications.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                asideShown\n                            \n                            \n                                    Protected\n                                    Readonly\n                                defaultLayout\n                            \n                            \n                                    Public\n                                flyoutShown\n                            \n                            \n                                    Protected\n                                    Readonly\n                                initialLayoutSet$\n                            \n                            \n                                    Protected\n                                    Readonly\n                                initialLayoutSetSubject$\n                            \n                            \n                                    Public\n                                    Readonly\n                                layout$\n                            \n                            \n                                    Protected\n                                    Readonly\n                                layoutSubject$\n                            \n                            \n                                    Protected\n                                showAside\n                            \n                            \n                                    Protected\n                                showFlyout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closeAside\n                            \n                            \n                                    Public\n                                closeFlyout\n                            \n                            \n                                    Private\n                                getComponent\n                            \n                            \n                                    Public\n                                hasElement\n                            \n                            \n                                    Public\n                                openAside\n                            \n                            \n                                    Public\n                                openFlyout\n                            \n                            \n                                    Public\n                                setLayout\n                            \n                            \n                                    Public\n                                setUpInitialLayout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        closeAside\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeAside()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:158\n                        \n                    \n\n\n            \n                \n                        Close the currently open aside\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        closeFlyout\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeFlyout()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:143\n                        \n                    \n\n\n            \n                \n                        Close the currently open flyout\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getComponent\n                        \n                    \n                \n            \n            \n                \n                        \n                    getComponent(component: ComponentType, fallback: ComponentType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:194\n                        \n                    \n\n\n            \n                \n                        Returns either the component or the fallback we wish to render\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                component\n                                            \n                                                            ComponentType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component\n\n\n                                            \n                                        \n                                        \n                                                fallback\n                                            \n                                                            ComponentType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe fallback\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ComponentType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasElement(element: NgxMobileLayoutElements)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Returns whether an element is defined in the layout\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                            NgxMobileLayoutElements\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we wish to check\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        openAside\n                        \n                    \n                \n            \n            \n                \n                        \n                    openAside()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:151\n                        \n                    \n\n\n            \n                \n                        Open a aside\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        openFlyout\n                        \n                    \n                \n            \n            \n                \n                        \n                    openFlyout(flyout?: ComponentType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Open a flyout\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                flyout\n                                            \n                                                            ComponentType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional flyout\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setLayout\n                        \n                    \n                \n            \n            \n                \n                        \n                    setLayout(layout: NgxMobileLayout)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Sets the provided layout for the\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                layout\n                                            \n                                                            NgxMobileLayout\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe layout we wish to set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setUpInitialLayout\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUpInitialLayout(markAsInitial: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:165\n                        \n                    \n\n\n            \n                \n                        Provides an initial layout if one was provided\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                markAsInitial\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        asideShown\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.showAside.asReadonly()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:65\n                        \n                    \n\n            \n                \n                    Whether the aside is visible\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        defaultLayout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxMobileLayout | undefined\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxMobileLayoutConfigurationToken,\n\t\t{ optional: true }\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:31\n                        \n                    \n\n            \n                \n                    An optional default layout that was provided\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        flyoutShown\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.showFlyout.asReadonly()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:60\n                        \n                    \n\n            \n                \n                    Whether the flyout is visible\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        initialLayoutSet$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.initialLayoutSetSubject$\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:26\n                        \n                    \n\n            \n                \n                    Whether the initial layout has been set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        initialLayoutSetSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tfalse\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:19\n                        \n                    \n\n            \n                \n                    A subject holding whether the initial layout has been set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layout$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.layoutSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:55\n                        \n                    \n\n            \n                \n                    The current layout of the application as an Observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        layoutSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(undefined)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:39\n                        \n                    \n\n            \n                \n                    A subject holding the current layout of the application\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        showAside\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:50\n                        \n                    \n\n            \n                \n                    Whether the aside should be shown\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        showFlyout\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:45\n                        \n                    \n\n            \n                \n                    Whether the flyout should be shown\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable, signal, Signal, WritableSignal } from '@angular/core';\nimport { get } from 'lodash';\nimport clean from 'obj-clean';\nimport { BehaviorSubject, distinctUntilChanged, filter, map, Observable, take, tap } from 'rxjs';\n\nimport { NgxMobileLayoutConfigurationToken } from '../../tokens';\nimport { ComponentType, NgxMobileLayout, NgxMobileLayoutElements } from '../../types';\n\n/**\n * The `NgxMobileLayoutService` allows us to configure an entire layout based on routing rather than on HTML. This allows for an easier use for mobile-first applications.\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxMobileLayoutService {\n\t/**\n\t * A subject holding whether the initial layout has been set\n\t */\n\tprotected readonly initialLayoutSetSubject$: BehaviorSubject = new BehaviorSubject(\n\t\tfalse\n\t);\n\n\t/**\n\t * Whether the initial layout has been set\n\t */\n\tprotected readonly initialLayoutSet$: Observable = this.initialLayoutSetSubject$;\n\n\t/**\n\t * An optional default layout that was provided\n\t */\n\tprotected readonly defaultLayout: NgxMobileLayout | undefined = inject(\n\t\tNgxMobileLayoutConfigurationToken,\n\t\t{ optional: true }\n\t);\n\n\t/**\n\t * A subject holding the current layout of the application\n\t */\n\tprotected readonly layoutSubject$: BehaviorSubject =\n\t\tnew BehaviorSubject(undefined);\n\n\t/**\n\t * Whether the flyout should be shown\n\t */\n\tprotected showFlyout: WritableSignal = signal(false);\n\n\t/**\n\t * Whether the aside should be shown\n\t */\n\tprotected showAside: WritableSignal = signal(false);\n\n\t/**\n\t * The current layout of the application as an Observable\n\t */\n\tpublic readonly layout$: Observable = this.layoutSubject$.asObservable();\n\n\t/**\n\t * Whether the flyout is visible\n\t */\n\tpublic flyoutShown: Signal = this.showFlyout.asReadonly();\n\n\t/**\n\t * Whether the aside is visible\n\t */\n\tpublic asideShown: Signal = this.showAside.asReadonly();\n\n\t/**\n\t * Sets the provided layout for the\n\t *\n\t * @param layout - The layout we wish to set\n\t */\n\tpublic setLayout(layout: NgxMobileLayout): Observable {\n\t\t// Iben: To prevent timing issues, we wait until the initial layout has been set\n\t\treturn this.initialLayoutSet$.pipe(\n\t\t\tfilter(Boolean),\n\t\t\ttake(1),\n\t\t\ttap(() => {\n\t\t\t\t// Iben: If no default layout is provided, we set the layout as is\n\t\t\t\tif (!this.defaultLayout && layout) {\n\t\t\t\t\tthis.layoutSubject$.next(clean(layout) as NgxMobileLayout);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: If layout is provided, we set the default layout\n\t\t\t\tif (!layout && this.defaultLayout) {\n\t\t\t\t\tthis.layoutSubject$.next(clean(this.defaultLayout) as NgxMobileLayout);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: If a default layout is provided, we want to only replace the layout elements that weren't part of the original default\n\t\t\t\tthis.layoutSubject$.next(\n\t\t\t\t\tclean({\n\t\t\t\t\t\theader: {\n\t\t\t\t\t\t\tleft: this.getComponent(\n\t\t\t\t\t\t\t\tlayout.header?.left,\n\t\t\t\t\t\t\t\tthis.defaultLayout.header?.left\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tmain: this.getComponent(\n\t\t\t\t\t\t\t\tlayout.header?.main,\n\t\t\t\t\t\t\t\tthis.defaultLayout.header?.main\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tright: this.getComponent(\n\t\t\t\t\t\t\t\tlayout.header?.right,\n\t\t\t\t\t\t\t\tthis.defaultLayout.header?.right\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnavigation: this.getComponent(\n\t\t\t\t\t\t\tlayout.navigation,\n\t\t\t\t\t\t\tthis.defaultLayout.navigation\n\t\t\t\t\t\t),\n\t\t\t\t\t\tflyout: this.getComponent(layout.footer, this.defaultLayout.flyout),\n\t\t\t\t\t\taside: this.getComponent(layout.aside, this.defaultLayout.aside),\n\t\t\t\t\t\tfooter: this.getComponent(layout.footer, this.defaultLayout.footer),\n\t\t\t\t\t}) as NgxMobileLayout\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Open a flyout\n\t *\n\t * @param flyout - An optional flyout\n\t */\n\tpublic openFlyout(flyout?: ComponentType): void {\n\t\t// Iben: Add the flyout if there wasn't one defined\n\t\tif (flyout) {\n\t\t\tthis.layoutSubject$.next({\n\t\t\t\t...this.layoutSubject$.getValue(),\n\t\t\t\tflyout,\n\t\t\t});\n\n\t\t\t// Iben: Make the flyout visible\n\t\t\tthis.showFlyout.set(true);\n\t\t}\n\t}\n\n\t/**\n\t * Close the currently open flyout\n\t */\n\tpublic closeFlyout(): void {\n\t\t// Iben: Make the flyout invisible\n\t\tthis.showFlyout.set(false);\n\t}\n\n\t/**\n\t * Open a aside\n\t */\n\tpublic openAside(): void {\n\t\tthis.showAside.set(true);\n\t}\n\n\t/**\n\t * Close the currently open aside\n\t */\n\tpublic closeAside(): void {\n\t\tthis.showAside.set(false);\n\t}\n\n\t/**\n\t * Provides an initial layout if one was provided\n\t */\n\tpublic setUpInitialLayout(markAsInitial: boolean = true): void {\n\t\t// Iben: Set initial layout\n\t\tthis.layoutSubject$.next(clean(this.defaultLayout) as NgxMobileLayout);\n\n\t\t// Iben: Mark the initial layout set as true\n\t\tif (markAsInitial) {\n\t\t\tthis.initialLayoutSetSubject$.next(true);\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether an element is defined in the layout\n\t *\n\t * @param element - The element we wish to check\n\t */\n\tpublic hasElement(element: NgxMobileLayoutElements): Observable {\n\t\treturn this.layout$.pipe(\n\t\t\tfilter(Boolean),\n\t\t\tdistinctUntilChanged(),\n\t\t\tmap((layout) => Boolean(get(layout, element)))\n\t\t);\n\t}\n\n\t/**\n\t * Returns either the component or the fallback we wish to render\n\t *\n\t * @param component - The component\n\t * @param fallback - The fallback\n\t */\n\tprivate getComponent(component: ComponentType, fallback: ComponentType): ComponentType {\n\t\t// Iben: If the component was explicitly set to `null`, we know we need to remove the current component and not fall back to the fallback\n\t\tif (component === null) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Either return the component, or the fallback\n\t\treturn component || fallback;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxModalAbstractComponent.html":{"url":"directives/NgxModalAbstractComponent.html","title":"directive - NgxModalAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxModalAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract for the NgxModalService\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                            \n                                    Public\n                                    Readonly\n                                ariaDescribedBy\n                            \n                            \n                                    Public\n                                    Readonly\n                                ariaLabelledBy\n                            \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    \n                                    Public\n                                onEscape\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ariaDescribedBy\n                            \n                            \n                                ariaLabelledBy\n                            \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:keydown.escape\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ariaDescribedBy\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:40\n                            \n                        \n                \n                    \n                        An optional aria-describedBy property\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ariaLabelledBy\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:35\n                            \n                        \n                \n                    \n                        An optional aria-labelledby property\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:45\n                            \n                        \n                \n                    \n                        Optional data that can be passed to the modal\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            document:keydown.escape\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:28\n                \n            \n\n\n            \n                \n                    Remove the modal on escape pressed\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:28\n                        \n                    \n\n\n            \n                \n                        Remove the modal on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:50\n                        \n                    \n\n            \n                \n                    An emitter that will emit an action we can later respond to\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ariaDescribedBy\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:40\n                        \n                    \n\n            \n                \n                    An optional aria-describedBy property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ariaLabelledBy\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:35\n                        \n                    \n\n            \n                \n                    An optional aria-labelledby property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        close\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:56\n                        \n                    \n\n            \n                \n                    An emitter that will emit if the modal is closed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:45\n                        \n                    \n\n            \n                \n                    Optional data that can be passed to the modal\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tAfterViewInit,\n\tDirective,\n\tElementRef,\n\tHostListener,\n\tOutputEmitterRef,\n\tinject,\n\tinput,\n\toutput,\n} from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nimport { NgxModalActionType } from '../../types';\n\n/**\n * An abstract for the NgxModalService\n */\n@Directive()\nexport class NgxModalAbstractComponent\n\timplements AfterViewInit\n{\n\tprivate readonly windowService = inject(NgxWindowService);\n\tprivate readonly elementRef = inject>(ElementRef);\n\n\t/**\n\t * Remove the modal on escape pressed\n\t */\n\t@HostListener('document:keydown.escape') public onEscape() {\n\t\tthis.close.emit();\n\t}\n\n\t/**\n\t * An optional aria-labelledby property\n\t */\n\tpublic readonly ariaLabelledBy = input();\n\n\t/**\n\t * An optional aria-describedBy property\n\t */\n\tpublic readonly ariaDescribedBy = input();\n\n\t/**\n\t * Optional data that can be passed to the modal\n\t */\n\tpublic readonly data = input();\n\n\t/**\n\t * An emitter that will emit an action we can later respond to\n\t */\n\tpublic action: OutputEmitterRef = output();\n\n\t/**\n\t * An emitter that will emit if the modal is closed\n\t */\n\t// eslint-disable-next-line @angular-eslint/no-output-native\n\tpublic close: OutputEmitterRef = output();\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: If we are in the browser, check if either of the two accessibility labels are set\n\t\tconst ariaLabelledBy = this.ariaLabelledBy();\n\t\tconst ariaDescribedBy = this.ariaDescribedBy();\n\t\tif (this.windowService.isBrowser() && (ariaLabelledBy || ariaDescribedBy)) {\n\t\t\t// Iben: Find the element with the id and the parent\n\t\t\tconst element = document.getElementById(ariaLabelledBy || ariaDescribedBy);\n\t\t\tconst parent = this.elementRef.nativeElement;\n\n\t\t\t// Iben: If no corresponding element was found or if it isn't part of the modal, throw an error\n\t\t\tif (!element || !parent.contains(element)) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`@ibenvandeveire/ngx-inform - NgxModalAbstractComponent: The ${\n\t\t\t\t\t\tariaLabelledBy ? '\"aria-labelledBy\"' : 'aria-describedBy'\n\t\t\t\t\t} property was passed to the modal but no element with said id was found. Because of that, the necessary accessibility attributes could not be set. Please add an id with the value \"${\n\t\t\t\t\t\tariaLabelledBy || ariaDescribedBy\n\t\t\t\t\t}\" to an element of the modal.`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalAriaLabelBaseOptions.html":{"url":"interfaces/NgxModalAriaLabelBaseOptions.html","title":"interface - NgxModalAriaLabelBaseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalAriaLabelBaseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            labelledById\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The label passed to the modal.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelledById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelledById:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The ID of the element that labels the modal.\nFrom the Mozilla docs:\nIt should reference brief text that provides the element with an accessible name.\n[...] a label describes the essence of an object.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalAriaLabelOptions.html":{"url":"interfaces/NgxModalAriaLabelOptions.html","title":"interface - NgxModalAriaLabelOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalAriaLabelOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalAriaLabelBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            labelledById\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelledById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelledById:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalAriaLabelledOptions.html":{"url":"interfaces/NgxModalAriaLabelledOptions.html","title":"interface - NgxModalAriaLabelledOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalAriaLabelledOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalAriaLabelBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            labelledById\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelledById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelledById:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalBaseConfiguration.html":{"url":"interfaces/NgxModalBaseConfiguration.html","title":"interface - NgxModalBaseConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalBaseConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            modals\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        modals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        modals:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The global modals that were configured in the root of the application.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalBaseOptions.html":{"url":"interfaces/NgxModalBaseOptions.html","title":"interface - NgxModalBaseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalBaseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            describedById\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onClose\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The component that should be rendered as the modal. This component must extend the\nNgxModalAbstractComponent.\nThis property will take precedence over the type property.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data that will be passed to the modal. This data will be accessible in the\nprovided component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        describedById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        describedById:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The ID of the element that describes the dialog.\nFrom the Mozilla docs:\n[...] [it] lists the ids of the descriptions or elements providing more information\nthat the user might need.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onClose\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onClose:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The method that should be called when the modal is closed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The name of a config object defined in the global config at the root of\nthe project.\nIf a component value is provided alongside a type in the local config, the\ncomponent value will take precedence.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalCDKModalConfiguration.html":{"url":"interfaces/NgxModalCDKModalConfiguration.html","title":"interface - NgxModalCDKModalConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalCDKModalConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoFocus\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            injector\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            restoreFocus\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            viewContainerRef\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoFocus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoFocus:     AutoFocusTarget | string | boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AutoFocusTarget | string | boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Where (or whether) the dialog should focus after it is opened.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        injector\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        injector:     Injector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Injector\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                     The Injector used for the instantiation of the component to be attached.\nIf provided, takes precedence over the injector indirectly provided by\nthe ViewContainerRef. This will allow for host-service injection to\nthe component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        restoreFocus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        restoreFocus:     boolean | string | HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | string | HTMLElement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the dialog should restore focus to the previously-focused element\nupon closing.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewContainerRef\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewContainerRef:     ViewContainerRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ViewContainerRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Where the attached component should live in Angular's logical component tree.\nThis affects what is available for injection and the change detection order\nfor the component instantiated inside of the dialog. This does not affect\nwhere the dialog content will be rendered in the DOM.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalComponentConfiguration.html":{"url":"interfaces/NgxModalComponentConfiguration.html","title":"interface - NgxModalComponentConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalComponentConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The component that should be rendered as the modal. This component must extend the\nNgxModalAbstractComponent.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data that will be passed to the modal. This data will be accessible in the\nprovided component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         NgxModalRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxModalRole\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The role that should be applied to the modal.\nIf the role is set to alertdialog, the modal indicates an alert or a message that\nrequires user interaction (e.g. a dismiss / proceed dialog).\nIf the role is set to dialog, the modal indicates a dialog that requires user\nattention, but no interaction. (e.g. an advertisement).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalComponentOptions.html":{"url":"interfaces/NgxModalComponentOptions.html","title":"interface - NgxModalComponentOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalComponentOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         NgxModalRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxModalRole\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The role that should be applied to the modal.\nIf the role is set to alertdialog, the modal indicates an alert or a message that\nrequires user interaction (e.g. a dismiss / proceed dialog).\nIf the role is set to dialog, the modal indicates a dialog that requires user\nattention, but no interaction. (e.g. an advertisement).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalGlobalCDKConfiguration.html":{"url":"interfaces/NgxModalGlobalCDKConfiguration.html","title":"interface - NgxModalGlobalCDKConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalGlobalCDKConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoClose\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            closeOnNavigation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            direction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hasBackdrop\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            panelClass\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoClose\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoClose:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the modal should close when an event is fired.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        closeOnNavigation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        closeOnNavigation:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the modal should close on navigation.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        direction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        direction:     Direction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Direction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The direction of the modal.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hasBackdrop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hasBackdrop:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the modal has a backdrop.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        panelClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        panelClass:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The class that should be applied to the modal.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxModalService.html":{"url":"injectables/NgxModalService.html","title":"injectable - NgxModalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxModalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/services/modal/modal.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A wrapper service to Angular CDK Dialog that provides a WCAG/ARIA compliant implementation of modals\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Private\n                                    Readonly\n                                dialogService\n                            \n                            \n                                    Public\n                                    Readonly\n                                hasActiveModal$\n                            \n                            \n                                    Private\n                                hasModalSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Private\n                                createModalComponent\n                            \n                            \n                                    Private\n                                getValue\n                            \n                            \n                                    Private\n                                hasRequiredDescription\n                            \n                            \n                                    Public\n                                open\n                            \n                            \n                                    Private\n                                runARIAChecks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        close\n                        \n                    \n                \n            \n            \n                \n                        \n                    close(onClose?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Closes the currently active modal\n\n@param onClose - An optional onClose function\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                onClose\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional onClose function\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createModalComponent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createModalComponent(options: NgxModalOptions, component: Type>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:177\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Creates the modal component\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe options of the modal\n\n\n                                            \n                                        \n                                        \n                                                component\n                                            \n                                                            Type>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component we wish to render\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxModalAbstractComponent\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    getValue(configurationValue: any, optionsValue: any, defaultValue: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:244\n                        \n                    \n\n\n            \n                \n                        Returns a value based on whether one of the overwrites is defined\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                configurationValue\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe overwrite on configuration level\n\n\n                                            \n                                        \n                                        \n                                                optionsValue\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe overwrite on options level\n\n\n                                            \n                                        \n                                        \n                                                defaultValue\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe default value if no overwrite was defined\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasRequiredDescription\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasRequiredDescription(options: NgxModalOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:222\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                            \n                        \n                    \n\n            \n                \n                        Checks if the description is provided when the role requires it\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe options of the modal\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        open\n                        \n                    \n                \n            \n            \n                \n                        \n                    open(options: NgxModalOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:49\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Opens a modal based on the provided options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe modal options\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        runARIAChecks\n                        \n                    \n                \n            \n            \n                \n                        \n                    runARIAChecks(options: NgxModalOptions, component: Type>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:146\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                            \n                        \n                    \n\n            \n                \n                        Checks if all the necessary preconditions are met\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe options of the modal\n\n\n                                            \n                                        \n                                        \n                                                component\n                                            \n                                                            Type>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component we wish to render\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxModalConfigurationToken, {\n\t\toptional: true,\n\t})!\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dialogService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Dialog)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        hasActiveModal$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.hasModalSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:42\n                        \n                    \n\n            \n                \n                    An observable that keeps track of whether a modal is currently active.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasModalSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:37\n                        \n                    \n\n            \n                \n                    A subject that keeps track of whether a modal is currently active\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Dialog } from '@angular/cdk/dialog';\nimport { Injectable, Type, inject } from '@angular/core';\nimport { outputToObservable } from '@angular/core/rxjs-interop';\nimport {\n\tBehaviorSubject,\n\tcombineLatest,\n\tfilter,\n\tmap,\n\tNEVER,\n\tObservable,\n\tstartWith,\n\ttakeUntil,\n\ttap,\n} from 'rxjs';\n\nimport { NgxModalAbstractComponent } from '../../abstracts';\nimport { NgxModalConfigurationToken } from '../../tokens';\nimport { NgxModalActionType, NgxModalConfiguration, NgxModalOptions } from '../../types';\n\n/**\n * A wrapper service to Angular CDK Dialog that provides a WCAG/ARIA compliant implementation of modals\n *\n * @export\n * @class NgxModalService\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxModalService {\n\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\tprivate readonly configuration = inject(NgxModalConfigurationToken, {\n\t\toptional: true,\n\t})!;\n\tprivate readonly dialogService = inject(Dialog);\n\n\t/**\n\t * A subject that keeps track of whether a modal is currently active\n\t */\n\tprivate hasModalSubject: BehaviorSubject = new BehaviorSubject(false);\n\n\t/**\n\t * An observable that keeps track of whether a modal is currently active.\n\t */\n\tpublic readonly hasActiveModal$: Observable = this.hasModalSubject.asObservable();\n\n\t/**\n\t * Opens a modal based on the provided options\n\t *\n\t * @param {NgxModalOptions} options - The modal options\n\t */\n\tpublic open(\n\t\toptions: NgxModalOptions\n\t): Observable {\n\t\t// Iben: If a previous modal is still active, we early exit.\n\t\tif (this.hasModalSubject.value) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxInform: An active modal is currently displayed, close the active modal before opening a new one'\n\t\t\t);\n\n\t\t\treturn NEVER;\n\t\t}\n\n\t\t// Iben: Declare the modal as active\n\t\tthis.hasModalSubject.next(true);\n\n\t\t// Iben: Fetch the type of component we wish to show\n\t\tconst configuration = this.configuration?.modals?.[options.type];\n\t\tconst component: Type> =\n\t\t\toptions.component ||\n\t\t\t(configuration.component as Type>);\n\n\t\t// Iben: Check if all the correct parameters are set and return NEVER when they're not correctly set\n\t\tif (!this.runARIAChecks(options, component)) {\n\t\t\treturn NEVER;\n\t\t}\n\n\t\t// Iben: Render the modal\n\t\tconst modal = this.createModalComponent(options, component);\n\n\t\t// Iben: Return the modal action\n\t\treturn combineLatest([\n\t\t\t// Iben: Set the start value to undefined so both actions at least emit once\n\t\t\toutputToObservable(modal.action).pipe(startWith(undefined)),\n\t\t\toutputToObservable(modal.close).pipe(\n\t\t\t\t// Iben: Map so we can keep the emit value void, but can work with the filter later down the line\n\t\t\t\tmap(() => 'NgxModalClose'),\n\t\t\t\t// Iben: Set the start value to undefined so both actions at least emit once\n\t\t\t\tstartWith(undefined)\n\t\t\t),\n\t\t]).pipe(\n\t\t\t// Iben: Only emit if one of the two actions actually has an emit\n\t\t\tfilter(([action, closed]: [ActionType, 'NgxModalClose']) => {\n\t\t\t\treturn Boolean(action) || Boolean(closed);\n\t\t\t}),\n\t\t\tmap(([action, closed]: [ActionType, 'NgxModalClose']) => {\n\t\t\t\treturn closed || action;\n\t\t\t}),\n\t\t\ttap((action: ActionType | 'NgxModalClose') => {\n\t\t\t\t// Iben: If the autoClose is specifically set to false, we early exit unless we're running in a close event\n\t\t\t\tif (\n\t\t\t\t\taction !== 'NgxModalClose' &&\n\t\t\t\t\t((options.autoClose !== undefined && options.autoClose === false) ||\n\t\t\t\t\t\t(configuration?.autoClose !== undefined &&\n\t\t\t\t\t\t\tconfiguration.autoClose === false))\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Close the modal\n\t\t\t\tthis.close(options.onClose);\n\t\t\t}),\n\t\t\t// Iben: Map the action back to the ActionType\n\t\t\tmap((action: ActionType | 'NgxModalClose') => {\n\t\t\t\treturn action === 'NgxModalClose' ? undefined : (action as ActionType);\n\t\t\t}),\n\t\t\t// Wouter: Unsubscribe wen no modal is open\n\t\t\ttakeUntil(this.hasModalSubject.pipe(filter((hasModal) => !hasModal)))\n\t\t);\n\t}\n\n\t/**\n\t * Closes the currently active modal\n\t *\n\t * * @param onClose - An optional onClose function\n\t */\n\tpublic close(onClose?: () => void): void {\n\t\t// Wouter: The setTimeout delay is needed, so that the `open` method can emit before its subscription end gets triggered\n\t\tsetTimeout(() => {\n\t\t\t// Iben: Close the modal\n\t\t\tthis.dialogService.closeAll();\n\n\t\t\t// Iben: Mark the modal as closed\n\t\t\tthis.hasModalSubject.next(false);\n\n\t\t\t// Iben: Run an optional onClose function\n\t\t\tif (onClose) {\n\t\t\t\tonClose();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Checks if all the necessary preconditions are met\n\t *\n\t * @param options - The options of the modal\n\t * @param  component - The component we wish to render\n\t */\n\tprivate runARIAChecks(\n\t\toptions: NgxModalOptions,\n\t\tcomponent: Type>\n\t): boolean {\n\t\t// Iben: If no component was found, we return NEVER and throw an error\n\t\tif (!component) {\n\t\t\tconsole.error(\n\t\t\t\t'@ibenvandeveire/ngx-inform - NgxModalService: No component was provided or found in the configuration to render.'\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Iben: If no description was provided when required, we return NEVER and throw an error\n\t\tif (!this.hasRequiredDescription(options)) {\n\t\t\tconsole.error(\n\t\t\t\t'@ibenvandeveire/ngx-inform - NgxModalService: The role of the modal was set to \"alertdialog\" but no \"describedById\" was provided.'\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Creates the modal component\n\t *\n\t * @param options - The options of the modal\n\t * @param  component - The component we wish to render\n\t */\n\tprivate createModalComponent(\n\t\toptions: NgxModalOptions,\n\t\tcomponent: Type>\n\t): NgxModalAbstractComponent {\n\t\tconst configuration = this.configuration?.modals?.[options.type];\n\n\t\t// Iben: Create the modal and render it\n\t\tconst dialogRef = this.dialogService.open(component, {\n\t\t\trole: configuration?.role || options.role,\n\t\t\tariaLabel: options.label,\n\t\t\tariaLabelledBy: options.labelledById,\n\t\t\tariaDescribedBy: options.describedById,\n\t\t\tdisableClose: true,\n\t\t\trestoreFocus: this.getValue(undefined, options.restoreFocus, true),\n\t\t\tautoFocus: this.getValue(undefined, options.autoFocus, true),\n\t\t\tviewContainerRef: options.viewContainerRef,\n\t\t\tdirection: configuration?.direction || options.direction,\n\t\t\thasBackdrop: this.getValue(configuration?.hasBackdrop, options.hasBackdrop, true),\n\t\t\tpanelClass: this.getValue(configuration?.panelClass, options.panelClass, []),\n\t\t\tcloseOnNavigation: this.getValue(\n\t\t\t\tconfiguration?.closeOnNavigation,\n\t\t\t\toptions.closeOnNavigation,\n\t\t\t\ttrue\n\t\t\t),\n\t\t\tcloseOnDestroy: true,\n\t\t\tcloseOnOverlayDetachments: true,\n\t\t});\n\t\tconst modal = dialogRef.componentInstance;\n\n\t\t// Iben: Set the data of the modal\n\t\tdialogRef.componentRef.setInput(\n\t\t\t'data',\n\t\t\tthis.getValue(configuration?.data, options.data, undefined)\n\t\t);\n\t\tdialogRef.componentRef.setInput('ariaDescribedBy', options.describedById);\n\t\tdialogRef.componentRef.setInput('ariaLabelledBy', options.labelledById);\n\n\t\treturn modal;\n\t}\n\n\t/**\n\t * Checks if the description is provided when the role requires it\n\t *\n\t * @param options - The options of the modal\n\t */\n\tprivate hasRequiredDescription(\n\t\toptions: NgxModalOptions\n\t): boolean {\n\t\t// Iben: If the options has provided a default type, we check based on the configuration role\n\t\tif (options.type) {\n\t\t\tconst configuration = this.configuration?.modals[options.type];\n\n\t\t\treturn !(configuration.role === 'alertdialog' && !options.describedById);\n\t\t}\n\n\t\t//  Iben: Check based on the options role\n\t\treturn !(options.role === 'alertdialog' && !options.describedById);\n\t}\n\n\t/**\n\t * Returns a value based on whether one of the overwrites is defined\n\t *\n\t * @private\n\t * @param configurationValue - The overwrite on configuration level\n\t * @param optionsValue - The overwrite on options level\n\t * @param defaultValue - The default value if no overwrite was defined\n\t */\n\tprivate getValue(configurationValue: any, optionsValue: any, defaultValue: any): any {\n\t\tif (configurationValue === undefined && optionsValue === undefined) {\n\t\t\treturn defaultValue;\n\t\t}\n\n\t\tif (optionsValue !== undefined) {\n\t\t\treturn optionsValue;\n\t\t}\n\n\t\treturn configurationValue;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalTypeOptions.html":{"url":"interfaces/NgxModalTypeOptions.html","title":"interface - NgxModalTypeOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalTypeOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxOnlineService.html":{"url":"injectables/NgxOnlineService.html","title":"injectable - NgxOnlineService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxOnlineService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/online-service/online.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that provides the currently online status of the application\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                online$\n                            \n                            \n                                    Private\n                                    Readonly\n                                onlineSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:25\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:20\n                        \n                    \n\n            \n                \n                    A subject to handle the destroyed flow\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        online$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.onlineSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:25\n                        \n                    \n\n            \n                \n                    An observable that emits whenever the application is on or offline\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onlineSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:15\n                        \n                    \n\n            \n                \n                    A subject that emits whenever the application is on or offline\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { Observable, Subject, fromEvent, takeUntil, tap } from 'rxjs';\n\n/**\n * A service that provides the currently online status of the application\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxOnlineService implements OnDestroy {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A subject that emits whenever the application is on or offline\n\t */\n\tprivate readonly onlineSubject: Subject = new Subject();\n\n\t/**\n\t * A subject to handle the destroyed flow\n\t */\n\tprivate readonly onDestroySubject: Subject = new Subject();\n\n\t/**\n\t * An observable that emits whenever the application is on or offline\n\t */\n\tpublic readonly online$: Observable = this.onlineSubject.asObservable();\n\n\tconstructor() {\n\t\t// Iben: When we're in the browser, listen to the online and offline status of the application\n\t\tif (this.windowService.isBrowser()) {\n\t\t\t// Iben: Handle the on and offline status of the application\n\t\t\tfromEvent(window, 'online')\n\t\t\t\t.pipe(\n\t\t\t\t\ttap(() => {\n\t\t\t\t\t\tthis.onlineSubject.next(true);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t\t)\n\t\t\t\t.subscribe();\n\n\t\t\tfromEvent(window, 'offline')\n\t\t\t\t.pipe(\n\t\t\t\t\ttap(() => {\n\t\t\t\t\t\tthis.onlineSubject.next(false);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t\t)\n\t\t\t\t.subscribe();\n\t\t}\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Complete the destroyed subject\n\t\tthis.onDestroySubject.next();\n\t\tthis.onDestroySubject.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxQueryParamFormSyncComponent.html":{"url":"directives/NgxQueryParamFormSyncComponent.html","title":"directive - NgxQueryParamFormSyncComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxQueryParamFormSyncComponent\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnDestroy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                destroyed$\n                            \n                            \n                                    Public\n                                form\n                            \n                            \n                                    Protected\n                                queryParams$\n                            \n                            \n                                    Protected\n                                    Readonly\n                                route\n                            \n                            \n                                    Protected\n                                    Readonly\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clearData\n                            \n                            \n                                    Protected\n                                    Abstract\n                                    Optional\n                                handleDataChanges\n                            \n                            \n                                    Protected\n                                    Abstract\n                                initForm\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    Protected\n                                    Optional\n                                scrambleParams\n                            \n                            \n                                    Private\n                                setDataInRoute\n                            \n                            \n                                    Protected\n                                    Optional\n                                unscrambleParams\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearData\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearData()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:110\n                        \n                    \n\n\n            \n                \n                        Clears the data in the form\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                            Optional\n                        handleDataChanges\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDataChanges(data: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:161\n                        \n                    \n\n\n            \n                \n                        An optional method that will handle what happens when the data have been updated. Do NOT subscribe to an Observable in this method.\nThis method is useful in case you wish to save your currently selected data to a global state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data provided by the form\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        initForm\n                        \n                    \n                \n            \n            \n                \n                        \n                    initForm()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:152\n                        \n                    \n\n\n            \n                \n                        A method that that will provide a form that will be used to store the current data\n\n\n                        \n                            Returns :     FormType\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:100\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Optional\n                        scrambleParams\n                        \n                    \n                \n            \n            \n                \n                        \n                    scrambleParams(params: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:168\n                        \n                    \n\n\n            \n                \n                        An optional method to scramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided params we wish to set in the route\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     QueryParamsType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setDataInRoute\n                        \n                    \n                \n            \n            \n                \n                        \n                    setDataInRoute(data: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:119\n                        \n                    \n\n\n            \n                \n                        Sets the provided data in the route, so the filtered view can be shared by url\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided data\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Optional\n                        unscrambleParams\n                        \n                    \n                \n            \n            \n                \n                        \n                    unscrambleParams(params: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:174\n                        \n                    \n\n\n            \n                \n                        An optional method to unscramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided params we wish to patch in the form\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     QueryParamsType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        form\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormType\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:25\n                        \n                    \n\n            \n                \n                    The form in which we will save the queryParam data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        queryParams$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable>\n\n                    \n                \n                \n                    \n                        Default value : this.route\n\t\t.queryParams as Observable>\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:30\n                        \n                    \n\n            \n                \n                    The query params we wish to form\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        route\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ActivatedRoute)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Router)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n    \n        NgxQueryParamFormSyncComponent\nThe NgxQueryParamFormSyncComponent allows you to sync queryParams with a form provided in the component.\nAn ideal use-case for this component is filtered views that keep the selected filters in queryParams. This abstraction ensures that both the visual filters and the url stay in sync. This way the url can be shared, and the view will be filtered as shared.\nMethods\nWhen implementing the NgxQueryParamFormSyncComponent, there is only one method that requires implementation, being the initForm method. This method should return a form that will be used to store the queryParams in the component.\nThe component also provides a clearData method that will automatically clear the form.\nOptional methods\nOptionally, you want to interact with the changes in the form, like dispatching the data to a store. By implementing the optional handleDataChanges method, you can listen to these changes and handle them accordingly. It is very important to not subscribe to an Observable in this method, as it within itself is already used within a subscription.\nSometimes, certain data cannot be put in the queryParams without being scrambled first. This can be useful in situations in which some of the items in the queryParams are protected by GDPR, but you still wish to be able to share the url to a filtered view. In order to handle these situations, we provide the optional methods scrambleParams and the unscrambleParams, in which you can provide an implementation to scramble these items before sending them to the url.\nExample\nExample :import { scrambler, unscrambler } from 'ngx-random-package';\n\ninterface Filters {\n    searchQuery: string;\n    sorting: string;\n}\n\ninterface FiltersForm {\n    searchQuery: FormControl;\n    sorting: FormControl;\n}\n\n@Component({\n    selector: 'table-view',\n    templateUrl: './survey.component.html',\n})\nexport class TableViewComponent extends NgxQueryParamFormSyncComponent\n> {\n    constructor(\n        readonly route: ActivatedRoute,\n        readonly router: Router,\n        readonly storeService: NgxStoreService\n    ) {\n        super(route, router);\n    }\n\n    initForm(): FormGroup {\n        return new FormGroup({\n            searchQuery: new FormControl(),\n            sorting: new FormControl(),\n        });\n    }\n\n    handleDataChanges(value: Filters) {\n        this.storeService.setFilters(value);\n    }\n\n    scrambleParams(value: Filters) {\n        return {\n            ...value,\n            sorting: scrambler(value.sorting),\n        };\n    }\n\n    unscrambleParams(value: Filters) {\n        return {\n            ...value,\n            sorting: unscrambler(value.sorting),\n        };\n    }\n}\n    \n\n    \n        import { Directive, OnDestroy, OnInit, inject } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, Subject, filter, take, takeUntil, tap } from 'rxjs';\n\nexport type StringifiedQueryParamsType = {\n\t[key in keyof QueryParamsType]: string;\n};\n\n@Directive()\nexport abstract class NgxQueryParamFormSyncComponent\n\timplements OnInit, OnDestroy\n{\n\tprotected readonly route = inject(ActivatedRoute);\n\tprotected readonly router = inject(Router);\n\n\tprotected readonly destroyed$: Subject = new Subject();\n\n\t/**\n\t * The form in which we will save the queryParam data\n\t */\n\tpublic form: FormType;\n\n\t/**\n\t * The query params we wish to form\n\t */\n\tprotected queryParams$: Observable> = this.route\n\t\t.queryParams as Observable>;\n\n\tpublic ngOnInit(): void {\n\t\t//Iben: Warn the user if one of the two methods isn't provided\n\t\tif (\n\t\t\t(!this.scrambleParams && this.unscrambleParams) ||\n\t\t\t(this.scrambleParams && !this.unscrambleParams)\n\t\t) {\n\t\t\tconsole.error(\n\t\t\t\t`NgxUtils: NgxQueryParamFormSyncComponent detected the use of the parameter scrambling but is missing an implementation for the ${\n\t\t\t\t\tthis.scrambleParams ? 'unscrambleParams' : 'scrambleParams'\n\t\t\t\t} method. Please provide this method in order for this flow to work correctly.`\n\t\t\t);\n\t\t}\n\n\t\t// Iben: Setup the form for the data\n\t\tthis.form = this.initForm();\n\n\t\t// Iben: Listen to the form changes\n\t\tthis.form.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((data) => {\n\t\t\t\t\t// Iben: Update the route params\n\t\t\t\t\tthis.setDataInRoute(data);\n\n\t\t\t\t\t// Iben: Handle the route data changes\n\t\t\t\t\tif (this.handleDataChanges) {\n\t\t\t\t\t\tthis.handleDataChanges(data);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Listen to the initial query param update so we can set the data in the form if we navigate to a link with the params\n\t\tthis.queryParams$\n\t\t\t.pipe(\n\t\t\t\ttake(1),\n\t\t\t\tfilter(Boolean),\n\t\t\t\ttap((data) => {\n\t\t\t\t\t// Iben: Convert the route data properties to the actual data\n\t\t\t\t\tlet value: QueryParamsType = Object.keys(data || {}).reduce(\n\t\t\t\t\t\t(previous, current) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...previous,\n\t\t\t\t\t\t\t\t[current]: data[current] ? JSON.parse(data[current]) : undefined,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as QueryParamsType;\n\n\t\t\t\t\t// Iben: In case the unscrambleParams method is provided, we unscramble the data\n\t\t\t\t\tif (this.unscrambleParams) {\n\t\t\t\t\t\tvalue = this.unscrambleParams(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t//Iben: If the entire object is empty, we early exit and do not set the form\n\t\t\t\t\tif (Object.keys(value).length === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Set the current form value\n\t\t\t\t\tthis.form.setValue(value);\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.destroyed$.next();\n\t\tthis.destroyed$.complete();\n\n\t\tthis.clearData();\n\t}\n\n\t/**\n\t * Clears the data in the form\n\t */\n\tpublic clearData(): void {\n\t\tthis.form.reset();\n\t}\n\n\t/**\n\t * Sets the provided data in the route, so the filtered view can be shared by url\n\t *\n\t * @param  data - The provided data\n\t */\n\tprivate setDataInRoute(data: QueryParamsType): void {\n\t\t// Iben: If no data was provided, we simply unset the current params\n\t\tif (Object.keys(data || {}).length === 0) {\n\t\t\tthis.router.navigate([], {\n\t\t\t\trelativeTo: this.route,\n\t\t\t\tqueryParams: {},\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: In case a scrambleParams function was provided, we scramble the params first\n\t\tconst parsedData = this.scrambleParams ? this.scrambleParams(data) : data;\n\n\t\t// Iben: Stringify all properties of the data\n\t\tconst queryParams = Object.keys(parsedData || {}).reduce((previous, current) => {\n\t\t\treturn {\n\t\t\t\t...previous,\n\t\t\t\t[current]: JSON.stringify(parsedData[current]),\n\t\t\t};\n\t\t}, {});\n\n\t\t// Iben: Add the queryParams to the route\n\t\tthis.router.navigate([], {\n\t\t\trelativeTo: this.route,\n\t\t\tqueryParamsHandling: 'merge',\n\t\t\tqueryParams,\n\t\t});\n\t}\n\n\t/**\n\t * A method that that will provide a form that will be used to store the current data\n\t */\n\tprotected abstract initForm(): FormType;\n\n\t/**\n\t * An optional method that will handle what happens when the data have been updated. Do NOT subscribe to an Observable in this method.\n\t *\n\t * This method is useful in case you wish to save your currently selected data to a global state.\n\t *\n\t * @param data - The data provided by the form\n\t */\n\tprotected abstract handleDataChanges?(data: QueryParamsType): void;\n\n\t/**\n\t * An optional method to scramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\t *\n\t * @param params - The provided params we wish to set in the route\n\t */\n\tprotected scrambleParams?(params: QueryParamsType): QueryParamsType;\n\t/**\n\t * An optional method to unscramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\t *\n\t * @param params - The provided params we wish to patch in the form\n\t */\n\tprotected unscrambleParams?(params: QueryParamsType): QueryParamsType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxReplaceElementsConfigurationElement.html":{"url":"interfaces/NgxReplaceElementsConfigurationElement.html","title":"interface - NgxReplaceElementsConfigurationElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxReplaceElementsConfigurationElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/replace-elements.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            element\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            includeInnerHtml\n                                        \n                                \n                                \n                                        \n                                            selector\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        element:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        includeInnerHtml\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        includeInnerHtml:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selector\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selector:         NgxReplaceElementsSelector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxReplaceElementsSelector\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxReplaceElementsSelector = `${string}{{id}}${string}`;\n\nexport interface NgxReplaceElementsConfigurationElement {\n\telement: string;\n\tselector: NgxReplaceElementsSelector;\n\tincludeInnerHtml?: boolean;\n}\n\nexport type NgxReplaceElementsConfiguration = Record;\n\nexport interface NgxReplaceElementsItem {\n\tid: string;\n\telementId: string;\n\tdata?: Record, string>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxReplaceElementsItem.html":{"url":"interfaces/NgxReplaceElementsItem.html","title":"interface - NgxReplaceElementsItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxReplaceElementsItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/replace-elements.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            elementId\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     Record | string>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record | string>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxReplaceElementsSelector = `${string}{{id}}${string}`;\n\nexport interface NgxReplaceElementsConfigurationElement {\n\telement: string;\n\tselector: NgxReplaceElementsSelector;\n\tincludeInnerHtml?: boolean;\n}\n\nexport type NgxReplaceElementsConfiguration = Record;\n\nexport interface NgxReplaceElementsItem {\n\tid: string;\n\telementId: string;\n\tdata?: Record, string>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxReplaceElementsPipe.html":{"url":"pipes/NgxReplaceElementsPipe.html","title":"pipe - NgxReplaceElementsPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxReplaceElementsPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe that allows to replace text elements with a WebComponent\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxReplaceElements\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: string, items: NgxReplaceElementsItem[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts:24\n                        \n                    \n\n\n            \n                \n                        Replaces all matches of a specific selector with provided WebComponents\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe original string value\n\n\n                                            \n                                        \n                                        \n                                                items\n                                            \n                                                            NgxReplaceElementsItem[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe items we wish to replace\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SafeHtml\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxReplaceElementsConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        sanitizer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DomSanitizer)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n    \n        ngxReplaceElements\nThe ngxReplaceElements pipe will provide a way to transform a string that contains one or more parts that need an Angular component by taking advantage of Angular web components.\nThis can be useful in combination with translation strings that require in-app links or WYSIWYG content from an external source.\nHow to use\nSet up\nThe pipe requires a couple of things to be provided before it can be used.\nFirst, create a component that will be used to replace your target:\nExample :@Component({\n    selector: 'link',\n    template: '',\n})\nexport class LinkComponent {\n    // Keep in mind that Angular's innerHTML & outerHTML will convert attributes to lower casing.\n    // This input property will need to be lowercased to make this work.\n    public link: InputSignal: input();\n}Then register it as a web component in your app.component.ts:\nExample :@Component({\n    //...\n})\nexport class AppComponent {\n    constructor(\n        // ...\n        private readonly windowService: NgxWindowService,\n        private readonly injector: Injector\n    ) {\n        // Note that we are using our NgxWindowService (ngx-core) to avoid SSR issues.\n        if (this.windowService.isBrowser) {\n            const linkComponent = createCustomElement(LinkComponent, { injector: this.injector });\n\n            customElements.define('ngx-link', linkComponent);\n        }\n    }\n}Lastly set up the global config in your root provider array:\nExample :providers: [\n    //...\n    provideNgxReplaceElementsConfiguration({\n        link: {\n            element: 'ngx-link',\n            selector: 'a[data-link-id={{id}}]',\n            includeInnerHtml: true,\n        },\n        image: {\n            element: 'ngx-image',\n            selector: 'img[data-link-id={{id}}]',\n        },\n    }),\n];For each element we want to register, we define the WebComponent name using the element property. In order to be able to select an item to replace later on in the text, we create a selector. This selector should always include a part to identify the id, being {{id}}.\nIf we wish to use the original innerText of the element whilst replacing, we can do so by setting includeInnerHtml to true.\nUsing the pipe\nWhen the web component is set up, you can start using the pipe.\nFirst set up anchors in your input string:\nExample :\"This is a text with a link.\"The someUniqueId will be used by the pipe to find and replace your link element so make sure that each anchor within your translation has a unique identifier.\nWithin the template you can now provide the string and transform it like this:\nExample :Whilst id refers to the id in the string, elementId refers to the element we have configured in the configuration.\nThe data property can be used to set the inputs of our provided WebComponent. We once again want to stress that due to the nature of WebComponents, these properties can only have lowercase keys.\n\n    \n\n    \n        import { Pipe, PipeTransform, inject } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\nimport { NgxReplaceElementsConfigurationToken } from '../../tokens';\nimport { NgxReplaceElementsConfiguration, NgxReplaceElementsItem } from '../../types';\n\n/**\n * A pipe that allows to replace text elements with a WebComponent\n */\n@Pipe({\n\tname: 'ngxReplaceElements',\n\tstandalone: true,\n})\nexport class NgxReplaceElementsPipe implements PipeTransform {\n\tprivate readonly configuration = inject(NgxReplaceElementsConfigurationToken);\n\tprivate readonly sanitizer = inject(DomSanitizer);\n\n\t/**\n\t * Replaces all matches of a specific selector with provided WebComponents\n\t *\n\t * @param value - The original string value\n\t * @param items - The items we wish to replace\n\t */\n\ttransform(value: string, items: NgxReplaceElementsItem[]): SafeHtml {\n\t\t// Iben: If the value isn't a string we early exit and warn the user\n\t\tif (typeof value !== 'string') {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxReplaceElements: A non string-value was provided to the NgxReplaceElementsPipe'\n\t\t\t);\n\t\t\treturn '';\n\t\t}\n\n\t\t// Iben: If no items were provided to replace, we just return the value\n\t\tif (!items || items.length === 0) {\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: set up a new instance of the DOMParser and parse the value as text/html.\n\t\t// This will return a Document which we can work with to find/replace elements.\n\t\tconst parser: DOMParser = new DOMParser();\n\t\tconst body: Document = parser.parseFromString(value, 'text/html');\n\n\t\t// Iben: Loop over all items we wish to replace\n\t\titems.forEach((item) => {\n\t\t\t// Iben: Get the selector and the element we want to replace the target with\n\t\t\tconst { selector, element, includeInnerHtml } = this.configuration[item.elementId];\n\n\t\t\t// Iben: Select the target\n\t\t\tconst target: HTMLElement = body.querySelector(selector.replace('{{id}}', item.id));\n\n\t\t\t// Iben: If no target was found, early exit\n\t\t\tif (!target) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Iben: Create a new element within the Document based on the provided selector.\n\t\t\t// The selector can be any native or custom web component (not an Angular component).\n\t\t\t// Keep in mind that the element will need to have a lowercase input prop for the reference.\n\t\t\tconst replacement: HTMLElement = body.createElement(element);\n\n\t\t\t// Iben: If the item included data, we set these attributes\n\t\t\tif (item.data) {\n\t\t\t\tObject.entries(item.data).forEach(([key, value]) => {\n\t\t\t\t\treplacement.setAttribute(key, value);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Iben: Copy the innerHtml of the target element to the new element if needed.\n      if (includeInnerHtml) {\n\t\t\treplacement.innerHTML = target.innerHTML;\n\t\t}\n\n\t\t\t// Iben: Replace the target with the new element within the Document.\n\t\t\ttarget.replaceWith(replacement);\n\t\t});\n\n\t\t// Iben: sanitize the document and mark it as trusted HTML before returning it to the template.\n\t\treturn this.sanitizer.bypassSecurityTrustHtml(body.documentElement.innerHTML);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxSaveOnExitAbstractService.html":{"url":"classes/NgxSaveOnExitAbstractService.html","title":"class - NgxSaveOnExitAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxSaveOnExitAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.service.abstract.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                bypassSaveOnExit\n                            \n                            \n                                    Public\n                                    Abstract\n                                handleDirtyState\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        bypassSaveOnExit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.service.abstract.ts:15\n                        \n                    \n\n            \n                \n                    An optional method that, if implemented, provides the ability to bypass the guard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        handleDirtyState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.service.abstract.ts:10\n                        \n                    \n\n            \n                \n                    Take action when the component is dirty\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxSaveOnExitComponent } from './save-on-exit.component.abstract';\n\nexport abstract class NgxSaveOnExitAbstractService {\n\t/**\n\t * Take action when the component is dirty\n\t */\n\tpublic abstract handleDirtyState: (component: NgxSaveOnExitComponent) => Observable;\n\n\t/**\n\t * An optional method that, if implemented, provides the ability to bypass the guard\n\t */\n\tpublic bypassSaveOnExit?: (\n\t\tcurrentRoute: ActivatedRouteSnapshot,\n\t\tnextState: RouterStateSnapshot\n\t) => boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxSaveOnExitComponent.html":{"url":"directives/NgxSaveOnExitComponent.html","title":"directive - NgxSaveOnExitComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxSaveOnExitComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                allowBeforeUnloadHandler\n                            \n                            \n                                    Public\n                                    Readonly\n                                destroyed$\n                            \n                            \n                                    Private\n                                    Readonly\n                                destroyedSubject$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleUnloadEvent\n                            \n                            \n                                    Public\n                                    Abstract\n                                isDirty\n                            \n                            \n                                    Public\n                                    Abstract\n                                isValid\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:beforeunload\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            window:beforeunload\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:12\n                \n            \n\n\n            \n                \n                    Handles the unload event of the browser and will warn the user that the application prevented the user from closing the browser\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe unload event from the browser\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUnloadEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUnloadEvent(event: BeforeUnloadEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:beforeunload', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:12\n                        \n                    \n\n\n            \n                \n                        Handles the unload event of the browser and will warn the user that the application prevented the user from closing the browser\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        BeforeUnloadEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unload event from the browser\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        isDirty\n                        \n                    \n                \n            \n            \n                \n                        \n                    isDirty()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:38\n                        \n                    \n\n\n            \n                \n                        Return whether or not the component is dirty\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        isValid\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValid()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:43\n                        \n                    \n\n\n            \n                \n                        Return whether or not the component is valid\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        allowBeforeUnloadHandler\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:33\n                        \n                    \n\n            \n                \n                    Whether or not the beforeUnload event should be intercepted or not. By default, this behavior is set to false\nIf set to true, closing a tab or the browser will be interrupted and a message will be displayed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.destroyedSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:27\n                        \n                    \n\n            \n                \n                    An observable that emits the onDestroy event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        destroyedSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:22\n                        \n                    \n\n            \n                \n                    A subject to handle the onDestroy flow\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Directive()\nexport abstract class NgxSaveOnExitComponent implements OnDestroy {\n\t/**\n\t * Handles the unload event of the browser and will warn the user that the application prevented the user from closing the browser\n\t *\n\t * @param event - The unload event from the browser\n\t */\n\t@HostListener('window:beforeunload', ['$event'])\n\thandleUnloadEvent(event: BeforeUnloadEvent) {\n\t\t// Iben: If the component is dirty, we prevent the browser from closing the window or tab\n\t\tif (this.allowBeforeUnloadHandler && this.isDirty()) {\n\t\t\tevent.returnValue = true;\n\t\t}\n\t}\n\n\t/**\n\t * A subject to handle the onDestroy flow\n\t */\n\tprivate readonly destroyedSubject$ = new Subject();\n\n\t/**\n\t * An observable that emits the onDestroy event\n\t */\n\tpublic readonly destroyed$ = this.destroyedSubject$.asObservable();\n\n\t/**\n\t * Whether or not the beforeUnload event should be intercepted or not. By default, this behavior is set to false\n\t * If set to true, closing a tab or the browser will be interrupted and a message will be displayed\n\t */\n\tpublic readonly allowBeforeUnloadHandler: boolean = false;\n\n\t/**\n\t * Return whether or not the component is dirty\n\t */\n\tpublic abstract isDirty(): boolean;\n\n\t/**\n\t * Return whether or not the component is valid\n\t */\n\tpublic abstract isValid(): boolean;\n\n\tngOnDestroy() {\n\t\t// Iben: Emit if the component gets destroyed\n\t\tthis.destroyedSubject$.next(undefined);\n\t\tthis.destroyedSubject$.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxSignalStoreService.html":{"url":"injectables/NgxSignalStoreService.html","title":"injectable - NgxSignalStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxSignalStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/signal/abstracts/store.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service that can be used to store handle a NgxSignalStore\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Abstract\n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    state\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxSignalStore\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/signal/abstracts/store.service.ts:13\n                        \n                    \n\n            \n                \n                    The store we preserve the state in\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/store/src/lib/signal/abstracts/store.service.ts:18\n                                \n                            \n                    \n                        \n                                Returns a read only version of the state\n\n\n                                \n                                    Returns :         NgxSignalStoreViewState\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { NgxSignalStore, NgxSignalStoreState, NgxSignalStoreViewState } from '../types';\n\n/**\n * An abstract service that can be used to store handle a NgxSignalStore\n */\n@Injectable()\nexport abstract class NgxSignalStoreService {\n\t/**\n\t * The store we preserve the state in\n\t */\n\tprotected abstract store: NgxSignalStore;\n\n\t/**\n\t * Returns a read only version of the state\n\t */\n\tpublic get state(): NgxSignalStoreViewState {\n\t\t// Iben: If no initial created store was passed to the service, we early exit\n\t\tif (!this.store) {\n\t\t\tconsole.error(\n\t\t\t\t'@ibenvandeveire/ngx-store: No created store was provided to the NgxSignalStoreService in the constructor, so no state could be generated.'\n\t\t\t);\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Return the store\n\t\treturn this.store;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxSignalStoreSlice.html":{"url":"interfaces/NgxSignalStoreSlice.html","title":"interface - NgxSignalStoreSlice","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxSignalStoreSlice\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/signal/types/signal-store.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Data of an individual slice within an NgxSignalStore\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Signal } from '@angular/core';\nimport { SignalStoreFeature } from '@ngrx/signals';\nimport { MethodsDictionary } from 'node_modules/@ngrx/signals/src/signal-store-models';\n\nimport {\n\tArrayElementType,\n\tNgxSignalStoreSelectFunction,\n\tNgxSignalStoreSliceArrayGenerator,\n\tNgxSignalStoreSliceGenerator,\n} from './signal-store-generator.types';\n\n/**\n * Data of an individual slice within an NgxSignalStore\n * @template DataType - The type of the data, by default unknown\n */\nexport interface NgxSignalStoreSlice {\n\tdata: DataType;\n\tloading: boolean;\n\terror: boolean;\n}\n\n/**\n * The configuration to setup a slice in the NgxSignalStore\n */\nexport type NgxSignalStoreConfiguration = {\n\t[Key in keyof StateType]: NgxSignalStoreSliceConfiguration\n\t>;\n};\n\n/**\n * The configuration of a slice in the NgxSignalStore\n */\ntype NgxSignalStoreSliceConfiguration = DataType extends unknown[]\n\t? DataType extends { id: string | number }[]\n\t\t? {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t  }\n\t\t: {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t\t\tselectId: NgxSignalStoreSelectFunction;\n\t\t  }\n\t: DataType extends string | boolean | number | object\n\t? {\n\t\t\tgenerator: NgxSignalStoreSliceGenerator;\n\t\t\tinitialData?: DataType;\n\t  }\n\t: any;\n\n/**\n * The state of a store\n */\nexport type NgxSignalStoreState = Record;\n\n/**\n * Extracts the data type out of a NgxSignalStoreSlice\n */\ntype NgxSignalStoreSliceDataType = Type extends NgxSignalStoreSlice\n\t? DataType\n\t: never;\n\n/**\n * The methods that are available in the store\n */\ntype NgxSignalStoreSliceMethods = [DataType] extends [unknown[]]\n\t? NgxSignalStoreSliceArrayMethods\n\t: NgxSignalStoreSliceBaseMethods;\n\n/**\n * The methods that are available in the store for all slices\n */\nexport interface NgxSignalStoreSliceBaseMethods extends MethodsDictionary {\n\tset: (data: DataType extends [never] ? boolean : DataType) => void;\n\treset: () => void;\n\tclear: () => void;\n\tsetError: (error: boolean) => void;\n\tsetLoading: (loading: boolean) => void;\n}\n\n/**\n * Extra methods that are available in the store for array slices\n */\nexport interface NgxSignalStoreSliceArrayMethods\n\textends NgxSignalStoreSliceBaseMethods {\n\tadd: (data: DataType | ArrayElementType) => void;\n\tprepend: (data: DataType | ArrayElementType) => void;\n\tupdate: (data: ArrayElementType) => void;\n\tremove: (data: ArrayElementType) => void;\n}\n\n/**\n * The methods that are available to the dispatchDataToSignalStore method\n */\nexport type NgxSignalStoreDispatchActions = keyof Omit,\n\t'reset' | 'clear' | 'setError' | 'setLoading'\n>;\n\n/**\n * A record of the NgxSignalStore slices\n */\nexport type NgxSignalStoreRecord = {\n\t[Key in keyof StateType]: SignalStoreFeature>;\n\t\tprops: undefined;\n\t\tmethods: NgxSignalStoreSliceMethods>;\n\t}>;\n};\n\n/**\n * A readonly version of the NgxSignalStore\n */\nexport type NgxSignalStoreViewState = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t};\n};\n\n/**\n * A writable version of the NgxSignalStore\n */\nexport type NgxSignalStore = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t} & NgxSignalStoreSliceMethods>;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxSignalStoreSliceArrayMethods.html":{"url":"interfaces/NgxSignalStoreSliceArrayMethods.html","title":"interface - NgxSignalStoreSliceArrayMethods","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxSignalStoreSliceArrayMethods\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/signal/types/signal-store.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Extra methods that are available in the store for array slices\n\n            \n\n            \n                Extends\n            \n            \n                            NgxSignalStoreSliceBaseMethods\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            add\n                                        \n                                \n                                \n                                        \n                                            prepend\n                                        \n                                \n                                \n                                        \n                                            remove\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        add\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        add:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prepend\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prepend:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        remove\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        remove:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Signal } from '@angular/core';\nimport { SignalStoreFeature } from '@ngrx/signals';\nimport { MethodsDictionary } from 'node_modules/@ngrx/signals/src/signal-store-models';\n\nimport {\n\tArrayElementType,\n\tNgxSignalStoreSelectFunction,\n\tNgxSignalStoreSliceArrayGenerator,\n\tNgxSignalStoreSliceGenerator,\n} from './signal-store-generator.types';\n\n/**\n * Data of an individual slice within an NgxSignalStore\n * @template DataType - The type of the data, by default unknown\n */\nexport interface NgxSignalStoreSlice {\n\tdata: DataType;\n\tloading: boolean;\n\terror: boolean;\n}\n\n/**\n * The configuration to setup a slice in the NgxSignalStore\n */\nexport type NgxSignalStoreConfiguration = {\n\t[Key in keyof StateType]: NgxSignalStoreSliceConfiguration\n\t>;\n};\n\n/**\n * The configuration of a slice in the NgxSignalStore\n */\ntype NgxSignalStoreSliceConfiguration = DataType extends unknown[]\n\t? DataType extends { id: string | number }[]\n\t\t? {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t  }\n\t\t: {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t\t\tselectId: NgxSignalStoreSelectFunction;\n\t\t  }\n\t: DataType extends string | boolean | number | object\n\t? {\n\t\t\tgenerator: NgxSignalStoreSliceGenerator;\n\t\t\tinitialData?: DataType;\n\t  }\n\t: any;\n\n/**\n * The state of a store\n */\nexport type NgxSignalStoreState = Record;\n\n/**\n * Extracts the data type out of a NgxSignalStoreSlice\n */\ntype NgxSignalStoreSliceDataType = Type extends NgxSignalStoreSlice\n\t? DataType\n\t: never;\n\n/**\n * The methods that are available in the store\n */\ntype NgxSignalStoreSliceMethods = [DataType] extends [unknown[]]\n\t? NgxSignalStoreSliceArrayMethods\n\t: NgxSignalStoreSliceBaseMethods;\n\n/**\n * The methods that are available in the store for all slices\n */\nexport interface NgxSignalStoreSliceBaseMethods extends MethodsDictionary {\n\tset: (data: DataType extends [never] ? boolean : DataType) => void;\n\treset: () => void;\n\tclear: () => void;\n\tsetError: (error: boolean) => void;\n\tsetLoading: (loading: boolean) => void;\n}\n\n/**\n * Extra methods that are available in the store for array slices\n */\nexport interface NgxSignalStoreSliceArrayMethods\n\textends NgxSignalStoreSliceBaseMethods {\n\tadd: (data: DataType | ArrayElementType) => void;\n\tprepend: (data: DataType | ArrayElementType) => void;\n\tupdate: (data: ArrayElementType) => void;\n\tremove: (data: ArrayElementType) => void;\n}\n\n/**\n * The methods that are available to the dispatchDataToSignalStore method\n */\nexport type NgxSignalStoreDispatchActions = keyof Omit,\n\t'reset' | 'clear' | 'setError' | 'setLoading'\n>;\n\n/**\n * A record of the NgxSignalStore slices\n */\nexport type NgxSignalStoreRecord = {\n\t[Key in keyof StateType]: SignalStoreFeature>;\n\t\tprops: undefined;\n\t\tmethods: NgxSignalStoreSliceMethods>;\n\t}>;\n};\n\n/**\n * A readonly version of the NgxSignalStore\n */\nexport type NgxSignalStoreViewState = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t};\n};\n\n/**\n * A writable version of the NgxSignalStore\n */\nexport type NgxSignalStore = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t} & NgxSignalStoreSliceMethods>;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxSignalStoreSliceBaseMethods.html":{"url":"interfaces/NgxSignalStoreSliceBaseMethods.html","title":"interface - NgxSignalStoreSliceBaseMethods","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxSignalStoreSliceBaseMethods\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/signal/types/signal-store.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The methods that are available in the store for all slices\n\n            \n\n            \n                Extends\n            \n            \n                        MethodsDictionary\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                        \n                                            reset\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                                \n                                        \n                                            setError\n                                        \n                                \n                                \n                                        \n                                            setLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reset:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setError:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setLoading:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Signal } from '@angular/core';\nimport { SignalStoreFeature } from '@ngrx/signals';\nimport { MethodsDictionary } from 'node_modules/@ngrx/signals/src/signal-store-models';\n\nimport {\n\tArrayElementType,\n\tNgxSignalStoreSelectFunction,\n\tNgxSignalStoreSliceArrayGenerator,\n\tNgxSignalStoreSliceGenerator,\n} from './signal-store-generator.types';\n\n/**\n * Data of an individual slice within an NgxSignalStore\n * @template DataType - The type of the data, by default unknown\n */\nexport interface NgxSignalStoreSlice {\n\tdata: DataType;\n\tloading: boolean;\n\terror: boolean;\n}\n\n/**\n * The configuration to setup a slice in the NgxSignalStore\n */\nexport type NgxSignalStoreConfiguration = {\n\t[Key in keyof StateType]: NgxSignalStoreSliceConfiguration\n\t>;\n};\n\n/**\n * The configuration of a slice in the NgxSignalStore\n */\ntype NgxSignalStoreSliceConfiguration = DataType extends unknown[]\n\t? DataType extends { id: string | number }[]\n\t\t? {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t  }\n\t\t: {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t\t\tselectId: NgxSignalStoreSelectFunction;\n\t\t  }\n\t: DataType extends string | boolean | number | object\n\t? {\n\t\t\tgenerator: NgxSignalStoreSliceGenerator;\n\t\t\tinitialData?: DataType;\n\t  }\n\t: any;\n\n/**\n * The state of a store\n */\nexport type NgxSignalStoreState = Record;\n\n/**\n * Extracts the data type out of a NgxSignalStoreSlice\n */\ntype NgxSignalStoreSliceDataType = Type extends NgxSignalStoreSlice\n\t? DataType\n\t: never;\n\n/**\n * The methods that are available in the store\n */\ntype NgxSignalStoreSliceMethods = [DataType] extends [unknown[]]\n\t? NgxSignalStoreSliceArrayMethods\n\t: NgxSignalStoreSliceBaseMethods;\n\n/**\n * The methods that are available in the store for all slices\n */\nexport interface NgxSignalStoreSliceBaseMethods extends MethodsDictionary {\n\tset: (data: DataType extends [never] ? boolean : DataType) => void;\n\treset: () => void;\n\tclear: () => void;\n\tsetError: (error: boolean) => void;\n\tsetLoading: (loading: boolean) => void;\n}\n\n/**\n * Extra methods that are available in the store for array slices\n */\nexport interface NgxSignalStoreSliceArrayMethods\n\textends NgxSignalStoreSliceBaseMethods {\n\tadd: (data: DataType | ArrayElementType) => void;\n\tprepend: (data: DataType | ArrayElementType) => void;\n\tupdate: (data: ArrayElementType) => void;\n\tremove: (data: ArrayElementType) => void;\n}\n\n/**\n * The methods that are available to the dispatchDataToSignalStore method\n */\nexport type NgxSignalStoreDispatchActions = keyof Omit,\n\t'reset' | 'clear' | 'setError' | 'setLoading'\n>;\n\n/**\n * A record of the NgxSignalStore slices\n */\nexport type NgxSignalStoreRecord = {\n\t[Key in keyof StateType]: SignalStoreFeature>;\n\t\tprops: undefined;\n\t\tmethods: NgxSignalStoreSliceMethods>;\n\t}>;\n};\n\n/**\n * A readonly version of the NgxSignalStore\n */\nexport type NgxSignalStoreViewState = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t};\n};\n\n/**\n * A writable version of the NgxSignalStore\n */\nexport type NgxSignalStore = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t} & NgxSignalStoreSliceMethods>;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorage.html":{"url":"interfaces/NgxStorage.html","title":"interface - NgxStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                        \n                                            getItem\n                                        \n                                \n                                \n                                        \n                                            getItemObservable\n                                        \n                                \n                                \n                                        \n                                            removeItem\n                                        \n                                \n                                \n                                        \n                                            setItem\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getItemObservable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getItemObservable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        removeItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        removeItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageBaseEvent.html":{"url":"interfaces/NgxStorageBaseEvent.html","title":"interface - NgxStorageBaseEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageBaseEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            storage\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        storage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        storage:         NgxStorageType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxStorageType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"set\" | \"clear\" | \"remove\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"set\" | \"clear\" | \"remove\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageClearEvent.html":{"url":"interfaces/NgxStorageClearEvent.html","title":"interface - NgxStorageClearEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageClearEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStorageBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageRemoveEvent.html":{"url":"interfaces/NgxStorageRemoveEvent.html","title":"interface - NgxStorageRemoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageRemoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStorageBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            oldValue\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oldValue:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxStorageService.html":{"url":"injectables/NgxStorageService.html","title":"injectable - NgxStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxStorageService\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/services/storage-service/storage.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that provides a SSR-proof Observable based approach to the session- and localStorage.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                localStorageRecord\n                            \n                            \n                                    Private\n                                    Readonly\n                                sessionStorageRecord\n                            \n                            \n                                    Public\n                                    Readonly\n                                storageEvents$\n                            \n                            \n                                    Private\n                                    Readonly\n                                storageEventSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clearStorage\n                            \n                            \n                                    Private\n                                getItem\n                            \n                            \n                                    Private\n                                getItemObservable\n                            \n                            \n                                    Private\n                                parseValue\n                            \n                            \n                                    Private\n                                removeItem\n                            \n                            \n                                    Private\n                                setItem\n                            \n                            \n                                    Private\n                                setupStorage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    localStorage\n                                \n                                \n                                    sessionStorage\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:39\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clearStorage\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearStorage(storage: Storage, record: NgxStorageRecord, type: NgxStorageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:214\n                        \n                    \n\n\n            \n                \n                        Clears the storage, completes all subjects and emits a clear event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage we wish to clear\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe record with the subjects\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            NgxStorageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe type of storage\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     NgxStorageClearEvent | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItem(key: string, storage: Storage)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:83\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getItemObservable\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItemObservable(key: string, record: NgxStorageRecord)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:93\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Returns an observable version of the storage value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the storage value\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage record\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseValue(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:265\n                        \n                    \n\n\n            \n                \n                        Parses a string value from the storage to an actual value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided string value\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        removeItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeItem(key: string, storage: Storage, record: NgxStorageRecord, type: NgxStorageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Remove an item from the storage and emit a remove event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the item\n\n\n                                            \n                                        \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage we wish to remove the item from\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe record with the subject\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            NgxStorageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe type of storage\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     NgxStorageRemoveEvent | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    setItem(key: string, item: DataType, storage: Storage, record: NgxStorageRecord, type: NgxStorageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:122\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Sets an item in the storage\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the item\n\n\n                                            \n                                        \n                                        \n                                                item\n                                            \n                                                            DataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe item in the storage\n\n\n                                            \n                                        \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage in which we want to save the item\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe corresponding storage record\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            NgxStorageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     NgxStorageSetEvent | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setupStorage\n                        \n                    \n                \n            \n            \n                \n                        \n                    setupStorage(storage: Storage, record: NgxStorageRecord)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:254\n                        \n                    \n\n\n            \n                \n                        Grabs the existing storage and updates the record\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current state of the storage\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        localStorageRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxStorageRecord\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:29\n                        \n                    \n\n            \n                \n                    A record to hold the properties in the localStorage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        sessionStorageRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxStorageRecord\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:25\n                        \n                    \n\n            \n                \n                    A record to hold the properties in the sessionStorage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        storageEvents$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.storageEventSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:38\n                        \n                    \n\n            \n                \n                    An observable that emits whenever the session- or the localStorage was updated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        storageEventSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:33\n                        \n                    \n\n            \n                \n                    A subject to hold the events of the storage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        localStorage\n                    \n                \n\n                \n                    \n                        getlocalStorage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:54\n                                \n                            \n                    \n                        \n                                A localStorage implementation using observables\n\n\n                                \n                                    Returns :         NgxStorage\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        sessionStorage\n                    \n                \n\n                \n                    \n                        getsessionStorage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:70\n                                \n                            \n                    \n                        \n                                A sessionStorage implementation using observables\n\n\n                                \n                                    Returns :         NgxStorage\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n    \n        NgxStorageService\nThe NgxStorageService provides a SSR proof Observable approach to both session- and localStorage. It allows for listing to change events on specific properties or on the entire storage.\nApproach\nIn order to provide an Observable based approach to both the session- and localStorage, the session provides a localStorage and a sessionStorage object that offer custom methods that will also emit to the corresponding Observables. Data that was set to the session- or localStorage on the window directly will not be represented in the Observable.\nOn top of an Observable based approach, the new localStorage and sessionStorage implementations will automatically parse the data to a string when saving it to the window session- or localStorage, and will return the parsed value back when calling either getItem or getItemObservable.\nThe service is also SSR proof, and will prevent any actions from occurring when not in the browser.\nProperties\nlocalStorage/sessionStorage\nThe localStorage and sessionStorage objects of the NgxStorageService provide an Observable based approach to storage.\nIf we want to get an item from the storage, we can either use getItem or getItemObservable if we want the real time value vs an Observable respectively.\nUsing setItem and removeItem will set and remove an item in/from the storage respectively, and will emit an event on the storageEvents$ Observable.\nWhen using clear, the entire storage will be cleared, the Observables that were fetched using getItemObservable will be completed and an event will be emitted on the storageEvents$ observable.\nExample :import { NgxStorageService } from '@ibenvandeveire/ngx-utils';\n\nexport class YourComponent {\n    constructor(private storageService: NgxStorageService) {\n        storageService.localStorage.setItem('Hello', { world: true });\n        storageService.sessionStorage.setItem('Hello', { world: true });\n    }\n}storageEvents$\nThe storageEvents$ property is an Observable that will emit a NgxStorageEvent whenever the session- or localStorage was updated (set or remove) or cleared.\nExample :import { NgxStorageService } from '@ibenvandeveire/ngx-utils';\n\nexport class YourComponent {\n    constructor(private storageService: NgxStorageService) {\n        storageService.storageEvent$.subscribe(console.log);\n        // logs: {type: 'update', oldValue: undefined, newValue: {world: true}, key: 'Hello', storage: 'local'}\n        storageService.localStorage.setItem('Hello', { world: true });\n    }\n}\n    \n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { BehaviorSubject, NEVER, Observable, Subject } from 'rxjs';\n\nimport {\n\tNgxStorage,\n\tNgxStorageClearEvent,\n\tNgxStorageEvent,\n\tNgxStorageRecord,\n\tNgxStorageRemoveEvent,\n\tNgxStorageSetEvent,\n\tNgxStorageType,\n} from '../../types';\n\n/**\n * A service that provides a SSR-proof Observable based approach to the session- and localStorage.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxStorageService {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A record to hold the properties in the sessionStorage\n\t */\n\tprivate readonly sessionStorageRecord: NgxStorageRecord = {};\n\t/**\n\t * A record to hold the properties in the localStorage\n\t */\n\tprivate readonly localStorageRecord: NgxStorageRecord = {};\n\t/**\n\t * A subject to hold the events of the storage\n\t */\n\tprivate readonly storageEventSubject: Subject = new Subject();\n\n\t/**\n\t * An observable that emits whenever the session- or the localStorage was updated\n\t */\n\tpublic readonly storageEvents$: Observable =\n\t\tthis.storageEventSubject.asObservable();\n\n\tconstructor() {\n\t\tconst windowService = this.windowService;\n\n\t\t// Iben: Get the initial values of the session and the local storage\n\t\twindowService.runInBrowser(() => {\n\t\t\tthis.setupStorage(sessionStorage, this.sessionStorageRecord);\n\t\t\tthis.setupStorage(localStorage, this.localStorageRecord);\n\t\t});\n\t}\n\n\t/**\n\t * A localStorage implementation using observables\n\t */\n\tpublic get localStorage(): NgxStorage {\n\t\treturn {\n\t\t\tgetItem: (key: string) => this.getItem(key, localStorage),\n\t\t\tgetItemObservable: (key: string) =>\n\t\t\t\tthis.getItemObservable(key, this.localStorageRecord),\n\t\t\tremoveItem: (key: string) =>\n\t\t\t\tthis.removeItem(key, localStorage, this.localStorageRecord, 'local'),\n\t\t\tsetItem: (key: string, item: DataType) =>\n\t\t\t\tthis.setItem(key, item, localStorage, this.localStorageRecord, 'local'),\n\t\t\tclear: () => this.clearStorage(localStorage, this.localStorageRecord, 'local'),\n\t\t};\n\t}\n\n\t/**\n\t * A sessionStorage implementation using observables\n\t */\n\tpublic get sessionStorage(): NgxStorage {\n\t\treturn {\n\t\t\tgetItem: (key: string) => this.getItem(key, sessionStorage),\n\t\t\tgetItemObservable: (key: string) =>\n\t\t\t\tthis.getItemObservable(key, this.sessionStorageRecord),\n\t\t\tremoveItem: (key: string) =>\n\t\t\t\tthis.removeItem(key, sessionStorage, this.sessionStorageRecord, 'session'),\n\t\t\tsetItem: (key: string, item: DataType) =>\n\t\t\t\tthis.setItem(key, item, sessionStorage, this.sessionStorageRecord, 'session'),\n\t\t\tclear: () => this.clearStorage(sessionStorage, this.sessionStorageRecord, 'session'),\n\t\t};\n\t}\n\n\tprivate getItem(key: string, storage: Storage): DataType {\n\t\treturn this.parseValue(storage.getItem(key));\n\t}\n\n\t/**\n\t * Returns an observable version of the storage value\n\t *\n\t * @param key - The key of the storage value\n\t * @param record  - The storage record\n\t */\n\tprivate getItemObservable(\n\t\tkey: string,\n\t\trecord: NgxStorageRecord\n\t): Observable {\n\t\t// Iben: Return NEVER when not in browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn NEVER;\n\t\t}\n\n\t\t// Iben: If the subject already exists, we return the observable\n\t\tif (record[key]) {\n\t\t\treturn record[key].asObservable();\n\t\t}\n\n\t\t// Iben: If no subject exits, we create a new one\n\t\trecord[key] = new BehaviorSubject(undefined);\n\n\t\t// Iben: Return the observable\n\t\treturn this.getItemObservable(key, record);\n\t}\n\n\t/**\n\t * Sets an item in the storage\n\t *\n\t * @param key - The key of the item\n\t * @param item - The item in the storage\n\t * @param storage - The storage in which we want to save the item\n\t * @param record - The corresponding storage record\n\t */\n\tprivate setItem(\n\t\tkey: string,\n\t\titem: DataType,\n\t\tstorage: Storage,\n\t\trecord: NgxStorageRecord,\n\t\ttype: NgxStorageType\n\t): NgxStorageSetEvent | undefined {\n\t\t// Iben: Early exit when we're in the browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Check if there's already a subject for this item. If not, we create one\n\t\tlet subject = record[key];\n\n\t\tif (!subject) {\n\t\t\tsubject = new BehaviorSubject(undefined);\n\t\t\tstorage[key] = subject;\n\t\t}\n\n\t\t// Iben: Store the current value of the subject\n\t\tconst oldValue = subject.getValue();\n\n\t\t// Iben: Set the item in the storage\n\t\tstorage.setItem(key, typeof item === 'string' ? item : JSON.stringify(item));\n\n\t\t// Iben: Update the subject in the record\n\t\tsubject.next(item);\n\n\t\t// Iben: Create the storage event\n\t\tconst event: NgxStorageSetEvent = {\n\t\t\tkey,\n\t\t\tnewValue: item,\n\t\t\toldValue,\n\t\t\tstorage: type,\n\t\t\ttype: 'set',\n\t\t};\n\n\t\t// Iben: Emit the storage event\n\t\tthis.storageEventSubject.next(event);\n\n\t\t// Iben: Return the storage event\n\t\treturn event;\n\t}\n\n\t/**\n\t * Remove an item from the storage and emit a remove event\n\t *\n\t * @param  key - The key of the item\n\t * @param storage - The storage we wish to remove the item from\n\t * @param record - The record with the subject\n\t * @param type - The type of storage\n\t */\n\tprivate removeItem(\n\t\tkey: string,\n\t\tstorage: Storage,\n\t\trecord: NgxStorageRecord,\n\t\ttype: NgxStorageType\n\t): NgxStorageRemoveEvent | undefined {\n\t\t// Iben: Early exit when we're not in the browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Get the old item\n\t\tconst oldValue = this.parseValue(storage.getItem(key));\n\n\t\t// Iben: Remove the item from the storage\n\t\tstorage.removeItem(key);\n\n\t\t// Iben Update the subject if it exists\n\t\trecord[key]?.next(undefined);\n\n\t\t// Iben: Create the event and return and emit it\n\t\tconst event: NgxStorageRemoveEvent = {\n\t\t\toldValue,\n\t\t\tstorage: type,\n\t\t\tkey,\n\t\t\ttype: 'remove',\n\t\t};\n\n\t\tthis.storageEventSubject.next(event);\n\t\treturn event;\n\t}\n\n\t/**\n\t * Clears the storage, completes all subjects and emits a clear event\n\t *\n\t * @param storage - The storage we wish to clear\n\t * @param record - The record with the subjects\n\t * @param type - The type of storage\n\t */\n\tprivate clearStorage(\n\t\tstorage: Storage,\n\t\trecord: NgxStorageRecord,\n\t\ttype: NgxStorageType\n\t): NgxStorageClearEvent | undefined {\n\t\t// Iben: Early exit when we're not in the browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Clear the storage\n\t\tstorage.clear();\n\n\t\t// Iben: Clear the record and complete all subjects\n\t\tObject.entries(record).forEach(([key, subject]) => {\n\t\t\tsubject.next(undefined);\n\t\t\tsubject.complete();\n\n\t\t\trecord[key] = undefined;\n\t\t});\n\n\t\t// Iben: Create and emit event\n\t\tconst event: NgxStorageClearEvent = {\n\t\t\ttype: 'clear',\n\t\t\tstorage: type,\n\t\t};\n\n\t\tthis.storageEventSubject.next(event);\n\n\t\treturn event;\n\t}\n\n\t/**\n\t * Grabs the existing storage and updates the record\n\t *\n\t * @private\n\t * @param {Storage} storage - The current state of the storage\n\t * @param {NgxStorageRecord} record\n\t * @memberof NgxStorageService\n\t */\n\tprivate setupStorage(storage: Storage, record: NgxStorageRecord) {\n\t\tObject.entries(storage).forEach(([key, value]) => {\n\t\t\trecord[key] = new BehaviorSubject(this.parseValue(value));\n\t\t});\n\t}\n\n\t/**\n\t * Parses a string value from the storage to an actual value\n\t *\n\t * @param value - The provided string value\n\t */\n\tprivate parseValue(value: string): any {\n\t\t// Iben: If the value does not exist, return the value\n\t\tif (!value) {\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: If the value is either true or false, return a boolean version of the value\n\t\tif (value === 'true' || value === 'false') {\n\t\t\treturn value === 'true';\n\t\t}\n\n\t\t// Iben: If the value is a number, return the parsed number\n\t\tif (value.match(/^[0-9]*[,.]{0,1}[0-9]*$/)) {\n\t\t\treturn Number(value);\n\t\t}\n\n\t\t// Iben: If the value is an object, return the parsed object\n\t\tif (value.match(/{(.*:.*[,]{0,1})*}/)) {\n\t\t\treturn JSON.parse(value);\n\t\t}\n\n\t\t// Iben: Return the string value as is\n\t\treturn value;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageSetEvent.html":{"url":"interfaces/NgxStorageSetEvent.html","title":"interface - NgxStorageSetEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageSetEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStorageBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            newValue\n                                        \n                                \n                                \n                                        \n                                            oldValue\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        newValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newValue:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oldValue:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStore.html":{"url":"interfaces/NgxStore.html","title":"interface - NgxStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-generator.ts\n        \n\n\n            \n                Description\n            \n            \n                The typing of the store of all sub slices\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            actions\n                                        \n                                \n                                \n                                        \n                                            reducers\n                                        \n                                \n                                \n                                        \n                                            selectors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        actions:         NgxStoreActions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxStoreActions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reducers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reducers:     ActionReducer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionReducer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectors:         NgxStoreSelectors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxStoreSelectors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\nimport { ActionReducer, Action } from '@ngrx/store';\n\nimport { BaseStoreAssets } from './base-store';\nimport { EntityStoreAssets } from './entity-store-assets';\nimport {\n\tBaseStoreAssetsGeneratorOptions,\n\tEntityStoreAssetsGeneratorOptions,\n} from './store-assets-generator-options';\n\n/**\n * These objects will be used as a blueprint for our store slices\n *\n * @template SliceKey - The keys of our store\n */\nexport interface StoreAssetsOptions {\n\tsubSlice: SliceKey;\n\tgenerator:\n\t\t| ((options: EntityStoreAssetsGeneratorOptions) => EntityStoreAssets)\n\t\t| ((options: BaseStoreAssetsGeneratorOptions) => BaseStoreAssets);\n\n\tselectId?: IdSelector;\n\tinitialValue?: any;\n}\n\n// Iben: The base type for our flow assets which we'll pass to the create generator\nexport type StoreFlowAssets = Record | BaseStoreAssets>;\n\n// Iben: Type to extract the selectors from the provided ResultType, so that we know if we have a BaseStoreSelector or an EntityStoreSelector, this way\n// we get correct typing in our services\nexport type NgxStoreSelectors = {\n\t[Key in keyof ResultType]: ResultType[Key]['selectors'];\n};\n\n// Iben: Type to extract the actions from the provided ResultType, so that we know if we have a BaseStoreAction or an EntityStoreAction, this way\n// we get correct typing in our services\ntype NgxStoreActions = {\n\t[Key in keyof ResultType]: ResultType[Key]['actions'];\n};\n\n/**\n * The typing of the store of all sub slices\n *\n * @template ResultType - The typing we wish to see for our actions, reducers and selectors\n */\nexport interface NgxStore {\n\tselectors: NgxStoreSelectors;\n\tactions: NgxStoreActions;\n\treducers: ActionReducer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxStoreService.html":{"url":"injectables/NgxStoreService.html","title":"injectable - NgxStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/abstracts/store.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stateWrapper\n                            \n                            \n                                    Protected\n                                    Readonly\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                selectErrorFromStore\n                            \n                            \n                                    Public\n                                selectErrorMessageFromStore\n                            \n                            \n                                    Public\n                                selectFromStore\n                            \n                            \n                                    Public\n                                selectLoadingFromStore\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    state\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(selectors?: NgxStoreSelectors)\n                    \n                \n                        \n                            \n                                Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        selectors\n                                                  \n                                                        \n                                                                        NgxStoreSelectors\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Select the error state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorMessageFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorMessageFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:69\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ErrorMessage\n                            \n                        \n                    \n\n            \n                \n                        Select the error message state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:42\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    StoreItem\n                            \n                        \n                    \n\n            \n                \n                        Select the data of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectLoadingFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectLoadingFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Select the loading state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stateWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StoreState\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:13\n                        \n                    \n\n            \n                \n                    A wrapper object for the store state selectors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:78\n                                \n                            \n                    \n                        \n                                An object that holds all the state selectors of the provided store slice.\nThe generated selectors need to be provided to the constructor of the service in order for this object not to be undefined.\n\n\n                                \n                                    Returns :         StoreState\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Inject, inject, Injectable, Optional } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { NgxStoreSelectors, StoreFlowAssets, StoreState } from '../interfaces';\n\n@Injectable()\nexport class NgxStoreService {\n\t/**\n\t * A wrapper object for the store state selectors\n\t */\n\tprivate stateWrapper: StoreState;\n\n\tprotected readonly store: Store = inject(Store);\n\n\tconstructor(\n\t\t@Optional()\n\t\t@Inject('selectors')\n\t\tselectors?: NgxStoreSelectors\n\t) {\n\t\t// Iben: If the selectors are provided, we create an object that will create an object with selectors for each slice in the state\n\t\tif (selectors) {\n\t\t\tthis.stateWrapper = Object.keys(selectors).reduce((previous, key) => {\n\t\t\t\treturn {\n\t\t\t\t\t...previous,\n\t\t\t\t\t[`${key}$`]: this.selectFromStore(selectors[key]),\n\t\t\t\t\t[`${key}Loading$`]: this.selectLoadingFromStore(selectors[key]),\n\t\t\t\t\t[`${key}Error$`]: this.selectErrorFromStore(selectors[key]),\n\t\t\t\t\t[`${key}ErrorMessage$`]: this.selectErrorMessageFromStore(selectors[key]),\n\t\t\t\t};\n\t\t\t}, {}) as StoreState;\n\t\t}\n\t}\n\n\t/**\n\t * Select the data of a store slice\n\t *\n\t * @template StoreItem - The interface of the selected item/items\n\t * @param selector - The selector object\n\t */\n\tpublic selectFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.select || selector.selectAll));\n\t}\n\n\t/**\n\t * Select the loading state of a store slice\n\t *\n\t * @param selector - The selector object\n\t */\n\tpublic selectLoadingFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.loading || selector.selectLoading));\n\t}\n\n\t/**\n\t * Select the error state of a store slice\n\t *\n\t * @param selector - The selector object\n\t */\n\tpublic selectErrorFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.error || selector.selectError));\n\t}\n\n\t/**\n\t * Select the error message state of a store slice\n\t *\n\t * @param selector - The selector object\n\t */\n\tpublic selectErrorMessageFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.errorMessage || selector.selectErrorMessage));\n\t}\n\n\t/**\n\t * An object that holds all the state selectors of the provided store slice.\n\t *\n\t * The generated selectors need to be provided to the constructor of the service in order for this object not to be undefined.\n\t */\n\tpublic get state(): StoreState {\n\t\t// Iben: If no selectors were provided, we throw an error informing the user\n\t\tif (!this.stateWrapper) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxStore: No selectors were provided to the constructor of the NgxStoreService extender. Without it, the state object cannot be created and will result in an error.'\n\t\t\t);\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Return the stateWrapper\n\t\treturn this.stateWrapper;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableCellDirective.html":{"url":"directives/NgxTableCellDirective.html","title":"directive - NgxTableCellDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableCellDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/components/cell/generic-cell.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxAbstractTableCellDirective\n            \n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Providers\n                        \n                            \n                                {\n    provide: NgxAbstractTableCellDirective, useExisting: NgxTableCellDirective,\n}\n                            \n                        \n                    \n\n                    \n                        Selector\n                        ngx-table-cell\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    \n                                cellTemplate\n                            \n                            \n                                    \n                                    Public\n                                    \n                                footerTemplate\n                            \n                            \n                                    \n                                    Public\n                                    \n                                headerTemplate\n                            \n                            \n                                    Public\n                                cellClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:31\n\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:42\n\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:47\n\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:36\n\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:57\n\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:82\n\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:91\n\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('cellTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:27\n\n                        \n                    \n\n            \n                \n                    A template for the body of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('footerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:33\n\n                        \n                    \n\n            \n                \n                    A template for the footer of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('headerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:21\n\n                        \n                    \n\n            \n                \n                    A template for the header of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:26\n\n                        \n                    \n\n            \n                \n                    An optional class that can be set for the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:31\n\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:42\n\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:47\n\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:52\n\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:36\n\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:14\n\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { ContentChild, Directive, TemplateRef } from '@angular/core';\n\nimport { NgxAbstractTableCellDirective } from './cell.directive';\n\n@Directive({\n\tselector: 'ngx-table-cell',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NgxAbstractTableCellDirective,\n\t\t\tuseExisting: NgxTableCellDirective,\n\t\t},\n\t],\n\tstandalone: true,\n})\nexport class NgxTableCellDirective extends NgxAbstractTableCellDirective {\n\t/**\n\t * A template for the header of the cell\n\t */\n\n\t@ContentChild('headerTmpl', { static: false })\n\tpublic override headerTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the body of the cell\n\t */\n\n\t@ContentChild('cellTmpl', { static: false })\n\tpublic override cellTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the footer of the cell\n\t */\n\n\t@ContentChild('footerTmpl', { static: false })\n\tpublic override footerTemplate: TemplateRef = undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableConfiguration.html":{"url":"interfaces/NgxTableConfiguration.html","title":"interface - NgxTableConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/tokens/ngx-table-config.token.ts\n        \n\n\n            \n                Description\n            \n            \n                A configuration we can provide to set properties of the table globally\nshowDetailRow - Defines the default open behavior of detail rows. 'always' will open all rows by default, 'on-click' will only open them on click, 'on-single-item' will open the row on click and when there's only one item in the table.\nngxTableClass - A default class that will be set on the ngx-table component itself\nshowOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\nallowMultipleRowsOpen - Defines whether multiple rows can be open at once.\nshowOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\nshowSelectedOpenRow - Defines whether we want a class to be added to the currently opened row\nemitValueOnSingleItem - Defines whether we want to emit the rowClicked when there's only one item in the table and the showDetailRow is set to 'on-single-item'\nhideHeaderWhen - Defines whether we want to show the header when the table is empty or loading\ncomponents - A set of components we can use as defaults for the loading, error and empty state of the\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowMultipleRowsOpen\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            components\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            emitValueOnSingleItem\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideHeaderWhen\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            highlightKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ngxTableClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showDetailRow\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showOpenRowState\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showSelectedOpenRow\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowMultipleRowsOpen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowMultipleRowsOpen:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        components\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        components:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emitValueOnSingleItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emitValueOnSingleItem:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideHeaderWhen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideHeaderWhen:         HideHeaderRowOption\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HideHeaderRowOption\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        highlightKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        highlightKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ngxTableClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ngxTableClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showDetailRow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showDetailRow:         ShowDetailRowOption\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ShowDetailRowOption\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showOpenRowState\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showOpenRowState:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showSelectedOpenRow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showSelectedOpenRow:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken, Type } from '@angular/core';\n\nimport {\n\tNgxDisplayContentComponent,\n\tNgxTableOpenRowStateTemplateAbstractComponent,\n\tNgxTableSelectTemplateAbstractComponent,\n\tNgxTableSortTemplateAbstractComponent,\n} from '../abstracts';\n\ntype HideHeaderRowOptions = 'when-loading' | 'when-empty';\nexport type HideHeaderRowOption =\n\t| 'never'\n\t| [HideHeaderRowOptions]\n\t| [HideHeaderRowOptions, HideHeaderRowOptions];\nexport type ShowDetailRowOption = 'always' | 'on-click' | 'on-single-item';\n\n/**\n * A configuration we can provide to set properties of the table globally\n *\n * showDetailRow - Defines the default open behavior of detail rows. 'always' will open all rows by default, 'on-click' will only open them on click, 'on-single-item' will open the row on click and when there's only one item in the table.\n * ngxTableClass - A default class that will be set on the ngx-table component itself\n * showOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\n * allowMultipleRowsOpen - Defines whether multiple rows can be open at once.\n * showOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\n * showSelectedOpenRow - Defines whether we want a class to be added to the currently opened row\n * emitValueOnSingleItem - Defines whether we want to emit the rowClicked when there's only one item in the table and the showDetailRow is set to 'on-single-item'\n * hideHeaderWhen - Defines whether we want to show the header when the table is empty or loading\n * components - A set of components we can use as defaults for the loading, error and empty state of the\n */\nexport interface NgxTableConfiguration {\n\tshowDetailRow?: ShowDetailRowOption;\n\tngxTableClass?: string;\n\tshowOpenRowState?: boolean;\n\tallowMultipleRowsOpen?: boolean;\n\thighlightKey?: string;\n\tshowSelectedOpenRow?: boolean;\n\temitValueOnSingleItem?: boolean;\n\thideHeaderWhen?: HideHeaderRowOption;\n\tcomponents?: {\n\t\tloading?: Type;\n\t\tempty?: Type;\n\t\tradio?: Type;\n\t\tcheckbox?: Type;\n\t\topenRowState?: Type;\n\t\tsort?: Type;\n\t};\n}\n\nexport const NgxTableConfigurationToken = new InjectionToken(\n\t'NgxTableConfiguration'\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableCypressDataTagsBase.html":{"url":"interfaces/NgxTableCypressDataTagsBase.html","title":"interface - NgxTableCypressDataTagsBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableCypressDataTagsBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/show-header-requirements.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cell\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            header\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cell\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cell:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        header\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        header:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequireAtLeastOne } from './internal-helpers';\n\nexport interface NgxTableShowHeaderRequirements {\n\tisLoading: boolean;\n\tisEmpty: boolean;\n}\n\ninterface NgxTableCypressDataTagsBase {\n\theader?: string;\n\tcell?: string;\n\tfooter?: string;\n}\n\nexport type NgxTableCypressDataTags = RequireAtLeastOne;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableGetPipe.html":{"url":"pipes/NgxTableGetPipe.html","title":"pipe - NgxTableGetPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableGetPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/get-pipe/get.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                This pipe returns a value based on a provided path\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        getProp\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value, path: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/get-pipe/get.pipe.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport { get } from 'lodash';\n\n/**\n * This pipe returns a value based on a provided path\n *\n * @export\n * @class NgxTableGetPipe\n * @implements {PipeTransform}\n */\n@Pipe({\n\tname: 'getProp',\n\tstandalone: true,\n})\nexport class NgxTableGetPipe implements PipeTransform {\n\tpublic transform(value: unknown, path: string): any {\n\t\t// Iben: Check if the value is not an object and return an empty string so the frontend doesn't break and warn the user\n\t\tif (typeof value !== 'object' || Array.isArray(value) || value === null) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxTableGetPipe encountered a value that was not an object and returned an empty string instead.'\n\t\t\t);\n\n\t\t\treturn '';\n\t\t}\n\n\t\t// Iben: If no path was provided, we return the value and warn the user\n\t\tif (!path) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxTableGetPipe did not receive a path to a property and returned an empty string instead.'\n\t\t\t);\n\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: Return the property\n\t\treturn get(value, path);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableHasObserversPipe.html":{"url":"pipes/NgxTableHasObserversPipe.html","title":"pipe - NgxTableHasObserversPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableHasObserversPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/has-observers/has-observers.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxTableHasObservers\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(output: OutputEmitterRef<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/has-observers/has-observers.pipe.ts:13\n                        \n                    \n\n\n            \n                \n                        Returns true in case an observer was set to an EventEmitter\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                output\n                                            \n                                                        OutputEmitterRef<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided EventEmitter\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe,PipeTransform,OutputEmitterRef } from '@angular/core';\n\n@Pipe({\n\tname: 'ngxTableHasObservers',\n\tstandalone: true,\n})\nexport class NgxTableHasObserversPipe implements PipeTransform {\n\t/**\n\t * Returns true in case an observer was set to an EventEmitter\n\t *\n\t * @param output - The provided EventEmitter\n\t */\n  public transform ( output: OutputEmitterRef ): boolean {\n\t\treturn output && output['listeners']?.length > 0;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{"url":"directives/NgxTableOpenRowStateTemplateAbstractComponent.html","title":"directive - NgxTableOpenRowStateTemplateAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableOpenRowStateTemplateAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component provided for the NgxTableComponent, allowing to user to set a default open row state template for all tables\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                index\n                            \n                            \n                                    Public\n                                isOpen\n                            \n                            \n                                    Public\n                                row\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                index\n                            \n                            \n                                isOpen\n                            \n                            \n                                row\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:22\n                            \n                        \n                \n                    \n                        The index of the row\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isOpen\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:12\n                            \n                        \n                \n                    \n                        The current open state the component has to visualize\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        row\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:17\n                            \n                        \n                \n                    \n                        The row data\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:22\n                        \n                    \n\n            \n                \n                    The index of the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:12\n                        \n                    \n\n            \n                \n                    The current open state the component has to visualize\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        row\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:17\n                        \n                    \n\n            \n                \n                    The row data\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input, InputSignal } from '@angular/core';\n\n/**\n * An abstract component provided for the NgxTableComponent, allowing to user to set a default open row state template for all tables\n *\n */\n@Directive()\nexport abstract class NgxTableOpenRowStateTemplateAbstractComponent {\n\t/**\n\t * The current open state the component has to visualize\n\t */\n\tpublic isOpen: InputSignal = input();\n\n\t/**\n\t * The row data\n\t */\n\tpublic row: InputSignal = input();\n\n\t/**\n\t * The index of the row\n\t */\n\tpublic index: InputSignal = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableSelectTemplateAbstractComponent.html":{"url":"directives/NgxTableSelectTemplateAbstractComponent.html","title":"directive - NgxTableSelectTemplateAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableSelectTemplateAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/table/select-template.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component provided for the NgxTableComponent, allowing to user to set a default select template for all tables\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                control\n                            \n                            \n                                    Public\n                                index\n                            \n                            \n                                    Public\n                                row\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                control\n                            \n                            \n                                index\n                            \n                            \n                                row\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        control\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:13\n                            \n                        \n                \n                    \n                        The control we wish to pass to the input\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:23\n                            \n                        \n                \n                    \n                        The index of the row\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        row\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:18\n                            \n                        \n                \n                    \n                        The row that is visualized\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:13\n                        \n                    \n\n            \n                \n                    The control we wish to pass to the input\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:23\n                        \n                    \n\n            \n                \n                    The index of the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        row\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:18\n                        \n                    \n\n            \n                \n                    The row that is visualized\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input, InputSignal } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n/**\n * An abstract component provided for the NgxTableComponent, allowing to user to set a default select template for all tables\n *\n */\n@Directive()\nexport abstract class NgxTableSelectTemplateAbstractComponent {\n\t/**\n\t * The control we wish to pass to the input\n\t */\n\tpublic control: InputSignal> = input();\n\n\t/**\n\t * The row that is visualized\n\t */\n\tpublic row: InputSignal = input();\n\n\t/**\n\t * The index of the row\n\t */\n\tpublic index: InputSignal = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableShowHeaderPipe.html":{"url":"pipes/NgxTableShowHeaderPipe.html","title":"pipe - NgxTableShowHeaderPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableShowHeaderPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/show-header/show-header.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                This pipe returns whether we want to show the header\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxTableShowHeader\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: NgxTableShowHeaderRequirements, hideHeaderRowWhen: HideHeaderRowOption)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/show-header/show-header.pipe.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            NgxTableShowHeaderRequirements\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hideHeaderRowWhen\n                                            \n                                                            HideHeaderRowOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { HideHeaderRowOption } from '../../tokens';\nimport { NgxTableShowHeaderRequirements } from '../../types';\n\n/**\n * This pipe returns whether we want to show the header\n *\n * @export\n * @class NgxTableShowHeaderPipe\n * @implements {PipeTransform}\n */\n@Pipe({\n\tname: 'ngxTableShowHeader',\n\tstandalone: true,\n})\nexport class NgxTableShowHeaderPipe implements PipeTransform {\n\tpublic transform(\n\t\tvalue: NgxTableShowHeaderRequirements,\n\t\thideHeaderRowWhen: HideHeaderRowOption\n\t): boolean {\n\t\t// Iben: If we never want to hide the header row, we return true\n\t\tif (hideHeaderRowWhen === 'never') {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Iben: Check if the value is not an object and return an empty string so the frontend doesn't break and warn the user\n\t\tif (typeof value !== 'object' || !value) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxTableShowHeaderPipe encountered a value that was not an object and showed the header.'\n\t\t\t);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Iben: Add to set for better performance\n\t\tconst options = new Set(hideHeaderRowWhen);\n\n\t\t// Iben: Check which cases need the header to be hidden, and then flip it\n\t\treturn !(\n\t\t\t(options.has('when-empty') && value.isEmpty) ||\n\t\t\t(options.has('when-loading') && value.isLoading)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableShowHeaderRequirements.html":{"url":"interfaces/NgxTableShowHeaderRequirements.html","title":"interface - NgxTableShowHeaderRequirements","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableShowHeaderRequirements\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/show-header-requirements.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isEmpty\n                                        \n                                \n                                \n                                        \n                                            isLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isEmpty\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isEmpty:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequireAtLeastOne } from './internal-helpers';\n\nexport interface NgxTableShowHeaderRequirements {\n\tisLoading: boolean;\n\tisEmpty: boolean;\n}\n\ninterface NgxTableCypressDataTagsBase {\n\theader?: string;\n\tcell?: string;\n\tfooter?: string;\n}\n\nexport type NgxTableCypressDataTags = RequireAtLeastOne;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableSortEvent.html":{"url":"interfaces/NgxTableSortEvent.html","title":"interface - NgxTableSortEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableSortEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/sort-event.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            column\n                                        \n                                \n                                \n                                        \n                                            direction\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        column:     ColumnKey\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ColumnKey\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        direction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        direction:         NgxTableSortDirection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTableSortDirection\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NgxTableSortDirection } from '../enums/sort-direction.enum';\n\nexport interface NgxTableSortEvent {\n\tdirection: NgxTableSortDirection;\n\tcolumn: ColumnKey;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableSortIconPipe.html":{"url":"pipes/NgxTableSortIconPipe.html","title":"pipe - NgxTableSortIconPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableSortIconPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/sort-icon/sort-icon.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxTableSortIcon\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(direction: null | NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/sort-icon/sort-icon.pipe.ts:15\n                        \n                    \n\n\n            \n                \n                        Returns a icon based on the provided sort direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            null | NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided sort direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { NgxTableSortDirection } from '../../enums';\n\n@Pipe({\n\tname: 'ngxTableSortIcon',\n\tstandalone: true,\n})\nexport class NgxTableSortIconPipe implements PipeTransform {\n\t/**\n\t * Returns a icon based on the provided sort direction\n\t *\n\t * @param direction - The provided sort direction\n\t */\n\tpublic transform(direction: null | NgxTableSortDirection): string {\n\t\tif (!direction) {\n\t\t\treturn '&equiv;';\n\t\t}\n\n\t\treturn direction === NgxTableSortDirection.ASCENDING ? '&uArr;' : '&dArr;';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableSortTemplateAbstractComponent.html":{"url":"directives/NgxTableSortTemplateAbstractComponent.html","title":"directive - NgxTableSortTemplateAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableSortTemplateAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/table/sort-template.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component provided for the NgxTableComponent, allowing to user to set a default sort template for all tables\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                direction\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                direction\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        direction\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/sort-template.component.ts:14\n                            \n                        \n                \n                    \n                        The current sort direction the component has to visualize\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/sort-template.component.ts:14\n                        \n                    \n\n            \n                \n                    The current sort direction the component has to visualize\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input, InputSignal} from '@angular/core';\n\nimport { NgxTableSortDirection } from '../../enums';\n\n/**\n * An abstract component provided for the NgxTableComponent, allowing to user to set a default sort template for all tables\n *\n */\n@Directive()\nexport abstract class NgxTableSortTemplateAbstractComponent {\n\t/**\n\t * The current sort direction the component has to visualize\n\t */\n\tpublic direction: InputSignal = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToast.html":{"url":"interfaces/NgxToast.html","title":"interface - NgxToast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The interface for a toast in the NgxToastService\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            configuration\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            toBeRemoved\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        configuration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        configuration:         NgxToastConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxToastConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        toBeRemoved\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        toBeRemoved:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\ttoBeRemoved?: boolean;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxToastBundlerComponent.html":{"url":"directives/NgxToastBundlerComponent.html","title":"directive - NgxToastBundlerComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxToastBundlerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/toast/toast-bundler.component.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                amount\n                            \n                            \n                                    Private\n                                    Readonly\n                                toastService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                showBundled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                amount\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        amount\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/toast/toast-bundler.component.ts:16\n                            \n                        \n                \n                    \n                        The amount of toasts that are left and currently not shown\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showBundled\n                        \n                    \n                \n            \n            \n                \n                        \n                    showBundled()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/toast/toast-bundler.component.ts:21\n                        \n                    \n\n\n            \n                \n                        Shows all the toasts that were bundled\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/toast/toast-bundler.component.ts:16\n                        \n                    \n\n            \n                \n                    The amount of toasts that are left and currently not shown\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        toastService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxToastService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxToastService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/toast/toast-bundler.component.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, inject, input, InputSignal } from '@angular/core';\n\nimport { NgxToastService } from '../../services';\n\n@Directive({\n\thost: {\n\t\t'attr.role': 'alert',\n\t},\n})\nexport abstract class NgxToastBundlerComponent {\n\tprivate readonly toastService: NgxToastService = inject(NgxToastService);\n\n\t/**\n\t * The amount of toasts that are left and currently not shown\n\t */\n\tpublic readonly amount: InputSignal = input.required();\n\n\t/**\n\t * Shows all the toasts that were bundled\n\t */\n\tpublic showBundled(): void {\n\t\tthis.toastService.showBundled();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxToastComponent.html":{"url":"directives/NgxToastComponent.html","title":"directive - NgxToastComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxToastComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/toast/toast.component.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toast\n                            \n                            \n                                    Private\n                                    Readonly\n                                toastService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                toast\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        toast\n                    \n                \n                \n                    \n                        Type :         InputSignal>\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:20\n                            \n                        \n                \n                    \n                        The toast we wish to show\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        close\n                        \n                    \n                \n            \n            \n                \n                        \n                    close()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:30\n                        \n                    \n\n\n            \n                \n                        Removes the toast from the DOM after the animation is played\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toast\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:20\n                        \n                    \n\n            \n                \n                    The toast we wish to show\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        toastService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxToastService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxToastService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:15\n                        \n                    \n\n            \n                \n                    Instance of the toast service\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { AfterViewInit, Directive, inject, input, InputSignal } from '@angular/core';\n\nimport { NgxToastService } from '../../services';\nimport { NgxToast } from '../../types';\n\n@Directive({\n\thost: {\n\t\t'attr.role': 'alert',\n\t},\n})\nexport abstract class NgxToastComponent implements AfterViewInit {\n\t/**\n\t * Instance of the toast service\n\t */\n\tprivate readonly toastService: NgxToastService = inject(NgxToastService);\n\n\t/**\n\t * The toast we wish to show\n\t */\n\tpublic toast: InputSignal> = input.required();\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Mark the toast as rendered so it can auto remove itself if need be\n\t\tthis.toastService.markAsRendered(this.toast());\n\t}\n\n\t/**\n\t * Removes the toast from the DOM after the animation is played\n\t */\n\tpublic close(): void {\n\t\tthis.toastService.removeToast(this.toast());\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastConfiguration.html":{"url":"interfaces/NgxToastConfiguration.html","title":"interface - NgxToastConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration for an individual toast\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoClose\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hasPriority\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoClose\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoClose:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hasPriority\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hasPriority:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\ttoBeRemoved?: boolean;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxToastContainerComponent.html":{"url":"components/NgxToastContainerComponent.html","title":"component - NgxToastContainerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxToastContainerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-toast-container\n            \n\n\n            \n                imports\n                \n                            NgComponentOutlet\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./toast-container.component.html\n            \n\n\n\n            \n                styleUrl\n                ./toast-container.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                bundledComponent\n                            \n                            \n                                    Public\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                hasBundledToasts\n                            \n                            \n                                    Public\n                                toasts\n                            \n                            \n                                    Private\n                                    Readonly\n                                toastService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus(hasFocus: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:52\n                        \n                    \n\n\n            \n                \n                        Set whether the element has focus\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                hasFocus\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        bundledComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Type\n\n                    \n                \n                \n                    \n                        Default value : this.toastService.bundledComponent\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:45\n                        \n                    \n\n            \n                \n                    A component that will display the amount of bundled toasts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxToastDefaultConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxToastConfigurationToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:28\n                        \n                    \n\n            \n                \n                    The default configuration provided for the toast\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasBundledToasts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.toastService.hasBundledToasts\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:40\n                        \n                    \n\n            \n                \n                    Whether there are bundled toasts that aren't currently visible\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toasts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : this.toastService.toasts\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:35\n                        \n                    \n\n            \n                \n                    A list of toasts to display\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        toastService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxToastService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxToastService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:23\n                        \n                    \n\n            \n                \n                    The default configuration required for the toast\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgComponentOutlet } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, inject, Signal, Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent } from '../../abstracts';\nimport { NgxToastService } from '../../services';\nimport { NgxToastConfigurationToken } from '../../tokens';\nimport { NgxToast, NgxToastDefaultConfiguration } from '../../types';\n\n@Component({\n\tselector: 'ngx-toast-container',\n\ttemplateUrl: './toast-container.component.html',\n\tstyleUrl: './toast-container.component.scss',\n\timports: [NgComponentOutlet],\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\thost: {\n\t\tclass: 'ngx-toast-container',\n\t},\n})\nexport class NgxToastContainerComponent {\n\t/**\n\t * The default configuration required for the toast\n\t */\n\tprivate readonly toastService: NgxToastService = inject(NgxToastService);\n\n\t/**\n\t * The default configuration provided for the toast\n\t */\n\tpublic readonly configuration: NgxToastDefaultConfiguration = inject(\n\t\tNgxToastConfigurationToken\n\t);\n\n\t/**\n\t * A list of toasts to display\n\t */\n\tpublic toasts: Signal = this.toastService.toasts;\n\n\t/**\n\t * Whether there are bundled toasts that aren't currently visible\n\t */\n\tpublic hasBundledToasts: Signal = this.toastService.hasBundledToasts;\n\n\t/**\n\t * A component that will display the amount of bundled toasts\n\t */\n\tpublic bundledComponent: Type = this.toastService.bundledComponent;\n\n\t/**\n\t * Set whether the element has focus\n\t *\n\t * @param hasFocus\n\t */\n\tpublic setFocus(hasFocus: boolean): void {\n\t\tthis.toastService.setFocus(hasFocus);\n\t}\n}\n\n    \n\n    \n        @if(toasts().length > 0) {\n\n\t@for (toast of toasts(); track toast.id) {\n\t\n\t\t\n\t\n\t} @if(hasBundledToasts()) {\n\t\n\t\t\n\t\n\t}\n\n}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if(toasts().length > 0) {\t@for (toast of toasts(); track toast.id) {\t\t\t\t\t} @if(hasBundledToasts()) {\t\t\t\t\t}}'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxToastContainerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastDefaultConfiguration.html":{"url":"interfaces/NgxToastDefaultConfiguration.html","title":"interface - NgxToastDefaultConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastDefaultConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration we wish to apply to every toast unless we override it\n\n            \n\n            \n                Extends\n            \n            \n                        Omit\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxAmount\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxTime\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxAmount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxAmount:         NgxToastMaxAmountConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxToastMaxAmountConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxTime:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxToastPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxToastPosition\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\ttoBeRemoved?: boolean;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastEvent.html":{"url":"interfaces/NgxToastEvent.html","title":"interface - NgxToastEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                An event for when toasts are shown, updated or removed\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            toast\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        toast\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        toast:         NgxToast\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxToast\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"add\" | \"remove\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"add\" | \"remove\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\ttoBeRemoved?: boolean;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{"url":"interfaces/NgxToastMaxAmountBaseConfiguration.html","title":"interface - NgxToastMaxAmountBaseConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastMaxAmountBaseConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The base configuration for a toast setup with a max amount\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            amount\n                                        \n                                \n                                \n                                        \n                                            strategy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        amount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        amount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        strategy:     \"wait\" | \"ignore\" | \"bundle\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"wait\" | \"ignore\" | \"bundle\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\ttoBeRemoved?: boolean;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{"url":"interfaces/NgxToastMaxAmountBundleConfiguration.html","title":"interface - NgxToastMaxAmountBundleConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastMaxAmountBundleConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration for a toast setup with a max amount that need to be bundled\n\n            \n\n            \n                Extends\n            \n            \n                            NgxToastMaxAmountBaseConfiguration\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            strategy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        strategy:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\ttoBeRemoved?: boolean;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{"url":"interfaces/NgxToastMaxAmountOtherConfiguration.html","title":"interface - NgxToastMaxAmountOtherConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastMaxAmountOtherConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The base configuration for a toast setup with a max amount that is not bundled\n\n            \n\n            \n                Extends\n            \n            \n                            NgxToastMaxAmountBaseConfiguration\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            strategy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        strategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        strategy:     \"wait\" | \"ignore\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"wait\" | \"ignore\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\ttoBeRemoved?: boolean;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxToastService.html":{"url":"injectables/NgxToastService.html","title":"injectable - NgxToastService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxToastService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/services/toast/toast.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that acts as the single source of truth in the application\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                bundledComponent\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                hasBundledToasts\n                            \n                            \n                                    Private\n                                isFocussed\n                            \n                            \n                                    Private\n                                queue$\n                            \n                            \n                                    Private\n                                showBundledToasts$\n                            \n                            \n                                    Private\n                                toastEvents$\n                            \n                            \n                                    Public\n                                toasts\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                markAsRendered\n                            \n                            \n                                    Public\n                                removeToast\n                            \n                            \n                                    Public\n                                setFocus\n                            \n                            \n                                    Public\n                                showBundled\n                            \n                            \n                                    Public\n                                showToast\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:96\n                            \n                        \n\n                \n                    \n                            Creates an instance of NgxToastService.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAsRendered\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsRendered(toast: NgxToast)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:222\n                        \n                    \n\n\n            \n                \n                        Mark the toast as rendered, so that we can automatically remove it if needed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                toast\n                                            \n                                                            NgxToast\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe toast we wish to remove if needed\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeToast\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeToast(toast: NgxToast)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:186\n                        \n                    \n\n\n            \n                \n                        Removes a toast based on the provided id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                toast\n                                            \n                                                            NgxToast\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe toast we wish to remove\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus(hasFocus: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:213\n                        \n                    \n\n\n            \n                \n                        Sets whether the list of toasts is currently being focussed on by the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                hasFocus\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether or not it is being focussed\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showBundled\n                        \n                    \n                \n            \n            \n                \n                        \n                    showBundled()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:243\n                        \n                    \n\n\n            \n                \n                        Shows the bundled toasts in case there are\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showToast\n                        \n                    \n                \n            \n            \n                \n                        \n                    showToast(data: NgxToastCreator | string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:155\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Displays a provided toast and returns the generated id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            NgxToastCreator | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data needed for the toast\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxToast\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        bundledComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Type\n\n                    \n                \n                \n                    \n                        Default value : this.configuration?.maxAmount?.['component']\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:95\n                        \n                    \n\n            \n                \n                    The component used to represent the bundled toasts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxToastDefaultConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxToastConfigurationToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:37\n                        \n                    \n\n            \n                \n                    The default configuration required for the toast\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasBundledToasts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n\t\tif (!this.configuration.maxAmount || this.configuration.maxAmount.strategy !== 'bundle') {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn this.queue$.getValue().length - this.toasts().length;\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:84\n                        \n                    \n\n            \n                \n                    The amount of bundled toasts there are\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isFocussed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:59\n                        \n                    \n\n            \n                \n                    Whether the list of all toasts is focussed upon, either by focus or by hover\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        queue$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:44\n                        \n                    \n\n            \n                \n                    The queue with all the toasts in it\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showBundledToasts$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:54\n                        \n                    \n\n            \n                \n                    Whether we want to show the bundled toasts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        toastEvents$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:49\n                        \n                    \n\n            \n                \n                    The toast event handler that will handle updates to the queue\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toasts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : toSignal(\n\t\tcombineLatest([this.queue$, this.showBundledToasts$]).pipe(\n\t\t\tmap(([toasts, showBundled]) => {\n\t\t\t\t// Iben: Prevent duplicates\n\t\t\t\tconst result = uniqBy(toasts, (item) => item.id) || [];\n\n\t\t\t\t// Iben: If there is no max amount, we return the toasts as is\n\t\t\t\tif (!this.configuration.maxAmount || showBundled) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Iben: If the there is a max amount, we return the limited list\n\t\t\t\treturn result.slice(0, this.configuration.maxAmount.amount);\n\t\t\t})\n\t\t)\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:64\n                        \n                    \n\n            \n                \n                    A list of all the currently visible toasts\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { computed, inject, Injectable, Signal, Type } from '@angular/core';\nimport { takeUntilDestroyed, toSignal } from '@angular/core/rxjs-interop';\nimport { uniqBy } from 'lodash';\nimport {\n\tBehaviorSubject,\n\tcombineLatest,\n\tconcatMap,\n\tdistinctUntilChanged,\n\tfilter,\n\tmap,\n\tof,\n\tSubject,\n\ttap,\n\twithLatestFrom,\n} from 'rxjs';\nimport { v7 as uuid } from 'uuid';\n\nimport { NgxToastBundlerComponent } from '../../abstracts';\nimport { NgxToastConfigurationToken } from '../../tokens';\nimport {\n\tNgxToast,\n\tNgxToastCreator,\n\tNgxToastDefaultConfiguration,\n\tNgxToastEvent,\n} from '../../types/toast.types';\n\n/**\n * A service that acts as the single source of truth in the application\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxToastService {\n\t/**\n\t * The default configuration required for the toast\n\t */\n\tprivate readonly configuration: NgxToastDefaultConfiguration = inject(\n\t\tNgxToastConfigurationToken\n\t);\n\n\t/**\n\t * The queue with all the toasts in it\n\t */\n\tprivate queue$: BehaviorSubject = new BehaviorSubject([]);\n\n\t/**\n\t * The toast event handler that will handle updates to the queue\n\t */\n\tprivate toastEvents$: Subject = new Subject();\n\n\t/**\n\t * Whether we want to show the bundled toasts\n\t */\n\tprivate showBundledToasts$: BehaviorSubject = new BehaviorSubject(false);\n\n\t/**\n\t * Whether the list of all toasts is focussed upon, either by focus or by hover\n\t */\n\tprivate isFocussed: boolean = false;\n\n\t/**\n\t * A list of all the currently visible toasts\n\t */\n\tpublic toasts: Signal = toSignal(\n\t\tcombineLatest([this.queue$, this.showBundledToasts$]).pipe(\n\t\t\tmap(([toasts, showBundled]) => {\n\t\t\t\t// Iben: Prevent duplicates\n\t\t\t\tconst result = uniqBy(toasts, (item) => item.id) || [];\n\n\t\t\t\t// Iben: If there is no max amount, we return the toasts as is\n\t\t\t\tif (!this.configuration.maxAmount || showBundled) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Iben: If the there is a max amount, we return the limited list\n\t\t\t\treturn result.slice(0, this.configuration.maxAmount.amount);\n\t\t\t})\n\t\t)\n\t);\n\n\t/**\n\t * The amount of bundled toasts there are\n\t */\n\tpublic hasBundledToasts: Signal = computed(() => {\n\t\tif (!this.configuration.maxAmount || this.configuration.maxAmount.strategy !== 'bundle') {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn this.queue$.getValue().length - this.toasts().length;\n\t});\n\n\t/**\n\t * The component used to represent the bundled toasts\n\t */\n\tpublic bundledComponent: Type =\n\t\tthis.configuration?.maxAmount?.['component'];\n\n\t/**\n\t * Creates an instance of NgxToastService.\n\t */\n\tconstructor() {\n\t\t// Iben: Subscribe to the toast events\n\t\tthis.toastEvents$\n\t\t\t.pipe(\n\t\t\t\t// Iben: Concatmap all the events so we will handle them one by one\n\t\t\t\tconcatMap((event) => {\n\t\t\t\t\t// Iben: Get the latest version of the queue\n\t\t\t\t\treturn of(event).pipe(\n\t\t\t\t\t\twithLatestFrom(this.queue$),\n\t\t\t\t\t\ttap(([{ toast, type }, queue]) => {\n\t\t\t\t\t\t\t// Iben: If we need to add the item to the queue, we add it based on its priority\n\t\t\t\t\t\t\tif (type === 'add') {\n\t\t\t\t\t\t\t\tthis.queue$.next(\n\t\t\t\t\t\t\t\t\ttoast.configuration?.hasPriority\n\t\t\t\t\t\t\t\t\t\t? [toast, ...queue]\n\t\t\t\t\t\t\t\t\t\t: [...queue, toast]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Iben: Get the index of the toast we need to update or remove\n\t\t\t\t\t\t\tconst index = queue.findIndex(({ id }) => id === toast.id);\n\n\t\t\t\t\t\t\t// Iben: Remove the toast when needed\n\t\t\t\t\t\t\tthis.queue$.next([...queue.slice(0, index), ...queue.slice(index + 1)]);\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t\ttakeUntilDestroyed()\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t/**\n\t\t * Listens to the amount of items in the queue and resets the showBundledToasts accordingly\n\t\t */\n\t\tthis.queue$\n\t\t\t.pipe(\n\t\t\t\tmap((toasts) => toasts.length),\n\t\t\t\tdistinctUntilChanged(),\n\t\t\t\tfilter((length) => !length),\n\t\t\t\ttap(() => {\n\t\t\t\t\tthis.showBundledToasts$.next(false);\n\t\t\t\t}),\n\t\t\t\ttakeUntilDestroyed()\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Displays a provided toast and returns the generated id\n\t *\n\t * @param data - The data needed for the toast\n\t */\n\tpublic showToast(\n\t\tdata: NgxToastCreator | string\n\t): NgxToast {\n\t\t// Iben: Early exit if we reached\n\t\tif (\n\t\t\tthis.configuration.maxAmount &&\n\t\t\tthis.queue$.getValue().length === this.configuration.maxAmount.amount &&\n\t\t\tthis.configuration.maxAmount.strategy === 'ignore'\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Generate an id for the toast\n\t\tconst id = uuid();\n\t\tconst toast = { ...(typeof data === 'string' ? { text: data } : data), id };\n\n\t\t// Iben: Add the toast to the toast list\n\t\tthis.toastEvents$.next({\n\t\t\ttype: 'add',\n\t\t\ttoast: toast,\n\t\t});\n\n\t\t// Iben: Return the toast\n\t\treturn toast;\n\t}\n\n\t/**\n\t * Removes a toast based on the provided id\n\t *\n\t * @param toast - The toast we wish to remove\n\t */\n\tpublic removeToast(toast: NgxToast): void {\n\t\t// Iben: If the toast is no longer in the queue, because it was removed by the end user, we early exit\n\t\tif (!this.queue$.getValue().find(({ id }) => toast.id === id)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the toast list is currently being focussed on, we try again within 5 seconds\n\t\tif (this.isFocussed && (this.configuration.autoClose || toast.configuration?.autoClose)) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.removeToast(toast);\n\t\t\t}, 5000);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the toast list isn't focussed on, we remove it from the dom\n\t\tthis.toastEvents$.next({\n\t\t\ttoast,\n\t\t\ttype: 'remove',\n\t\t});\n\t}\n\n\t/**\n\t * Sets whether the list of toasts is currently being focussed on by the user\n\t *\n\t * @param hasFocus - Whether or not it is being focussed\n\t */\n\tpublic setFocus(hasFocus: boolean) {\n\t\tthis.isFocussed = hasFocus;\n\t}\n\n\t/**\n\t * Mark the toast as rendered, so that we can automatically remove it if needed\n\t *\n\t * @param toast - The toast we wish to remove if needed\n\t */\n\tpublic markAsRendered(toast: NgxToast): void {\n\t\t// Iben: If the toast isn't currently visible, we early exit\n\t\tif (!this.toasts().find(({ id }) => toast.id === id)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Check if we need to autoclose the toast and close it if it is set to true\n\t\tconst autoClose = toast.configuration?.autoClose || this.configuration.autoClose;\n\n\t\tif (autoClose === true || autoClose === undefined) {\n\t\t\tconst maxTime = this.configuration.maxTime || 5000;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.removeToast(toast);\n\t\t\t}, maxTime);\n\t\t}\n\t}\n\n\t/**\n\t * Shows the bundled toasts in case there are\n\t */\n\tpublic showBundled(): void {\n\t\t// Iben: If the maxAmount strategy isn't bundle, we early exit as this method is then irrelevant\n\t\tif (this.configuration.maxAmount?.strategy !== 'bundle') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.showBundledToasts$.next(true);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTooltipAbstractComponent.html":{"url":"directives/NgxTooltipAbstractComponent.html","title":"directive - NgxTooltipAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTooltipAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract for the NgxTooltipDirective\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Private\n                                    Readonly\n                                ngxTooltipService\n                            \n                            \n                                    Public\n                                    Readonly\n                                position\n                            \n                            \n                                    Public\n                                    Readonly\n                                positionClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                text\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                removeOnMouseOut\n                            \n                            \n                                    \n                                showOnMouseEnter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                position\n                            \n                            \n                                positionClass\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                mouseenter\n                            \n                            \n                                mouseleave\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:55\n                            \n                        \n                \n                    \n                        The id of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        position\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:60\n                            \n                        \n                \n                    \n                        The current position of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        positionClass\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:47\n                            \n                        \n                \n                    \n                        The position class of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        text\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:65\n                            \n                        \n                \n                    \n                        The text of the tooltip\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            mouseenter\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:22\n                \n            \n\n\n            \n                \n                    Set tooltip as active\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseleave\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:33\n                \n            \n\n\n            \n                \n                    Set the tooltip as inactive\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeOnMouseOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOnMouseOut()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseleave')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:33\n                        \n                    \n\n\n            \n                \n                        Set the tooltip as inactive\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        showOnMouseEnter\n                        \n                    \n                \n            \n            \n                \n                        \n                    showOnMouseEnter()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseenter')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:22\n                        \n                    \n\n\n            \n                \n                        Set tooltip as active\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:55\n                        \n                    \n\n            \n                \n                    The id of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        ngxTooltipService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTooltipService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        position\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:60\n                        \n                    \n\n            \n                \n                    The current position of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        positionClass\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:47\n                        \n                    \n\n            \n                \n                    The position class of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        text\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:65\n                        \n                    \n\n            \n                \n                    The text of the tooltip\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener, inject, input } from '@angular/core';\n\nimport { NgxTooltipService } from '../../services';\nimport { NgxTooltipPosition, NgxTooltipPositionClass } from '../../types';\n\n/**\n * An abstract for the NgxTooltipDirective\n */\n@Directive({\n\thost: {\n\t\tid: 'id()',\n    class: 'positionClass()',\n    'attr.role': 'tooltip'\n\t},\n})\nexport abstract class NgxTooltipAbstractComponent {\n\tprivate readonly ngxTooltipService = inject(NgxTooltipService);\n\n\t/**\n\t * Set tooltip as active\n\t */\n\t@HostListener('mouseenter') showOnMouseEnter() {\n\t\tthis.ngxTooltipService.setToolTipEvent({\n\t\t\tid: this.id(),\n\t\t\tsource: 'tooltip',\n\t\t\tactive: true,\n\t\t});\n\t}\n\n\t/**\n\t * Set the tooltip as inactive\n\t */\n\t@HostListener('mouseleave') removeOnMouseOut() {\n\t\tthis.ngxTooltipService.setToolTipEvent({\n\t\t\tid: this.id(),\n\t\t\tsource: 'tooltip',\n\t\t\tactive: false,\n\t\t});\n\t}\n\n\t/**\n\t * The position class of the tooltip\n\t */\n\t/**\n\t * The position class of the tooltip\n\t */\n\tpublic readonly positionClass = input();\n\n\t/**\n\t * The id of the tooltip\n\t */\n\t/**\n\t * The id of the tooltip\n\t */\n\tpublic readonly id = input.required();\n\n\t/**\n\t * The current position of the tooltip\n\t */\n\tpublic readonly position = input.required();\n\n\t/**\n\t * The text of the tooltip\n\t */\n\tpublic readonly text = input.required();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipActiveElementEvent.html":{"url":"interfaces/NgxTooltipActiveElementEvent.html","title":"interface - NgxTooltipActiveElementEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipActiveElementEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxTooltipBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            elementRef\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementRef\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementRef:     ElementRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ElementRef\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxTooltipPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTooltipPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipActiveTooltipEvent.html":{"url":"interfaces/NgxTooltipActiveTooltipEvent.html","title":"interface - NgxTooltipActiveTooltipEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipActiveTooltipEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxTooltipBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipBaseEvent.html":{"url":"interfaces/NgxTooltipBaseEvent.html","title":"interface - NgxTooltipBaseEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipBaseEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:     \"tooltip\" | \"element\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"tooltip\" | \"element\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipConfiguration.html":{"url":"interfaces/NgxTooltipConfiguration.html","title":"interface - NgxTooltipConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultPosition\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultPosition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultPosition:         NgxTooltipPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTooltipPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTooltipDirective.html":{"url":"directives/NgxTooltipDirective.html","title":"directive - NgxTooltipDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTooltipDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that adds a ARIA compliant tooltip to a component\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTooltip]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltip\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipComponent\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipDisabled\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipId\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipPosition\n                            \n                            \n                                    Private\n                                    Readonly\n                                tooltipService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onEscape\n                            \n                            \n                                    \n                                removeOnBlur\n                            \n                            \n                                    \n                                removeOnMouseOut\n                            \n                            \n                                    Private\n                                removeTooltip\n                            \n                            \n                                    \n                                showOnFocus\n                            \n                            \n                                    \n                                showOnMouseEnter\n                            \n                            \n                                    Private\n                                showTooltip\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTooltip\n                            \n                            \n                                ngxTooltipDisabled\n                            \n                            \n                                ngxTooltipPosition\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                document:keydown.escape\n                            \n                            \n                                focus\n                            \n                            \n                                mouseenter\n                            \n                            \n                                mouseleave\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTooltip\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:72\n                            \n                        \n                \n                    \n                        The text of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTooltipDisabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:88\n                            \n                        \n                \n                    \n                        Prevent the tooltip from being shown, by default this is false.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTooltipPosition\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:83\n                            \n                        \n                \n                    \n                        An optional position we can pass to tooltip, by default this is 'above'.\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:50\n                \n            \n\n\n            \n                \n                    Remove the tooltip on blur\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            document:keydown.escape\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:57\n                \n            \n\n\n            \n                \n                    Remove the tooltip on escape pressed\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:36\n                \n            \n\n\n            \n                \n                    Show the tooltip on focus\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseenter\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:29\n                \n            \n\n\n            \n                \n                    Show the tooltip on hover\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseleave\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:43\n                \n            \n\n\n            \n                \n                    Remove the tooltip on leaving hover\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:57\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeOnBlur\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOnBlur()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:50\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip on blur\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeOnMouseOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOnMouseOut()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseleave')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:43\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip on leaving hover\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        removeTooltip\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeTooltip()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:114\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        showOnFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    showOnFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:36\n                        \n                    \n\n\n            \n                \n                        Show the tooltip on focus\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        showOnMouseEnter\n                        \n                    \n                \n            \n            \n                \n                        \n                    showOnMouseEnter()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseenter')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:29\n                        \n                    \n\n\n            \n                \n                        Show the tooltip on hover\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showTooltip\n                        \n                    \n                \n            \n            \n                \n                        \n                    showTooltip()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:93\n                        \n                    \n\n\n            \n                \n                        Show the tooltip if it is not visible yet\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltip\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:72\n                        \n                    \n\n            \n                \n                    The text of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipComponent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input>()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:77\n                        \n                    \n\n            \n                \n                    An optional component we can pass to replace the default configured component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:88\n                        \n                    \n\n            \n                \n                    Prevent the tooltip from being shown, by default this is false.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(uuid())\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:67\n                        \n                    \n\n            \n                \n                    The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipPosition\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:83\n                        \n                    \n\n            \n                \n                    An optional position we can pass to tooltip, by default this is 'above'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tooltipService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTooltipService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, Type, inject, input } from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxTooltipAbstractComponent } from '../../abstracts';\nimport { NgxTooltipService } from '../../services';\nimport { NgxTooltipPosition } from '../../types';\n\n/**\n * A directive that adds a ARIA compliant tooltip to a component\n *\n * @export\n * @class NgxTooltipDirective\n */\n@Directive({\n\tselector: '[ngxTooltip]',\n\tstandalone: true,\n\thost: {\n\t\t'[attr.aria-describedby]': 'ngxTooltipId()',\n\t\ttabIndex: '0',\n\t},\n})\nexport class NgxTooltipDirective {\n\tprivate readonly tooltipService = inject(NgxTooltipService);\n\tprivate readonly elementRef = inject(ElementRef);\n\n\t/**\n\t * Show the tooltip on hover\n\t */\n\t@HostListener('mouseenter') showOnMouseEnter() {\n\t\tthis.showTooltip();\n\t}\n\n\t/**\n\t * Show the tooltip on focus\n\t */\n\t@HostListener('focus') showOnFocus() {\n\t\tthis.showTooltip();\n\t}\n\n\t/**\n\t * Remove the tooltip on leaving hover\n\t */\n\t@HostListener('mouseleave') removeOnMouseOut() {\n\t\tthis.removeTooltip();\n\t}\n\n\t/**\n\t * Remove the tooltip on blur\n\t */\n\t@HostListener('blur') removeOnBlur() {\n\t\tthis.removeTooltip();\n\t}\n\n\t/**\n\t * Remove the tooltip on escape pressed\n\t */\n\t@HostListener('document:keydown.escape') onEscape() {\n\t\tthis.tooltipService.removeToolTip();\n\t}\n\n\t/**\n\t * The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.\n\t */\n\t/**\n\t * The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.\n\t */\n\tpublic readonly ngxTooltipId = input(uuid());\n\n\t/**\n\t * The text of the tooltip\n\t */\n\tpublic readonly ngxTooltip = input.required();\n\n\t/**\n\t * An optional component we can pass to replace the default configured component\n\t */\n\tpublic readonly ngxTooltipComponent = input>();\n\n\t/**\n\t * An optional position we can pass to tooltip, by default this is 'above'.\n\t */\n\t// Iben: The default is set in the NgxTooltipService\n\tpublic readonly ngxTooltipPosition = input();\n\n\t/**\n\t * Prevent the tooltip from being shown, by default this is false.\n\t */\n\tpublic readonly ngxTooltipDisabled = input(false);\n\n\t/**\n\t * Show the tooltip if it is not visible yet\n\t */\n\tprivate showTooltip(): void {\n\t\t// Iben: Early exit when the tooltip is disabled\n\t\tif (this.ngxTooltipDisabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Show the tooltip\n\t\tthis.tooltipService.setToolTipEvent({\n\t\t\ttext: this.ngxTooltip(),\n\t\t\tposition: this.ngxTooltipPosition(),\n\t\t\tcomponent: this.ngxTooltipComponent(),\n\t\t\telementRef: this.elementRef,\n\t\t\tid: this.ngxTooltipId(),\n\t\t\tsource: 'element',\n\t\t\tactive: true,\n\t\t});\n\t}\n\n\t/**\n\t * Remove the tooltip\n\t */\n\tprivate removeTooltip(): void {\n\t\t// Iben: Early exit when the tooltip is disabled\n\t\tif (this.ngxTooltipDisabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Emit a remove event\n\t\tthis.tooltipService.setToolTipEvent({\n\t\t\tid: this.ngxTooltipId(),\n\t\t\tsource: 'element',\n\t\t\tactive: false,\n\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipInactiveEvent.html":{"url":"interfaces/NgxTooltipInactiveEvent.html","title":"interface - NgxTooltipInactiveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipInactiveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxTooltipBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipItem.html":{"url":"interfaces/NgxTooltipItem.html","title":"interface - NgxTooltipItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            elementRef\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementRef\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementRef:     ElementRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ElementRef\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxTooltipPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTooltipPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxTooltipService.html":{"url":"injectables/NgxTooltipService.html","title":"injectable - NgxTooltipService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxTooltipService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeTooltip\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                overlayPositionBuilder\n                            \n                            \n                                    Private\n                                overlayRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                overlayService\n                            \n                            \n                                    Private\n                                    Readonly\n                                positionRecord\n                            \n                            \n                                    Private\n                                    Readonly\n                                tooltipEventsSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                removeToolTip\n                            \n                            \n                                    Public\n                                setToolTipEvent\n                            \n                            \n                                    Public\n                                showToolTip\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:54\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:197\n                        \n                    \n\n\n            \n                \n                        Emit the destroy event\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeToolTip\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeToolTip()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:169\n                        \n                    \n\n\n            \n                \n                        Removes the tooltip.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setToolTipEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    setToolTipEvent(event: NgxTooltipEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:184\n                        \n                    \n\n\n            \n                \n                        Dispatches the tooltip event to the subject\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            NgxTooltipEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA tooltip event\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showToolTip\n                        \n                    \n                \n            \n            \n                \n                        \n                    showToolTip(tooltip: NgxTooltipItem)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Show a tooltip\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tooltip\n                                            \n                                                            NgxTooltipItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration of the tooltip\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        activeTooltip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTooltipConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:39\n                        \n                    \n\n            \n                \n                    A subject to hold the destroy event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        overlayPositionBuilder\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(OverlayPositionBuilder)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overlayRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OverlayRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:44\n                        \n                    \n\n            \n                \n                    The overlayRef used to attach the tooltip too\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        overlayService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Overlay)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        positionRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {\n\t\tbelow: { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n\t\tabove: { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n\t\tleft: { originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center' },\n\t\tright: { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n\t}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:49\n                        \n                    \n\n            \n                \n                    The position record for the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tooltipEventsSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(undefined)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:33\n                        \n                    \n\n            \n                \n                    A subject to hold the tooltip events\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n\tConnectedPosition,\n\tOverlay,\n\tOverlayPositionBuilder,\n\tOverlayRef,\n} from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Injectable, OnDestroy, inject } from '@angular/core';\nimport { BehaviorSubject, pairwise, Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxTooltipConfigurationToken } from '../../tokens';\nimport {\n\tNgxTooltipConfiguration,\n\tNgxTooltipEvent,\n\tNgxTooltipItem,\n\tNgxTooltipPosition,\n} from '../../types';\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxTooltipService implements OnDestroy {\n\tprivate readonly configuration = inject(NgxTooltipConfigurationToken);\n\tprivate readonly overlayService = inject(Overlay);\n\tprivate readonly overlayPositionBuilder = inject(OverlayPositionBuilder);\n\n\t// Iben: The id of the active tooltip\n\tprivate activeTooltip: string = undefined;\n\n\t/**\n\t * A subject to hold the tooltip events\n\t */\n\tprivate readonly tooltipEventsSubject: BehaviorSubject =\n\t\tnew BehaviorSubject(undefined);\n\n\t/**\n\t * A subject to hold the destroy event\n\t */\n\tprivate readonly onDestroySubject: Subject = new Subject();\n\n\t/**\n\t * The overlayRef used to attach the tooltip too\n\t */\n\tprivate overlayRef: OverlayRef;\n\n\t/**\n\t * The position record for the tooltip\n\t */\n\tprivate readonly positionRecord: Record = {\n\t\tbelow: { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n\t\tabove: { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n\t\tleft: { originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center' },\n\t\tright: { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n\t};\n\n\tconstructor() {\n\t\t// Iben: Listen to the tooltip events and handle accordingly\n\t\tthis.tooltipEventsSubject\n\t\t\t.pipe(\n\t\t\t\tpairwise(),\n\t\t\t\ttap(([previous, next]) => {\n\t\t\t\t\t// Iben: When we enter an element, we show the tooltip\n\t\t\t\t\tif (next.active && next.source === 'element') {\n\t\t\t\t\t\t// Iben: Check if we have a previous element, and if so, if we have to remove it\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tprevious &&\n\t\t\t\t\t\t\tthis.overlayRef?.hasAttached() &&\n\t\t\t\t\t\t\tthis.activeTooltip !== next.id\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.removeToolTip();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Iben: Add the new tooltip\n\t\t\t\t\t\tconst { component, text, position, elementRef, id } = next;\n\n\t\t\t\t\t\tthis.showToolTip({\n\t\t\t\t\t\t\tcomponent: component,\n\t\t\t\t\t\t\ttext: text,\n\t\t\t\t\t\t\tposition: position,\n\t\t\t\t\t\t\telementRef: elementRef,\n\t\t\t\t\t\t\tid: id,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: We do a check on previous here so we can continue safely in the upcoming checks\n\t\t\t\t\tif (!previous) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: If we're entering a new element, we early exit\n\t\t\t\t\tif (previous.id !== next.id) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: If the sources are the same, we check if we need to remove the tooltip\n\t\t\t\t\t// In this case we either leave the tooltip or leave the element\n\t\t\t\t\tif (previous.source === next.source) {\n\t\t\t\t\t\tif (!next.active) {\n\t\t\t\t\t\t\tthis.removeToolTip();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: If both actives are false (element => tooltip => outside or tooltip => element => outside), we remove the tooltip\n\t\t\t\t\tif (!next.active && !previous.active) {\n\t\t\t\t\t\tthis.removeToolTip();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Show a tooltip\n\t *\n\t * @param tooltip - The configuration of the tooltip\n\t */\n\tpublic showToolTip(tooltip: NgxTooltipItem): void {\n\t\t// Iben: If no tooltip was provided or if we already have a tooltip attached, we early exit\n\t\tif (!tooltip || this.overlayRef?.hasAttached()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Get the configuration of the tooltip\n\t\tconst { text, component, position, elementRef, id } = tooltip;\n\n\t\t// Iben: Set the active tooltip\n\t\tthis.activeTooltip = id;\n\n\t\t// Iben: Get the tooltip position. If no position was provided by the tooltip, we use the configured default, if none is configured we use 'above'\n\t\tconst tooltipPosition = position || this.configuration.defaultPosition || 'above';\n\n\t\t// Iben: If the previous overlayRef still exists, we remove it\n\t\tif (!this.overlayRef) {\n\t\t\tthis.overlayRef = this.overlayService.create({\n\t\t\t\t// Iben: Set the scroll strategy to reposition so that whenever the user scrolls, the tooltip is still near the element\n\t\t\t\tscrollStrategy: this.overlayService.scrollStrategies.reposition(),\n\t\t\t});\n\t\t}\n\n\t\t// Iben: Create the position of the overlay\n\t\tconst positionStrategy = this.overlayPositionBuilder\n\t\t\t.flexibleConnectedTo(elementRef)\n\t\t\t.withPositions([this.positionRecord[tooltipPosition]]);\n\n\t\t// Iben: Update the position of the current overlayRef\n\t\tthis.overlayRef.updatePositionStrategy(positionStrategy);\n\n\t\t// Iben: Create a new component portal\n\t\tconst tooltipPortal = new ComponentPortal(component || this.configuration.component);\n\n\t\t// Iben: Attach the tooltipPortal to the overlayRef\n    const tooltipRef = this.overlayRef.attach( tooltipPortal );\n\n\t\t// Iben: Pass the data to the component\n\t\ttooltipRef.setInput('text', text);\n\t\ttooltipRef.setInput('position', tooltipPosition);\n\t\ttooltipRef.setInput('positionClass', `ngx-tooltip-position-${tooltipPosition}`);\n\t\ttooltipRef.setInput('id', id);\n\t}\n\n\t/**\n\t * Removes the tooltip.\n\t */\n\tpublic removeToolTip(): void {\n\t\tif (this.activeTooltip) {\n\t\t\t// Iben: Unset the active tooltip\n\t\t\tthis.activeTooltip = undefined;\n\n\t\t\t// Iben: Remove the active tooltip from view\n\t\t\tthis.overlayRef.detach();\n\t\t}\n\t}\n\n\t/**\n\t * Dispatches the tooltip event to the subject\n\t *\n\t * @param event - A tooltip event\n\t */\n\tpublic setToolTipEvent(event: NgxTooltipEvent): void {\n\t\t// Iben: We add a delay so that the user can navigate between the tooltip and the element\n\t\tsetTimeout(\n\t\t\t() => {\n\t\t\t\tthis.tooltipEventsSubject.next(event);\n\t\t\t},\n\t\t\tevent.active ? 0 : 100\n\t\t);\n\t}\n\n\t/**\n\t * Emit the destroy event\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.onDestroySubject.next();\n\t\tthis.onDestroySubject.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourBackdropClipEvent.html":{"url":"interfaces/NgxTourBackdropClipEvent.html","title":"interface - NgxTourBackdropClipEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourBackdropClipEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            backdrop\n                                        \n                                \n                                \n                                        \n                                            cutoutMargin\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            item\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backdrop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backdrop:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cutoutMargin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cutoutMargin:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        item\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        item:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxTourStepComponent } from '../abstracts';\nimport { NgxTourItemDirective } from '../directives';\n\nexport type NgxTourDirection = 'next' | 'back';\n\nexport type NgxTourInteraction = NgxTourDirection | 'close';\n\nexport type NgxTourStepPosition = 'above' | 'below' | 'right' | 'left';\n\nexport type NgxTourRegistrationEvent = {\n\ttourItem: string;\n\telement?: NgxTourItemDirective;\n\ttype: 'register' | 'unregister';\n};\n\nexport interface NgxTourRouteOptions {\n\troute: string[];\n\textras: NavigationExtras;\n}\nexport interface NgxTourBackdropClipEvent {\n\tbackdrop: HTMLElement;\n\tcutoutMargin: number;\n\titem?: HTMLElement;\n}\n\nexport type NgxTourAction = (step: NgxTourStep, index: number) => void | Observable;\n\nexport interface NgxTourStep {\n\t/**\n\t * The title we wish to display on the step.\n\t */\n\ttitle: string;\n\n\t/**\n\t * The content we wish to display on the step.\n\t */\n\tcontent: string;\n\n\t/**\n\t * Optional corresponding id of the element we wish to highlight. This is the string we pass to the `tourItem` directive.\n\t */\n\ttourItem?: string;\n\n\t/**\n\t * Optional position where we wish to render the tour step.\n\t *\n\t * By default, this is `below`.\n\t */\n\tposition?: NgxTourStepPosition;\n\n\t/**\n\t * Optional extra data we wish to provide to the step\n\t */\n\tdata?: DataType;\n\n\t/**\n\t * An optional amount of time we want to wait before showing the next step.\n\t *\n\t * By default this is 100 ms.\n\t */\n\tdelay?: number;\n\n\t/**\n\t * An optional function that will be run right before a step becomes visible.\n\t */\n\tbeforeVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run right when a step becomes visible.\n\t */\n\tonVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run when a step is no longer visible\n\t */\n\tafterVisible?: NgxTourAction;\n\n\t/**\n\t * An optional component to replace the default provided component within the tour step configuration.\n\t */\n\tcomponent?: Type;\n\n\t/**\n\t * Whether we want to disable the backdrop\n\t */\n\tdisableBackDrop?: boolean;\n\n\t/**\n\t * An optional padding we can set for the cutout around an element. By default, this is set to 5px.\n\t * This will add some additional whitespace **within** the cutout.\n\t *\n\t * This is not the same as the `offset`, which is the whitespace **around** the highlighted element.\n\t */\n\tcutoutMargin?: number;\n\n\t/**\n\t * An optional class we can attach to the step\n\t */\n\tstepClass?: string;\n\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t */\n\toffset?: NgxTourStepOffset;\n}\n\nexport type NgxTourStepOffset = {\n\ttop?: number;\n\tbottom?: number;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTourItemDirective.html":{"url":"directives/NgxTourItemDirective.html","title":"directive - NgxTourItemDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTourItemDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive to mark elements in the DOM to be highlighted during a tour\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [tourItem]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Readonly\n                                elementRef\n                            \n                            \n                                    \n                                    Public\n                                isActive\n                            \n                            \n                                    Public\n                                    Readonly\n                                tourItem\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                setActive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                tourItem\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.ngx-tour-item-active\n                            \n                        \n                    \n                \n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    elementId\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        tourItem\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:26\n                            \n                        \n                \n                    \n                        The id of the item that corresponds with the step\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class.ngx-tour-item-active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:21\n                        \n                    \n\n            \n                \n                    A class added to the currently active item\n\n                \n            \n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    setActive(isActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:33\n                        \n                    \n\n\n            \n                \n                        Mark an element as active or inactive\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether or not the element should be active\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class.ngx-tour-item-active')\n                        \n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:21\n                        \n                    \n\n            \n                \n                    A class added to the currently active item\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        tourItem\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:26\n                        \n                    \n\n            \n                \n                    The id of the item that corresponds with the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        elementId\n                    \n                \n\n                \n                    \n                        getelementId()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:44\n                                \n                            \n                    \n                        \n                                Returns the id of the element. Uses for the aria-details on the tour-item component\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Directive, ElementRef, HostBinding, OnDestroy, inject, input } from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxTourService } from '../../services';\n\n/**\n * A directive to mark elements in the DOM to be highlighted during a tour\n */\n@Directive({\n\tselector: '[tourItem]',\n  standalone: true,\n})\nexport class NgxTourItemDirective implements AfterViewInit, OnDestroy {\n\treadonly elementRef = inject>(ElementRef);\n\tprivate readonly tourService = inject(NgxTourService);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * A class added to the currently active item\n\t */\n\t@HostBinding('class.ngx-tour-item-active') public isActive: boolean = false;\n\n\t/**\n\t * The id of the item that corresponds with the step\n\t */\n\tpublic readonly tourItem = input();\n\n\t/**\n\t * Mark an element as active or inactive\n\t *\n\t * @param isActive - Whether or not the element should be active\n\t */\n\tpublic setActive(isActive: boolean): void {\n\t\t// Iben: Mark the current item as active or inactive\n\t\tthis.isActive = isActive;\n\n\t\t// Iben: Detect the changes on the component\n\t\tthis.cdRef.detectChanges();\n\t}\n\n\t/**\n\t * Returns the id of the element. Uses for the `aria-details` on the tour-item component\n\t */\n\tpublic get elementId(): string {\n\t\treturn this.elementRef.nativeElement.getAttribute('id');\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Register the element when rendered\n\t\tthis.tourService.registerElement(this);\n\n\t\t// Iben: Check if the element has an id, if not, give it a new id for accessibility\n\t\tif (!this.elementRef.nativeElement.getAttribute('id')) {\n\t\t\tthis.elementRef.nativeElement.setAttribute('id', uuid());\n\t\t}\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Unregister the element when the element gets destroyed\n\t\tthis.tourService.unregisterElement(this.tourItem());\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourRouteOptions.html":{"url":"interfaces/NgxTourRouteOptions.html","title":"interface - NgxTourRouteOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourRouteOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            extras\n                                        \n                                \n                                \n                                        \n                                            route\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        extras\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extras:     NavigationExtras\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     NavigationExtras\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        route\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        route:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxTourStepComponent } from '../abstracts';\nimport { NgxTourItemDirective } from '../directives';\n\nexport type NgxTourDirection = 'next' | 'back';\n\nexport type NgxTourInteraction = NgxTourDirection | 'close';\n\nexport type NgxTourStepPosition = 'above' | 'below' | 'right' | 'left';\n\nexport type NgxTourRegistrationEvent = {\n\ttourItem: string;\n\telement?: NgxTourItemDirective;\n\ttype: 'register' | 'unregister';\n};\n\nexport interface NgxTourRouteOptions {\n\troute: string[];\n\textras: NavigationExtras;\n}\nexport interface NgxTourBackdropClipEvent {\n\tbackdrop: HTMLElement;\n\tcutoutMargin: number;\n\titem?: HTMLElement;\n}\n\nexport type NgxTourAction = (step: NgxTourStep, index: number) => void | Observable;\n\nexport interface NgxTourStep {\n\t/**\n\t * The title we wish to display on the step.\n\t */\n\ttitle: string;\n\n\t/**\n\t * The content we wish to display on the step.\n\t */\n\tcontent: string;\n\n\t/**\n\t * Optional corresponding id of the element we wish to highlight. This is the string we pass to the `tourItem` directive.\n\t */\n\ttourItem?: string;\n\n\t/**\n\t * Optional position where we wish to render the tour step.\n\t *\n\t * By default, this is `below`.\n\t */\n\tposition?: NgxTourStepPosition;\n\n\t/**\n\t * Optional extra data we wish to provide to the step\n\t */\n\tdata?: DataType;\n\n\t/**\n\t * An optional amount of time we want to wait before showing the next step.\n\t *\n\t * By default this is 100 ms.\n\t */\n\tdelay?: number;\n\n\t/**\n\t * An optional function that will be run right before a step becomes visible.\n\t */\n\tbeforeVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run right when a step becomes visible.\n\t */\n\tonVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run when a step is no longer visible\n\t */\n\tafterVisible?: NgxTourAction;\n\n\t/**\n\t * An optional component to replace the default provided component within the tour step configuration.\n\t */\n\tcomponent?: Type;\n\n\t/**\n\t * Whether we want to disable the backdrop\n\t */\n\tdisableBackDrop?: boolean;\n\n\t/**\n\t * An optional padding we can set for the cutout around an element. By default, this is set to 5px.\n\t * This will add some additional whitespace **within** the cutout.\n\t *\n\t * This is not the same as the `offset`, which is the whitespace **around** the highlighted element.\n\t */\n\tcutoutMargin?: number;\n\n\t/**\n\t * An optional class we can attach to the step\n\t */\n\tstepClass?: string;\n\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t */\n\toffset?: NgxTourStepOffset;\n}\n\nexport type NgxTourStepOffset = {\n\ttop?: number;\n\tbottom?: number;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTourShowWhenDirective.html":{"url":"directives/NgxTourShowWhenDirective.html","title":"directive - NgxTourShowWhenDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTourShowWhenDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                \nA directive that will render a part of the template based on the condition and the currently active tour\n\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTourShowWhen]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Public\n                                ngxTourShowWhen\n                            \n                            \n                                    Public\n                                ngxTourShowWhenElse\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTourShowWhen\n                            \n                            \n                                ngxTourShowWhenElse\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:40\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTourShowWhen\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:63\n                            \n                        \n                \n                    \n                        Under which condition the item should be shown whilst the tour is active\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTourShowWhenElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:68\n                            \n                        \n                \n                    \n                        The else template in case the condition is not matched\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:123\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:74\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:32\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxTourShowWhen\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:63\n                        \n                    \n\n            \n                \n                    Under which condition the item should be shown whilst the tour is active\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxTourShowWhenElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:68\n                        \n                    \n\n            \n                \n                    The else template in case the condition is not matched\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:37\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { combineLatest, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil, tap, withLatestFrom } from 'rxjs/operators';\n\nimport { NgxTourService } from '../../services';\n\n/**\n *  * A directive that will render a part of the template based on the condition and the currently active tour\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n@Directive({\n\tselector: '[ngxTourShowWhen]',\n})\nexport class NgxTourShowWhenDirective implements OnDestroy {\n\tprivate readonly tourService = inject(NgxTourService);\n\tprivate viewContainer = inject(ViewContainerRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\tconstructor() {\n\t\tconst templateRef = inject>(TemplateRef);\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tif (this.ngxTourShowWhen()) {\n\t\t\t\tthis.updateView();\n\t\t\t}\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxTourShowWhenElse();\n\t\t\tthis.elseViewRef = null;\n\t\t\tthis.updateView();\n\t\t});\n\t}\n\n\t/**\n\t * Under which condition the item should be shown whilst the tour is active\n\t */\n\tpublic ngxTourShowWhen: InputSignal =\n\t\tinput();\n\t/**\n\t * The else template in case the condition is not matched\n\t */\n\tpublic ngxTourShowWhenElse: InputSignal> = input();\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.tourService.currentIndex$\n\t\t\t.pipe(\n\t\t\t\tdistinctUntilChanged(),\n        withLatestFrom( this.tourService.currentTour$ ),\n\t\t\t\ttap(([index, tour]) => {\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tif (\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'whenInactive' && index === undefined) ||\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'whenActive' && index !== undefined) ||\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'hasPrevious' && Boolean(tour?.[index - 1])) ||\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'hasNext' && Boolean(tour?.[index + 1]))\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.thenViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.elseViewRef = null;\n\t\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourStep.html":{"url":"interfaces/NgxTourStep.html","title":"interface - NgxTourStep","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourStep\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            afterVisible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            beforeVisible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cutoutMargin\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            delay\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableBackDrop\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            offset\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onVisible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stepClass\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tourItem\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        afterVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        afterVisible:         NgxTourAction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourAction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional function that will be run when a step is no longer visible\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        beforeVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        beforeVisible:         NgxTourAction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourAction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional function that will be run right before a step becomes visible.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional component to replace the default provided component within the tour step configuration.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The content we wish to display on the step.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cutoutMargin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cutoutMargin:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional padding we can set for the cutout around an element. By default, this is set to 5px.\nThis will add some additional whitespace within the cutout.\nThis is not the same as the offset, which is the whitespace around the highlighted element.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional extra data we wish to provide to the step\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delay:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional amount of time we want to wait before showing the next step.\nBy default this is 100 ms.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableBackDrop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableBackDrop:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether we want to disable the backdrop\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         NgxTourStepOffset\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourStepOffset\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Allow the highlighted element to have additional whitespace around the cutout on the y-axis.\nThis is useful when the highlighted element is under a header or a footer.\nEven though it is possible to provide both a top and bottom offset, only one will be taken into\naccount. If the vertical center of the cutout is closer to the top, the top offset will be used. If\nthe vertical center of the cutout is closer to the bottom, the bottom offset will be used.\nNegative values are allowed. The step(card) will always be displayed within the viewport, even if\nthe offset makes the cutout go out of the viewport.\nThis is not the same as the cutoutMargin, which is the whitespace within the highlighted element.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onVisible:         NgxTourAction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourAction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional function that will be run right when a step becomes visible.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxTourStepPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourStepPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional position where we wish to render the tour step.\nBy default, this is below.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stepClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stepClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional class we can attach to the step\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The title we wish to display on the step.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tourItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tourItem:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional corresponding id of the element we wish to highlight. This is the string we pass to the tourItem directive.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxTourStepComponent } from '../abstracts';\nimport { NgxTourItemDirective } from '../directives';\n\nexport type NgxTourDirection = 'next' | 'back';\n\nexport type NgxTourInteraction = NgxTourDirection | 'close';\n\nexport type NgxTourStepPosition = 'above' | 'below' | 'right' | 'left';\n\nexport type NgxTourRegistrationEvent = {\n\ttourItem: string;\n\telement?: NgxTourItemDirective;\n\ttype: 'register' | 'unregister';\n};\n\nexport interface NgxTourRouteOptions {\n\troute: string[];\n\textras: NavigationExtras;\n}\nexport interface NgxTourBackdropClipEvent {\n\tbackdrop: HTMLElement;\n\tcutoutMargin: number;\n\titem?: HTMLElement;\n}\n\nexport type NgxTourAction = (step: NgxTourStep, index: number) => void | Observable;\n\nexport interface NgxTourStep {\n\t/**\n\t * The title we wish to display on the step.\n\t */\n\ttitle: string;\n\n\t/**\n\t * The content we wish to display on the step.\n\t */\n\tcontent: string;\n\n\t/**\n\t * Optional corresponding id of the element we wish to highlight. This is the string we pass to the `tourItem` directive.\n\t */\n\ttourItem?: string;\n\n\t/**\n\t * Optional position where we wish to render the tour step.\n\t *\n\t * By default, this is `below`.\n\t */\n\tposition?: NgxTourStepPosition;\n\n\t/**\n\t * Optional extra data we wish to provide to the step\n\t */\n\tdata?: DataType;\n\n\t/**\n\t * An optional amount of time we want to wait before showing the next step.\n\t *\n\t * By default this is 100 ms.\n\t */\n\tdelay?: number;\n\n\t/**\n\t * An optional function that will be run right before a step becomes visible.\n\t */\n\tbeforeVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run right when a step becomes visible.\n\t */\n\tonVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run when a step is no longer visible\n\t */\n\tafterVisible?: NgxTourAction;\n\n\t/**\n\t * An optional component to replace the default provided component within the tour step configuration.\n\t */\n\tcomponent?: Type;\n\n\t/**\n\t * Whether we want to disable the backdrop\n\t */\n\tdisableBackDrop?: boolean;\n\n\t/**\n\t * An optional padding we can set for the cutout around an element. By default, this is set to 5px.\n\t * This will add some additional whitespace **within** the cutout.\n\t *\n\t * This is not the same as the `offset`, which is the whitespace **around** the highlighted element.\n\t */\n\tcutoutMargin?: number;\n\n\t/**\n\t * An optional class we can attach to the step\n\t */\n\tstepClass?: string;\n\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t */\n\toffset?: NgxTourStepOffset;\n}\n\nexport type NgxTourStepOffset = {\n\ttop?: number;\n\tbottom?: number;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTourStepComponent.html":{"url":"directives/NgxTourStepComponent.html","title":"directive - NgxTourStepComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTourStepComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class that defines the minimum properties needed for the step component to be rendered\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        AfterViewInit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                amountOfSteps\n                            \n                            \n                                    Public\n                                    Readonly\n                                content\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentStep\n                            \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                elementId\n                            \n                            \n                                    Public\n                                handleInteraction\n                            \n                            \n                                    Public\n                                    Readonly\n                                position\n                            \n                            \n                                    \n                                    Protected\n                                rootClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                stepClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                titleElement\n                            \n                            \n                                    Public\n                                titleId\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    \n                                    Public\n                                onEscape\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                amountOfSteps\n                            \n                            \n                                content\n                            \n                            \n                                currentStep\n                            \n                            \n                                data\n                            \n                            \n                                elementId\n                            \n                            \n                                stepClass\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:keydown.escape\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        amountOfSteps\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:83\n                            \n                        \n                \n                    \n                        The total amount of steps\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:73\n                            \n                        \n                \n                    \n                        The content of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        currentStep\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:78\n                            \n                        \n                \n                    \n                        The index of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:88\n                            \n                        \n                \n                    \n                        Optional data we wish to use in a step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        elementId\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:53\n                            \n                        \n                \n                    \n                        The id of the element that the tour-step describes\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        stepClass\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:93\n                            \n                        \n                \n                    \n                        A custom step class we can set\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:68\n                            \n                        \n                \n                    \n                        The title of the step\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:45\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            document:keydown.escape\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:38\n                \n            \n\n\n            \n                \n                    Close the tour on escape pressed\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:112\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:105\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:38\n                        \n                    \n\n\n            \n                \n                        Close the tour on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        amountOfSteps\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:83\n                        \n                    \n\n            \n                \n                    The total amount of steps\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        content\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:73\n                        \n                    \n\n            \n                \n                    The content of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentStep\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:78\n                        \n                    \n\n            \n                \n                    The index of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:88\n                        \n                    \n\n            \n                \n                    Optional data we wish to use in a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementId\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:53\n                        \n                    \n\n            \n                \n                    The id of the element that the tour-step describes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleInteraction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:98\n                        \n                    \n\n            \n                \n                    Emits the possible interactions with a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:63\n                        \n                    \n\n            \n                \n                    The position of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Protected\n                        rootClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class')\n                        \n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:45\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        stepClass\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:93\n                        \n                    \n\n            \n                \n                    A custom step class we can set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:68\n                        \n                    \n\n            \n                \n                    The title of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        titleElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild>('stepTitle')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:58\n                        \n                    \n\n            \n                \n                    The element of the tour-step that is seen as the title\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        titleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal('')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:103\n                        \n                    \n\n            \n                \n                    The aria-labelledby id of the title element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tAfterViewInit,\n\tDirective,\n\tElementRef,\n\tHostBinding,\n\tHostListener,\n\tOnInit,\n\tsignal,\n\tWritableSignal,\n\tinject,\n\tinput,\n\tOutputEmitterRef,\n\toutput,\n\tviewChild,\n} from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxTourService } from '../../services';\nimport { NgxTourInteraction, NgxTourStepPosition } from '../../types';\n\n/**\n * An abstract class that defines the minimum properties needed for the step component to be rendered\n */\n@Directive({\n\thost: {\n\t\trole: 'dialog',\n\t\t'[attr.aria-modal]': 'true',\n\t\t'[attr.aria-labelledby]': 'titleId()',\n\t\t'[attr.aria-details]': 'elementId()',\n\t},\n})\nexport abstract class NgxTourStepComponent implements OnInit, AfterViewInit {\n\tprivate readonly tourService = inject(NgxTourService);\n\n\t/**\n\t * Close the tour on escape pressed\n\t */\n\t@HostListener('document:keydown.escape') public onEscape() {\n\t\tthis.tourService.closeTour().subscribe();\n\t}\n\n\t/**\n\t * The ngx-tour-step class of the component\n\t */\n\t@HostBinding('class') protected rootClass: string;\n\n\t/**\n\t * The id of the element that the tour-step describes\n\t */\n\t/**\n\t * The id of the element that the tour-step describes\n\t */\n\tpublic readonly elementId = input.required();\n\n\t/**\n\t * The element of the tour-step that is seen as the title\n\t */\n\tpublic readonly titleElement = viewChild>('stepTitle');\n\n\t/**\n\t * The position of the step\n\t */\n\tpublic readonly position = input.required();\n\n\t/**\n\t * The title of the step\n\t */\n\tpublic readonly title = input.required();\n\n\t/**\n\t * The content of the step\n\t */\n\tpublic readonly content = input.required();\n\n\t/**\n\t * The index of the step\n\t */\n\tpublic readonly currentStep = input.required();\n\n\t/**\n\t * The total amount of steps\n\t */\n\tpublic readonly amountOfSteps = input.required();\n\n\t/**\n\t * Optional data we wish to use in a step\n\t */\n\tpublic readonly data = input();\n\n\t/**\n\t * A custom step class we can set\n\t */\n\tpublic readonly stepClass = input();\n\n\t/**\n\t * Emits the possible interactions with a step\n\t */\n\tpublic handleInteraction: OutputEmitterRef = output();\n\n\t/**\n\t * The aria-labelledby id of the title element\n\t */\n\tpublic titleId: WritableSignal = signal('');\n\n\tpublic ngOnInit(): void {\n\t\t// Iben: We set the correct host class. As this step is rendered and not changed afterwards, we do not have to adjust this in the onChanges\n\t\tconst position = this.position();\n\t\tconst positionClass = position ? `ngx-tour-step-position-${position}` : '';\n\t\tthis.rootClass = `ngx-tour-step ${positionClass} ${this.stepClass() || ''}`;\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: If no title element was found, we throw an error\n\t\tconst titleElement = this.titleElement();\n\t\tif (!titleElement) {\n\t\t\tconsole.error(\n\t\t\t\t'@ibenvandeveire/ngx-inform - NgxTourService: The tour step component does not have an element marked with `stepTitle`. Because of that, the necessary accessibility attributes could not be set. Please add the `stepTitle` tag to the element that represents the title of the step.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Connect the aria-labbledby tag to the title element\n\t\tlet id = titleElement.nativeElement.getAttribute('id');\n\n\t\t// Iben: If the title element does not have an id, we generate one\n\t\tif (!id) {\n\t\t\tid = uuid();\n\t\t\ttitleElement.nativeElement.setAttribute('id', id);\n\t\t}\n\n\t\t// Iben: To prevent issues with changeDetection, we use a signal here to update the id\n\t\tthis.titleId.set(id);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourTokenConfiguration.html":{"url":"interfaces/NgxTourTokenConfiguration.html","title":"interface - NgxTourTokenConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourTokenConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.token.type.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration object to be passed as token to the tour provider\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            offset\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The component to be used as the tour step.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         NgxTourStepOffset\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourStepOffset\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Allow the highlighted element to have additional whitespace around the cutout on the y-axis.\nThis is useful when the highlighted element is under a header or a footer.\nEven though it is possible to provide both a top and bottom offset, only one will be taken into\naccount. If the vertical center of the cutout is closer to the top, the top offset will be used. If\nthe vertical center of the cutout is closer to the bottom, the bottom offset will be used.\nNegative values are allowed. The step(card) will always be displayed within the viewport, even if\nthe offset makes the cutout go out of the viewport.\nThis is not the same as the cutoutMargin, which is the whitespace within the highlighted element.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxTourStepComponent } from '../abstracts';\n\nimport { NgxTourStepOffset } from './tour.types';\n\n/**\n * The token type for the tour provider\n */\nexport type NgxTourTokenType = Type | NgxTourTokenConfiguration;\n\n/**\n * The configuration object to be passed as token to the tour provider\n */\nexport interface NgxTourTokenConfiguration {\n\t/**\n\t * The component to be used as the tour step.\n\t */\n\tcomponent: Type;\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t *\n\t * @inheritdoc NgxTourStep.offset\n\t */\n\toffset: NgxTourStepOffset;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTreeGridCellDirective.html":{"url":"directives/NgxTreeGridCellDirective.html","title":"directive - NgxTreeGridCellDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTreeGridCellDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A cell directive to handle navigation according to the WCAG treegrid pattern\nSee https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n\n            \n\n            \n                Extends\n            \n            \n                            NgxHasFocusDirective\n            \n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTreeGridCell]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGridCell\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGridCellRow\n                            \n                            \n                                    Private\n                                    Readonly\n                                parent\n                            \n                            \n                                    Private\n                                row\n                            \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                findFocusableElement\n                            \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    \n                                moveDown\n                            \n                            \n                                    \n                                moveLeft\n                            \n                            \n                                    \n                                moveRight\n                            \n                            \n                                    \n                                moveToBottomControlEnd\n                            \n                            \n                                    \n                                moveToBottomEnd\n                            \n                            \n                                    Private\n                                moveToCell\n                            \n                            \n                                    \n                                moveToFirstCellOfGrid\n                            \n                            \n                                    \n                                moveToFirstColumnOfGrid\n                            \n                            \n                                    \n                                moveToFirstOfRow\n                            \n                            \n                                    \n                                moveToLastCellOfGrid\n                            \n                            \n                                    \n                                moveUp\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                isFocussedOn\n                            \n                            \n                                    \n                                removeFocus\n                            \n                            \n                                    \n                                setFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTreeGridCell\n                            \n                            \n                                ngxTreeGridCellRow\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                keydown.ArrowDown\n                            \n                            \n                                keydown.ArrowLeft\n                            \n                            \n                                keydown.ArrowRight\n                            \n                            \n                                keydown.ArrowUp\n                            \n                            \n                                keydown.control.End\n                            \n                            \n                                keydown.control.Home\n                            \n                            \n                                keydown.End\n                            \n                            \n                                keydown.Home\n                            \n                            \n                                keydown.PageDown\n                            \n                            \n                                keydown.PageUp\n                            \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTreeGridCell\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:116\n                            \n                        \n                \n                    \n                        The index of the cell in the row\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTreeGridCellRow\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:121\n                            \n                        \n                \n                    \n                        The index of the row\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowDown\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:67\n                \n            \n\n\n            \n                \n                    Set focus on the cell below\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowLeft\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:37\n                \n            \n\n\n            \n                \n                    Set focus on the previous cell to the left\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowRight\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:53\n                \n            \n\n\n            \n                \n                    Set focus on the next cell to the right\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowUp\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:60\n                \n            \n\n\n            \n                \n                    Set focus on the cell above\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.control.End\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:109\n                \n            \n\n\n            \n                \n                    Set focus on the last cell of the same column of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.control.Home\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:88\n                \n            \n\n\n            \n                \n                    Set focus on the first cell of the same column of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.End\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:102\n                \n            \n\n\n            \n                \n                    Set focus on the last cell of the row\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.Home\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:81\n                \n            \n\n\n            \n                \n                    Set focus on the first cell of the row\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.PageDown\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:95\n                \n            \n\n\n            \n                \n                    Set focus on the last cell of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.PageUp\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:74\n                \n            \n\n\n            \n                \n                    Set focus on the first cell of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDirective:25\n\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDirective:18\n\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        findFocusableElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    findFocusableElement()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:152\n                        \n                    \n\n\n            \n                \n                        Searches for a focusable element in the cell\n\n\n                        \n                            Returns :     HTMLElement | undefined\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:126\n                        \n                    \n\n\n            \n                \n                        Sets focus on the cell or on the first focusable item in the cell\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveDown\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveDown()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowDown')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:67\n                        \n                    \n\n\n            \n                \n                        Set focus on the cell below\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveLeft\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveLeft(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowLeft', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:37\n                        \n                    \n\n\n            \n                \n                        Set focus on the previous cell to the left\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveRight\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveRight()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowRight')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:53\n                        \n                    \n\n\n            \n                \n                        Set focus on the next cell to the right\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToBottomControlEnd\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToBottomControlEnd()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.control.End')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:109\n                        \n                    \n\n\n            \n                \n                        Set focus on the last cell of the same column of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToBottomEnd\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToBottomEnd()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.End')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:102\n                        \n                    \n\n\n            \n                \n                        Set focus on the last cell of the row\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        moveToCell\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToCell(cell: NgxTreeGridCellTarget, row: NgxTreeGridRowTarget)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:143\n                        \n                    \n\n\n            \n                \n                        Moves focus to a provided cell in a provided row\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cell\n                                            \n                                                            NgxTreeGridCellTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cell we wish to put focus on\n\n\n                                            \n                                        \n                                        \n                                                row\n                                            \n                                                            NgxTreeGridRowTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe row in which the cell is\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToFirstCellOfGrid\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToFirstCellOfGrid()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.PageUp')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:74\n                        \n                    \n\n\n            \n                \n                        Set focus on the first cell of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToFirstColumnOfGrid\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToFirstColumnOfGrid()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.control.Home')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:88\n                        \n                    \n\n\n            \n                \n                        Set focus on the first cell of the same column of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToFirstOfRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToFirstOfRow()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.Home')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:81\n                        \n                    \n\n\n            \n                \n                        Set focus on the first cell of the row\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToLastCellOfGrid\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToLastCellOfGrid()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.PageDown')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:95\n                        \n                    \n\n\n            \n                \n                        Set focus on the last cell of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveUp()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowUp')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:60\n                        \n                    \n\n\n            \n                \n                        Set focus on the cell above\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:174\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:34\n\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isFocussedOn\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFocussedOn()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:43\n\n                        \n                    \n\n\n            \n                \n                        Returns when the item has been focussed on\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:25\n\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:18\n\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGridCell\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:116\n                        \n                    \n\n            \n                \n                    The index of the cell in the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGridCellRow\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:121\n                        \n                    \n\n            \n                \n                    The index of the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTreeGridDirective\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxTreeGridDirective, {\n\t\toptional: true,\n\t})!\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        row\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTreeGridRowDirective\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:32\n                        \n                    \n\n            \n                \n                    The parent row of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxHasFocusDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxHasFocusDirective:13\n\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, AfterViewInit, inject, input } from '@angular/core';\n\nimport { NgxTreeGridCellTarget, NgxTreeGridRowTarget } from '../../types';\nimport { NgxHasFocusDirective } from '../has-focus-action';\n\nimport { NgxTreeGridRowDirective } from './tree-grid-row.directive';\nimport { NgxTreeGridDirective } from './tree-grid.directive';\n\n/**\n * A cell directive to handle navigation according to the WCAG treegrid pattern\n *\n * See https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n */\n@Directive({\n\tselector: '[ngxTreeGridCell]',\n\tstandalone: true,\n\thost: {\n\t\t// Iben: Marks the cell as focusable, but only by setting its focus programmatically, not by the tab key\n\t\t'[attr.tabIndex]': '-1',\n\t},\n})\nexport class NgxTreeGridCellDirective extends NgxHasFocusDirective implements AfterViewInit {\n\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\tprivate readonly parent: NgxTreeGridDirective = inject(NgxTreeGridDirective, {\n\t\toptional: true,\n\t})!;\n\tprivate readonly elementRef = inject(ElementRef);\n\n\t/**\n\t * The parent row of the cell\n\t */\n\tprivate row: NgxTreeGridRowDirective;\n\n\t/**\n\t * Set focus on the previous cell to the left\n\t */\n\t@HostListener('keydown.ArrowLeft', ['$event']) moveLeft(event: Event): void {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\t// Iben: Stop the event from bubbling so that the row does not open when navigating through the row (see arrowLeft in the NgxTreeGridRowDirective )\n\t\t\tconst ngxTreeGridCell = this.ngxTreeGridCell();\n   if (ngxTreeGridCell === 0) {\n\t\t\t\tevent.stopPropagation();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.moveToCell(ngxTreeGridCell - 1, 'current');\n\t\t});\n\t}\n\n\t/**\n\t * Set focus on the next cell to the right\n\t */\n\t@HostListener('keydown.ArrowRight') moveRight(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell() + 1, 'current');\n\t}\n\n\t/**\n\t * Set focus on the cell above\n\t */\n\t@HostListener('keydown.ArrowUp') moveUp(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'above');\n\t}\n\n\t/**\n\t * Set focus on the cell below\n\t */\n\t@HostListener('keydown.ArrowDown') moveDown(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'below');\n\t}\n\n\t/**\n\t * Set focus on the first cell of the grid\n\t */\n\t@HostListener('keydown.PageUp') moveToFirstCellOfGrid(): void {\n\t\tthis.moveToCell('first', 'first');\n\t}\n\n\t/**\n\t * Set focus on the first cell of the row\n\t */\n\t@HostListener('keydown.Home') moveToFirstOfRow(): void {\n\t\tthis.moveToCell('first', 'current');\n\t}\n\n\t/**\n\t * Set focus on the first cell of the same column of the grid\n\t */\n\t@HostListener('keydown.control.Home') moveToFirstColumnOfGrid(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'first');\n\t}\n\n\t/**\n\t * Set focus on the last cell of the grid\n\t */\n\t@HostListener('keydown.PageDown') moveToLastCellOfGrid(): void {\n\t\tthis.moveToCell('last', 'last');\n\t}\n\n\t/**\n\t * Set focus on the last cell of the row\n\t */\n\t@HostListener('keydown.End') moveToBottomEnd(): void {\n\t\tthis.moveToCell('last', 'current');\n\t}\n\n\t/**\n\t * Set focus on the last cell of the same column of the grid\n\t */\n\t@HostListener('keydown.control.End') moveToBottomControlEnd(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'last');\n\t}\n\n\t/**\n\t * The index of the cell in the row\n\t */\n\tpublic readonly ngxTreeGridCell = input.required();\n\n\t/**\n\t * The index of the row\n\t */\n\tpublic readonly ngxTreeGridCellRow = input.required();\n\n\t/**\n\t * Sets focus on the cell or on the first focusable item in the cell\n\t */\n\tpublic focus(): void {\n\t\t// Iben: Check if any of the child elements are focusable\n\t\tconst focusableElement = this.findFocusableElement();\n\n\t\t// Iben: If no element was focusable, focus on the current element\n\t\tif (!focusableElement) {\n\t\t\tthis.elementRef.nativeElement.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Moves focus to a provided cell in a provided row\n\t *\n\t * @private\n\t * @param cell - The cell we wish to put focus on\n\t * @param row - The row in which the cell is\n\t */\n\tprivate moveToCell(cell: NgxTreeGridCellTarget, row: NgxTreeGridRowTarget): void {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tthis.row.getCell(cell, row)?.focus();\n\t\t});\n\t}\n\n\t/**\n\t * Searches for a focusable element in the cell\n\t */\n\tprivate findFocusableElement(): HTMLElement | undefined {\n\t\tlet result: HTMLElement;\n\n\t\t// Iben: Loop over each first-level element of the children\n\t\tfor (const element of [...this.elementRef.nativeElement.children]) {\n\t\t\tif (!result) {\n\t\t\t\t// Iben: Check if we can focus on the element\n        element.focus();\n\n\t\t\t\t// Iben: If the current active element is the same as the element we focussed, on, we break\n\t\t\t\tif (element === document?.activeElement) {\n\t\t\t\t\tresult = element;\n\t\t\t\t\tthis.hasFocus = true;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: We register the cell and the row through the parent, as the td elements are not rendered within the row initially.\n\t\tconst ngxTreeGridCellRow = this.ngxTreeGridCellRow();\n  this.parent?.registerCell(ngxTreeGridCellRow, this);\n\t\tthis.row = this.parent.getRow(ngxTreeGridCellRow);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTreeGridDirective.html":{"url":"directives/NgxTreeGridDirective.html","title":"directive - NgxTreeGridDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTreeGridDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An overarching directive to handle navigation according to the WCAG treegrid pattern\nSee https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTreeGrid]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGrid\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGridExpandable\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    Private\n                                rows\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getFirstRow\n                            \n                            \n                                    Public\n                                getLastRow\n                            \n                            \n                                    Public\n                                getRow\n                            \n                            \n                                    Public\n                                moveTo\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                    Public\n                                registerCell\n                            \n                            \n                                    Public\n                                registerRow\n                            \n                            \n                                    Public\n                                removeRow\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTreeGrid\n                            \n                            \n                                ngxTreeGridExpandable\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                attr.role\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTreeGrid\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:26\n                            \n                        \n                \n                    \n                        Whether the current item is a treegrid\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTreeGridExpandable\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:31\n                            \n                        \n                \n                    \n                        Whether the treegrid has expandableRows\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        attr.role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"table\" | \"treegrid\"\n\n                    \n                \n                \n                    \n                        Default value : 'table'\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getFirstRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFirstRow()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:69\n                        \n                    \n\n\n            \n                \n                        Returns the first row of the grid\n\n\n                        \n                            Returns :         NgxTreeGridRowDirective\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getLastRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLastRow()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:76\n                        \n                    \n\n\n            \n                \n                        Returns the last row of the grid\n\n\n                        \n                            Returns :         NgxTreeGridRowDirective\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRow(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:56\n                        \n                    \n\n\n            \n                \n                        Returns a row from the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the row\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxTreeGridRowDirective\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        moveTo\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveTo(direction: \"top\" | \"bottom\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:85\n                        \n                    \n\n\n            \n                \n                        Moves the row focus to either the top or the bottom row of the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                        \"top\" | \"bottom\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether we want to go to the top or the bottom of the grid\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:98\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerCell\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerCell(index: number, cell: NgxTreeGridCellDirective)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:94\n                        \n                    \n\n\n            \n                \n                        Registers a a cell to a row of the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                cell\n                                            \n                                                            NgxTreeGridCellDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided cell\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerRow(row: NgxTreeGridRowDirective)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:38\n                        \n                    \n\n\n            \n                \n                        Registers a row to the rows array\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                row\n                                            \n                                                            NgxTreeGridRowDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided row\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeRow(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:47\n                        \n                    \n\n\n            \n                \n                        Removes a registered row from the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the provided row\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGrid\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:26\n                        \n                    \n\n            \n                \n                    Whether the current item is a treegrid\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGridExpandable\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:31\n                        \n                    \n\n            \n                \n                    Whether the treegrid has expandableRows\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"table\" | \"treegrid\"\n\n                    \n                \n                \n                    \n                        Default value : 'table'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.role')\n                        \n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        rows\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTreeGridRowDirective[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:19\n                        \n                    \n\n            \n                \n                    An array of all rows in the treegrid\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostBinding, OnChanges, input } from '@angular/core';\n\nimport { NgxTreeGridRowDirective } from './tree-grid-row.directive';\nimport { NgxTreeGridCellDirective } from './tree-grid.cell.directive';\n\n/**\n * An overarching directive to handle navigation according to the WCAG treegrid pattern\n *\n * See https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n */\n@Directive({\n\tselector: '[ngxTreeGrid]',\n\tstandalone: true,\n})\nexport class NgxTreeGridDirective implements OnChanges {\n\t/**\n\t * An array of all rows in the treegrid\n\t */\n\tprivate rows: NgxTreeGridRowDirective[] = [];\n\n\t@HostBinding('attr.role') role: 'table' | 'treegrid' = 'table';\n\n\t/**\n\t * Whether the current item is a treegrid\n\t */\n\tpublic readonly ngxTreeGrid = input.required();\n\n\t/**\n\t * Whether the treegrid has expandableRows\n\t */\n\tpublic readonly ngxTreeGridExpandable = input.required();\n\n\t/**\n\t * Registers a row to the rows array\n\t *\n\t * @param row - The provided row\n\t */\n\tpublic registerRow(row: NgxTreeGridRowDirective): void {\n\t\tthis.rows.push(row);\n\t}\n\n\t/**\n\t * Removes a registered row from the grid\n\t *\n\t * @param index - The index of the provided row\n\t */\n\tpublic removeRow(index: number): void {\n\t\tthis.rows = this.rows.slice(0, index).concat(this.rows.slice(index + 1));\n\t}\n\n\t/**\n\t * Returns a row from the grid\n\t *\n\t * @param index - The index of the row\n\t */\n\tpublic getRow(index: number): NgxTreeGridRowDirective {\n\t\t// Iben: Early exit if the row is not found\n\t\tif (!this.ngxTreeGrid()) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Iben: Return the row\n\t\treturn this.rows[index];\n\t}\n\n\t/**\n\t * Returns the first row of the grid\n\t */\n\tpublic getFirstRow(): NgxTreeGridRowDirective {\n\t\treturn this.getRow(0);\n\t}\n\n\t/**\n\t * Returns the last row of the grid\n\t */\n\tpublic getLastRow(): NgxTreeGridRowDirective {\n\t\treturn this.getRow(this.rows.length - 1);\n\t}\n\n\t/**\n\t * Moves the row focus to either the top or the bottom row of the grid\n\t *\n\t * @param direction - Whether we want to go to the top or the bottom of the grid\n\t */\n\tpublic moveTo(direction: 'top' | 'bottom') {\n\t\tthis.rows[direction === 'top' ? 0 : this.rows.length - 1]?.focus();\n\t}\n\n\t/**\n\t * Registers a a cell to a row of the grid\n\t *\n\t * @param cell - The provided cell\n\t */\n\tpublic registerCell(index: number, cell: NgxTreeGridCellDirective) {\n\t\tthis.getRow(index)?.registerCell(cell);\n\t}\n\n\tngOnChanges() {\n\t\t// Iben: Set the role based on the tree grid\n\t\tthis.role = this.ngxTreeGrid() ? 'treegrid' : 'table';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxValidators.html":{"url":"classes/NgxValidators.html","title":"class - NgxValidators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxValidators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/validators/validators.ts\n        \n\n\n            \n                Description\n            \n            \n                Exported Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                allOrNothingRequired\n                            \n                            \n                                    Static\n                                atLeastOneRequired\n                            \n                            \n                                    Static\n                                chronologicalDates\n                            \n                            \n                                    Static\n                                dateRangeValidator\n                            \n                            \n                                    Static\n                                decimalsAfterComma\n                            \n                            \n                                    Static\n                                dependedRequired\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        allOrNothingRequired\n                        \n                    \n                \n            \n            \n                \n                        \n                    allOrNothingRequired(control: FormGroup)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:27\n                        \n                    \n\n\n            \n                \n                        A validator to check if all or none of the values of a form group are filled in.\nParticularly useful in situations where a form group field within itself is optional,\nbut all fields are required in case it does get filled in\nReturns an allOrNothingRequiredError error on the provided FormGroup and a required error on the individual controls\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                        FormGroup\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA form group control\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        atLeastOneRequired\n                        \n                    \n                \n            \n            \n                \n                        \n                    atLeastOneRequired(options?: AtLeastOneRequiredValidatorOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:40\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    KeyType\n                            \n                        \n                    \n\n            \n                \n                        A validator to check if at least one of the provided controls of the form group are filled in\nReturns an atLeastOneRequiredError error on the provided FormGroup and a required error on the individual controls\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            AtLeastOneRequiredValidatorOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional object with configuration options, see below params for more info\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        chronologicalDates\n                        \n                    \n                \n            \n            \n                \n                        \n                    chronologicalDates(startControlKey: string, endControlKey: string, format: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:83\n                        \n                    \n\n\n            \n                \n                        A FormGroup validator to check whether a start and end date are chronologically correct\nReturns an incorrectChronologicalDates error on the provided FormGroup and a incorrectChronologicalDate on the endControl\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                startControlKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe key of the control containing the start date value\n\n\n                                            \n                                        \n                                        \n                                                endControlKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe key of the control containing the end date value\n\n\n                                            \n                                        \n                                        \n                                                format\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'yyyy-MM-dd'\n                                            \n\n                                            \n                                                    \nOptional format of the dates provided by the controls, by default yyyy-MM-dd\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        dateRangeValidator\n                        \n                    \n                \n            \n            \n                \n                        \n                    dateRangeValidator(min: string, max: string, format: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:100\n                        \n                    \n\n\n            \n                \n                        Form control validator which validates if a date is between a provided range\nReturns an invalidRange error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                min\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                max\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                format\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'yyyy-MM-dd'\n                                            \n\n                                            \n                                                    \nOptional format used for all 3 dates, by default yyyy-MM-dd\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        decimalsAfterComma\n                        \n                    \n                \n            \n            \n                \n                        \n                    decimalsAfterComma(max: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:70\n                        \n                    \n\n\n            \n                \n                        Validates whether the inputted value has exceeded the maximum amount of decimals after the comma\nReturns an invalidDecimalsAfterComma error on the provided control\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                max\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe maximum number of decimals after the comma\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        dependedRequired\n                        \n                    \n                \n            \n            \n                \n                        \n                    dependedRequired(controls: KeyType[], dependedControlKey: KeyType, matchFunction?: (data?: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:55\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    KeyType\n                            \n                        \n                    \n\n            \n                \n                        FormGroup validator which checks if an array of controls in the control are filled in if the depended control is filled in\nReturns a hasDependedRequiredError error on the provided FormGroup and a required error on the individual controls\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                controls\n                                            \n                                                        KeyType[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn array of controls.\n\n\n                                            \n                                        \n                                        \n                                                dependedControlKey\n                                            \n                                                        KeyType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA control within the group which the other controls depend on.\n\n\n                                            \n                                        \n                                        \n                                                matchFunction\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional function the dependedControl should check\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nimport { allOrNothingRequiredValidator } from './all-or-nothing-required/all-or-nothing-required.validator';\nimport {\n\tAtLeastOneRequiredValidatorOptions,\n\tatLeastOneRequiredValidator,\n} from './at-least-one-required/at-least-one-required.validator';\nimport { chronologicalDatesValidator } from './chronological-dates/chronological-dates.validator';\nimport { dateRangeValidator } from './date-range/date-range.validator';\nimport { decimalsAfterCommaValidator } from './decimals-after-comma/decimals-after-comma.validator';\nimport { dependedRequiredValidator } from './depended-required/depended-required.validator';\n\n/**\n * Exported Class\n */\n\nexport class NgxValidators {\n\t/**\n\t * A validator to check if all or none of the values of a form group are filled in.\n\t * Particularly useful in situations where a form group field within itself is optional,\n\t * but all fields are required in case it does get filled in\n\t *\n\t * Returns an `allOrNothingRequiredError` error on the provided FormGroup and a `required` error on the individual controls\n\t *\n\t * @param control - A form group control\n\t */\n\tstatic allOrNothingRequired(control: FormGroup): ValidationErrors | null {\n\t\treturn allOrNothingRequiredValidator(control);\n\t}\n\n\t/**\n\t * A validator to check if at least one of the provided controls of the form group are filled in\n\t *\n\t * Returns an `atLeastOneRequiredError` error on the provided FormGroup and a `required` error on the individual controls\n\t *\n\t * @param options - An optional object with configuration options, see below params for more info\n\t * @param controlNames - Optional list of controls, if not provided the validator is applied to all controls of the group\n\t * @param conditionalFunction - Optional function the form value needs to return true to for the required to be se\n\t */\n\tstatic atLeastOneRequired(\n\t\toptions?: AtLeastOneRequiredValidatorOptions\n\t): ValidatorFn {\n\t\treturn atLeastOneRequiredValidator(options);\n\t}\n\n\t/**\n\t * FormGroup validator which checks if an array of controls in the control are filled in if the depended control is filled in\n\t *\n\t * Returns a `hasDependedRequiredError` error on the provided FormGroup and a `required` error on the individual controls\n\t *\n\t * @param controls - An array of controls.\n\t * @param dependedControlKey - A control within the group which the other controls depend on.\n\t * @param matchFunction - Optional function the dependedControl should check\n\t */\n\tstatic dependedRequired(\n\t\tcontrols: KeyType[],\n\t\tdependedControlKey: KeyType,\n\t\tmatchFunction?: (data: any) => boolean\n\t): ValidatorFn {\n\t\treturn dependedRequiredValidator(controls, dependedControlKey, matchFunction);\n\t}\n\n\t/**\n\t * Validates whether the inputted value has exceeded the maximum amount of decimals after the comma\n\t *\n\t * Returns an `invalidDecimalsAfterComma` error on the provided control\n\t *\n\t * @param max - The maximum number of decimals after the comma\n\t */\n\tstatic decimalsAfterComma(max: number): ValidatorFn {\n\t\treturn decimalsAfterCommaValidator(max);\n\t}\n\n\t/**\n\t * A FormGroup validator to check whether a start and end date are chronologically correct\n\t *\n\t * Returns an `incorrectChronologicalDates` error on the provided FormGroup and a `incorrectChronologicalDate` on the endControl\n\t *\n\t * @param startControlKey - The key of the control containing the start date value\n\t * @param endControlKey - The key of the control containing the end date value\n\t * @param format - Optional format of the dates provided by the controls, by default yyyy-MM-dd\n\t */\n\tstatic chronologicalDates(\n\t\tstartControlKey: string,\n\t\tendControlKey: string,\n\t\tformat = 'yyyy-MM-dd'\n\t): ValidatorFn {\n\t\treturn chronologicalDatesValidator(startControlKey, endControlKey, format);\n\t}\n\n\t/**\n\t * Form control validator which validates if a date is between a provided range\n\t *\n\t * Returns an `invalidRange` error\n\t *\n\t * @param minDate - Minimum valid date\n\t * @param maxDate - Maximum valid date\n\t * @param format - Optional format used for all 3 dates, by default yyyy-MM-dd\n\t */\n\tstatic dateRangeValidator(min: string, max: string, format = 'yyyy-MM-dd'): ValidatorFn {\n\t\treturn dateRangeValidator(min, max, format);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxWindowService.html":{"url":"injectables/NgxWindowService.html","title":"injectable - NgxWindowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxWindowService\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/core/src/lib/services/window/window.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service used to access the document and window in a SSR safe way\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                currentScrollPosition\n                            \n                            \n                                    Public\n                                currentScrollPosition$\n                            \n                            \n                                    Private\n                                currentScrollPositionSubject$\n                            \n                            \n                                    Private\n                                    Readonly\n                                document\n                            \n                            \n                                    Private\n                                    Readonly\n                                platformId\n                            \n                            \n                                    Public\n                                scrollingUp$\n                            \n                            \n                                    Private\n                                scrollingUpSubject$\n                            \n                            \n                                    Public\n                                width$\n                            \n                            \n                                    Private\n                                widthSubject$\n                            \n                            \n                                    Public\n                                window\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleContentScroll\n                            \n                            \n                                    Public\n                                hasDocument\n                            \n                            \n                                    Public\n                                isBrowser\n                            \n                            \n                                    Public\n                                runInBrowser\n                            \n                            \n                                    Public\n                                scrollTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:61\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleContentScroll\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleContentScroll()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:136\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasDocument()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Returns whether there is a document present\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isBrowser\n                        \n                    \n                \n            \n            \n                \n                        \n                    isBrowser()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Returns whether the current platform is a browser\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        runInBrowser\n                        \n                    \n                \n            \n            \n                \n                        \n                    runInBrowser(action: (data: literal type) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:115\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ReturnType\n                            \n                        \n                    \n\n            \n                \n                        Run a provided function only when we're in the browser and not in a server side rendered application\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFunction we want to run in the browser\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ReturnType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        scrollTo\n                        \n                    \n                \n            \n            \n                \n                        \n                    scrollTo(offset: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Scrolls to the provided position of the page\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                offset\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    0\n                                            \n\n                                            \n                                                    \nOffset to which we want to scroll, scrolls to top when no offset is provided\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentScrollPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:56\n                        \n                    \n\n            \n                \n                    Current scroll position after the scroll has ended\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentScrollPosition$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentScrollPositionSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:50\n                        \n                    \n\n            \n                \n                    Observable of the current scroll position after the scroll has ended\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentScrollPositionSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(0)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:35\n                        \n                    \n\n            \n                \n                    Subject to hold the current scroll position\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Document\n\n                    \n                \n                \n                    \n                        Default value : inject(DOCUMENT)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:15\n                        \n                    \n\n            \n                \n                    Instance of the document if exists\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        platformId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(PLATFORM_ID)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:20\n                        \n                    \n\n            \n                \n                    Instance of the platform detector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        scrollingUp$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.scrollingUpSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:45\n                        \n                    \n\n            \n                \n                    Observable to track when the scroll has ended\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scrollingUpSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(true)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:30\n                        \n                    \n\n            \n                \n                    Subject to hold the scroll up event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        width$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.widthSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:40\n                        \n                    \n\n            \n                \n                    Observable to get the window-width, defaults to 1200 when no window is defined\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        widthSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(1200)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:25\n                        \n                    \n\n            \n                \n                    Subject to hold the window-width, defaults to 1200 when no window is defined\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        window\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Window\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:61\n                        \n                    \n\n            \n                \n                    The platforms Window object\n\n                \n            \n\n        \n    \n\n\n    \n\n    \n        NgxNgxWindowService\nThis service uses the DOCUMENT injection-token to provide several methods to access both document and window and related information.\nIt is convenient for using the document or window without breaking SSR.\nProperties\nwidth$\nThe window-service exposes a width$ observable to get the window-width. It defaults to 1200 when no window is defined.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public windowWidth$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.windowWidth$ = this.windowService.width$;\n    }\n}scrollingUp$\nThe window-service exposes a scrollingUp$ observable to know when the scroll has ended.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public scrollingUp$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.scrollingUp$ = this.windowService.scrollingUp$;\n    }\n}currentScrollPosition\nThe window-service exposes a currentScrollPosition property that contains the currentScrollPosition after handleContentScroll has been called.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public currentScrollPosition: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.currentScrollPosition = this.windowService.currentScrollPosition;\n    }\n}window\nThe window-service exposes the window property which is a link to the Window object.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public window$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.window = this.windowService.window;\n    }\n}document\nThe window-service also exposes the document property which is a link to the Document object.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public document$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.document = this.windowService.document;\n    }\n}Methods\nscrollTo\nA scrollTo method is provided to scroll to a position on the page. When there is no window, it will do nothing.\nThe offset is set to 0 by default so triggering the method without a value will scroll to the top of the page.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public somethingHappened(): void {\n        this.windowService.scrollTo(500);\n    }\n}hasDocument\nThe hasDocument-method is provided to check if there is a document.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public aCoolMethod(): void {\n        if (this.windowService.hasDocument()) {\n            // do something that depends on the document.\n        }\n    }\n}isBrowser\nThe isBrowser-method is provided to check if the current platform is a browser.\nIt uses the isPlatformBrowser method with the PLATFORM_ID injection-token internally.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public aCoolMethod(): void {\n        if (this.windowService.isBrowser()) {\n            // do something that depends on the browser.\n        }\n    }\n}runInBrowser\nThe runInBrowser-method is provided to run a specific callback only when in the browser.\nThe callback has access to the window and the document elements provided in its parameters.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public aCoolMethod(): void {\n        this.windowService.runInBrowser(({ browserWindow, browserDocument }) => {\n            // Do something with the browser window or document\n        });\n    }\n}\n    \n\n    \n        import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * A service used to access the document and window in a SSR safe way\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxWindowService {\n\t/**\n\t * Instance of the document if exists\n\t */\n\tprivate readonly document: Document = inject(DOCUMENT);\n\n\t/**\n\t * Instance of the platform detector\n\t */\n\tprivate readonly platformId = inject(PLATFORM_ID);\n\n\t/**\n\t * Subject to hold the window-width, defaults to 1200 when no window is defined\n\t */\n\tprivate widthSubject$: BehaviorSubject = new BehaviorSubject(1200);\n\n\t/**\n\t * Subject to hold the scroll up event\n\t */\n\tprivate scrollingUpSubject$: BehaviorSubject = new BehaviorSubject(true);\n\n\t/**\n\t * Subject to hold the current scroll position\n\t */\n\tprivate currentScrollPositionSubject$: BehaviorSubject = new BehaviorSubject(0);\n\n\t/**\n\t * Observable to get the window-width, defaults to 1200 when no window is defined\n\t */\n\tpublic width$: Observable = this.widthSubject$.asObservable();\n\n\t/**\n\t * Observable to track when the scroll has ended\n\t */\n\tpublic scrollingUp$: Observable = this.scrollingUpSubject$.asObservable();\n\n\t/**\n\t * Observable of the current scroll position after the scroll has ended\n\t */\n\tpublic currentScrollPosition$: Observable =\n\t\tthis.currentScrollPositionSubject$.asObservable();\n\n\t/**\n\t * Current scroll position after the scroll has ended\n\t */\n\tpublic currentScrollPosition: number = 0;\n\n\t/**\n\t * The platforms Window object\n\t */\n\tpublic window: Window;\n\n\tconstructor() {\n\t\t// Iben: Handle the initial setup of the service\n\t\tif (this.isBrowser() && this.hasDocument()) {\n\t\t\t// Iben: Set the window using the default view\n\t\t\tthis.window = this.document.defaultView as Window;\n\n\t\t\t// Iben: Listen to the scroll event of the document\n\t\t\tthis.document.addEventListener('scroll', this.handleContentScroll.bind(this));\n\n\t\t\t// Iben: Set the current window width\n\t\t\tthis.widthSubject$.next(this.window.innerWidth);\n\n\t\t\t// Iben: Listen to the resize event and update the window width\n\t\t\tthis.window.addEventListener('resize', () => {\n\t\t\t\tif (this.window.innerWidth && this.widthSubject$.getValue()) {\n\t\t\t\t\tthis.widthSubject$.next(this.window.innerWidth);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Scrolls to the provided position of the page\n\t *\n\t * @param offset - Offset to which we want to scroll, scrolls to top when no offset is provided\n\t */\n\tpublic scrollTo(offset: number = 0): void {\n\t\tif (!this.window) {\n\t\t\treturn;\n\t\t}\n\t\tthis.window.scrollTo(0, offset);\n\t}\n\n\t/**\n\t * Returns whether there is a document present\n\t */\n\tpublic hasDocument(): boolean {\n\t\treturn !!this.document;\n\t}\n\n\t/**\n\t * Returns whether the current platform is a browser\n\t */\n\tpublic isBrowser(): boolean {\n\t\treturn isPlatformBrowser(this.platformId);\n\t}\n\n\t/**\n\t * Run a provided function only when we're in the browser and not in a server side rendered application\n\t *\n\t * @param action - Function we want to run in the browser\n\t */\n\tpublic runInBrowser(\n\t\taction: (data: { browserWindow: Window; browserDocument: Document }) => ReturnType\n\t): ReturnType {\n\t\tif (this.isBrowser()) {\n\t\t\treturn action({\n\t\t\t\tbrowserWindow: this.window,\n\t\t\t\tbrowserDocument: this.document,\n\t\t\t});\n\t\t}\n\n\t\tconsole.warn('Browser depended function has not run.');\n\n\t\treturn undefined as ReturnType;\n\t}\n\n\t/**\n\t *\n\t *\n\t * @private\n\t * @memberof NgxWindowService\n\t */\n\tprivate handleContentScroll(): void {\n\t\t// Iben: Update the scrollUp subject\n\t\tif (window.scrollY > this.currentScrollPosition) {\n\t\t\tthis.scrollingUpSubject$.next(false);\n\t\t} else {\n\t\t\tthis.scrollingUpSubject$.next(true);\n\t\t}\n\n\t\t// Iben: Update the current scroll position\n\t\tthis.currentScrollPosition = window.scrollY \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpecStoreAssets.html":{"url":"interfaces/SpecStoreAssets.html","title":"interface - SpecStoreAssets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpecStoreAssets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-assets.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            StoreFlowAssets\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            channel\n                                        \n                                \n                                \n                                        \n                                            darkMode\n                                        \n                                \n                                \n                                        \n                                            subscriberCount\n                                        \n                                \n                                \n                                        \n                                            videos\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        channel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        channel:         BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        darkMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        darkMode:     BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscriberCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subscriberCount:     BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        videos\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        videos:         EntityStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseStoreAssets, EntityStoreAssets, StoreFlowAssets } from '../interfaces';\nimport { createBaseStoreAssets, createEntityAdapterStoreAssets, createStoreAssets } from '../utils';\n\nexport type DataType = { id: string; url: string };\n\ninterface SpecStoreAssets extends StoreFlowAssets {\n\tchannel: BaseStoreAssets;\n\tvideos: EntityStoreAssets;\n\tsubscriberCount: BaseStoreAssets;\n\tdarkMode: BaseStoreAssets;\n}\n\nexport const StoreSlice = 'YouTube';\n\nexport const { actions, reducers, selectors } = createStoreAssets(StoreSlice, [\n\t{\n\t\tsubSlice: 'channel',\n\t\tgenerator: createBaseStoreAssets,\n\t},\n\t{\n\t\tsubSlice: 'videos',\n\t\tgenerator: createEntityAdapterStoreAssets,\n\t},\n\t{\n\t\tsubSlice: 'subscriberCount',\n\t\tgenerator: createBaseStoreAssets,\n\t\tinitialValue: 0,\n\t},\n\t{\n\t\tsubSlice: 'darkMode',\n\t\tgenerator: createBaseStoreAssets,\n\t\tinitialValue: false,\n\t},\n]);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpecStoreService.html":{"url":"injectables/SpecStoreService.html","title":"injectable - SpecStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SpecStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStoreService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                channel$\n                            \n                            \n                                    Public\n                                    Readonly\n                                channelError$\n                            \n                            \n                                    Public\n                                    Readonly\n                                channelErrorMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                channelLoading$\n                            \n                            \n                                    Public\n                                    Readonly\n                                darkMode$\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpClient\n                            \n                            \n                                    Public\n                                    Readonly\n                                subscriberCount$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videos$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videosError$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videosErrorMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videosLoading$\n                            \n                            \n                                    Private\n                                stateWrapper\n                            \n                            \n                                    Protected\n                                    Readonly\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clearChannel\n                            \n                            \n                                    Public\n                                clearVideos\n                            \n                            \n                                    Public\n                                fetchChannel\n                            \n                            \n                                    Public\n                                fetchVideos\n                            \n                            \n                                    Public\n                                getChannel\n                            \n                            \n                                    Public\n                                getVideos\n                            \n                            \n                                    Public\n                                selectErrorFromStore\n                            \n                            \n                                    Public\n                                selectErrorMessageFromStore\n                            \n                            \n                                    Public\n                                selectFromStore\n                            \n                            \n                                    Public\n                                selectLoadingFromStore\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearVideos()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:65\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchVideos()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:73\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVideos(actionType: \"set\" | \"add\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                actionType\n                                            \n                                                        \"set\" | \"add\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'set'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:60\n\n                        \n                    \n\n\n            \n                \n                        Select the error state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorMessageFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorMessageFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:69\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ErrorMessage\n                            \n                        \n                    \n\n            \n                \n                        Select the error message state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:42\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    StoreItem\n                            \n                        \n                    \n\n            \n                \n                        Select the data of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectLoadingFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectLoadingFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:51\n\n                        \n                    \n\n\n            \n                \n                        Select the loading state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channel$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channelError$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channelErrorMessage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorMessageFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channelLoading$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectLoadingFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        darkMode$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(selectors.darkMode)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient\n\n                    \n                \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        subscriberCount$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(\n\t\tselectors.subscriberCount\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videos$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(\n\t\tselectors.videos\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videosError$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorFromStore(selectors.videos)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videosErrorMessage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorMessageFromStore(\n\t\tselectors.videos\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videosLoading$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectLoadingFromStore(\n\t\tselectors.videos\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stateWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StoreState\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:13\n\n                        \n                    \n\n            \n                \n                    A wrapper object for the store state selectors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:15\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { NgxStoreService } from '../abstracts';\nimport { dispatchDataToStore } from '../utils';\n\nimport { DataType, actions, selectors } from './store-assets';\n\n@Injectable()\nexport class SpecStoreService extends NgxStoreService {\n\tpublic readonly channel$: Observable = this.selectFromStore(\n\t\tselectors.channel\n\t);\n\tpublic readonly channelLoading$: Observable = this.selectLoadingFromStore(\n\t\tselectors.channel\n\t);\n\tpublic readonly channelError$: Observable = this.selectErrorFromStore(\n\t\tselectors.channel\n\t);\n\tpublic readonly channelErrorMessage$: Observable = this.selectErrorMessageFromStore(\n\t\tselectors.channel\n\t);\n\n\tpublic readonly videos$: Observable = this.selectFromStore(\n\t\tselectors.videos\n\t);\n\tpublic readonly videosLoading$: Observable = this.selectLoadingFromStore(\n\t\tselectors.videos\n\t);\n\tpublic readonly videosError$: Observable = this.selectErrorFromStore(selectors.videos);\n\tpublic readonly videosErrorMessage$: Observable = this.selectErrorMessageFromStore(\n\t\tselectors.videos\n\t);\n\tpublic readonly subscriberCount$: Observable = this.selectFromStore(\n\t\tselectors.subscriberCount\n\t);\n\tpublic readonly darkMode$: Observable = this.selectFromStore(selectors.darkMode);\n\n\tprivate readonly httpClient: HttpClient = inject(HttpClient);\n\n\tpublic getChannel(): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.channel,\n\t\t\tthis.httpClient.get('test'),\n\t\t\tthis.store\n\t\t).pipe(switchMap(() => this.channel$));\n\t}\n\n\tpublic clearChannel(): void {\n\t\tthis.store.dispatch(actions.channel.clear());\n\t}\n\n\tpublic getVideos(actionType: 'set' | 'add' = 'set'): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.videos,\n\t\t\tthis.httpClient.get('test'),\n\t\t\tthis.store,\n\t\t\tactionType\n\t\t).pipe(switchMap(() => this.videos$));\n\t}\n\n\tpublic clearVideos(): void {\n\t\tthis.store.dispatch(actions.videos.clear());\n\t}\n\n\tpublic fetchChannel() {\n\t\tthis.store.dispatch(actions.channel.effects.set({ payload: false }));\n\t}\n\n\tpublic fetchVideos() {\n\t\tthis.store.dispatch(actions.videos.effects.set({ payload: 'test' }));\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StoreAssetsOptions.html":{"url":"interfaces/StoreAssetsOptions.html","title":"interface - StoreAssetsOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StoreAssetsOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-generator.ts\n        \n\n\n            \n                Description\n            \n            \n                These objects will be used as a blueprint for our store slices\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            generator\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            initialValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            selectId\n                                        \n                                \n                                \n                                        \n                                            subSlice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        generator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        generator:      | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | \n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        initialValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialValue:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectId:     IdSelector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IdSelector\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subSlice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subSlice:     SliceKey\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SliceKey\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\nimport { ActionReducer, Action } from '@ngrx/store';\n\nimport { BaseStoreAssets } from './base-store';\nimport { EntityStoreAssets } from './entity-store-assets';\nimport {\n\tBaseStoreAssetsGeneratorOptions,\n\tEntityStoreAssetsGeneratorOptions,\n} from './store-assets-generator-options';\n\n/**\n * These objects will be used as a blueprint for our store slices\n *\n * @template SliceKey - The keys of our store\n */\nexport interface StoreAssetsOptions {\n\tsubSlice: SliceKey;\n\tgenerator:\n\t\t| ((options: EntityStoreAssetsGeneratorOptions) => EntityStoreAssets)\n\t\t| ((options: BaseStoreAssetsGeneratorOptions) => BaseStoreAssets);\n\n\tselectId?: IdSelector;\n\tinitialValue?: any;\n}\n\n// Iben: The base type for our flow assets which we'll pass to the create generator\nexport type StoreFlowAssets = Record | BaseStoreAssets>;\n\n// Iben: Type to extract the selectors from the provided ResultType, so that we know if we have a BaseStoreSelector or an EntityStoreSelector, this way\n// we get correct typing in our services\nexport type NgxStoreSelectors = {\n\t[Key in keyof ResultType]: ResultType[Key]['selectors'];\n};\n\n// Iben: Type to extract the actions from the provided ResultType, so that we know if we have a BaseStoreAction or an EntityStoreAction, this way\n// we get correct typing in our services\ntype NgxStoreActions = {\n\t[Key in keyof ResultType]: ResultType[Key]['actions'];\n};\n\n/**\n * The typing of the store of all sub slices\n *\n * @template ResultType - The typing we wish to see for our actions, reducers and selectors\n */\nexport interface NgxStore {\n\tselectors: NgxStoreSelectors;\n\tactions: NgxStoreActions;\n\treducers: ActionReducer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StoreEffects.html":{"url":"injectables/StoreEffects.html","title":"injectable - StoreEffects","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StoreEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/effects.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                actions$\n                            \n                            \n                                    Private\n                                    Readonly\n                                effectsService\n                            \n                            \n                                    Public\n                                fetchChannel$\n                            \n                            \n                                    Public\n                                fetchVideos$\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        actions$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Actions\n\n                    \n                \n                \n                    \n                        Default value : inject(Actions)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        effectsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EffectsService\n\n                    \n                \n                \n                    \n                        Default value : inject(EffectsService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchChannel$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(\n\t\t\t\tactions.channel,\n\t\t\t\t'set',\n\t\t\t\tthis.effectsService.fetchChannel\n\t\t\t)\n\t\t);\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchVideos$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(actions.videos, 'set', this.effectsService.fetchVideos)\n\t\t);\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:24\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { Actions, createEffect } from '@ngrx/effects';\n\nimport { handleEffect } from '../operators';\n\nimport { EffectsService } from './effects.service';\nimport { DataType, actions } from './store-assets';\n\n@Injectable()\nexport class StoreEffects {\n\tprivate readonly actions$: Actions = inject(Actions);\n\tprivate readonly effectsService: EffectsService = inject(EffectsService);\n\n\tpublic fetchChannel$ = createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(\n\t\t\t\tactions.channel,\n\t\t\t\t'set',\n\t\t\t\tthis.effectsService.fetchChannel\n\t\t\t)\n\t\t);\n\t});\n\n\tpublic fetchVideos$ = createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(actions.videos, 'set', this.effectsService.fetchVideos)\n\t\t);\n\t});\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StoreState.html":{"url":"interfaces/StoreState.html","title":"interface - StoreState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StoreState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-state.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            StoreFlowAssets\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            isCompleted\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         EntityStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isCompleted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isCompleted:     BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of, throwError, switchMap } from 'rxjs';\n\nimport { NgxStoreService } from '../abstracts';\nimport { BaseStoreAssets, EntityStoreAssets, StoreFlowAssets } from '../interfaces';\nimport {\n\tcreateBaseStoreAssets,\n\tcreateEntityAdapterStoreAssets,\n\tcreateStoreAssets,\n\tdispatchDataToStore,\n} from '../utils';\n\ninterface StoreState extends StoreFlowAssets {\n\tdata: EntityStoreAssets;\n\tisCompleted: BaseStoreAssets;\n}\n\nexport const { actions, reducers, selectors } = createStoreAssets('state', [\n\t{\n\t\tsubSlice: 'data',\n\t\tgenerator: createEntityAdapterStoreAssets,\n\t\tselectId: (item) => item,\n\t},\n\t{\n\t\tsubSlice: 'isCompleted',\n\t\tgenerator: createBaseStoreAssets,\n\t},\n]);\n\n@Injectable()\nexport class StoreStateService extends NgxStoreService {\n\tconstructor() {\n\t\tsuper(selectors);\n\t}\n\n\tsetWithError(): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.data,\n\t\t\tthrowError(() => new Error('This is an error')),\n\t\t\tthis.store\n\t\t).pipe(switchMap(() => throwError(() => new Error('This is an error'))));\n\t}\n\n\tsetData(payload: string[]): Observable {\n\t\treturn dispatchDataToStore(actions.data, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.data$)\n\t\t);\n\t}\n\n\tsetCompleted(payload: boolean): Observable {\n\t\treturn dispatchDataToStore(actions.isCompleted, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.isCompleted$)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StoreStateService.html":{"url":"injectables/StoreStateService.html","title":"injectable - StoreStateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StoreStateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-state.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStoreService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stateWrapper\n                            \n                            \n                                    Protected\n                                    Readonly\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setCompleted\n                            \n                            \n                                setData\n                            \n                            \n                                setWithError\n                            \n                            \n                                    Public\n                                selectErrorFromStore\n                            \n                            \n                                    Public\n                                selectErrorMessageFromStore\n                            \n                            \n                                    Public\n                                selectFromStore\n                            \n                            \n                                    Public\n                                selectLoadingFromStore\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:31\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setCompleted\n                        \n                    \n                \n            \n            \n                \nsetCompleted(payload: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setData\n                        \n                    \n                \n            \n            \n                \nsetData(payload: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setWithError\n                        \n                    \n                \n            \n            \n                \nsetWithError()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:60\n\n                        \n                    \n\n\n            \n                \n                        Select the error state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorMessageFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorMessageFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:69\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ErrorMessage\n                            \n                        \n                    \n\n            \n                \n                        Select the error message state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:42\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    StoreItem\n                            \n                        \n                    \n\n            \n                \n                        Select the data of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectLoadingFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectLoadingFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:51\n\n                        \n                    \n\n\n            \n                \n                        Select the loading state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stateWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StoreState\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:13\n\n                        \n                    \n\n            \n                \n                    A wrapper object for the store state selectors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:15\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of, throwError, switchMap } from 'rxjs';\n\nimport { NgxStoreService } from '../abstracts';\nimport { BaseStoreAssets, EntityStoreAssets, StoreFlowAssets } from '../interfaces';\nimport {\n\tcreateBaseStoreAssets,\n\tcreateEntityAdapterStoreAssets,\n\tcreateStoreAssets,\n\tdispatchDataToStore,\n} from '../utils';\n\ninterface StoreState extends StoreFlowAssets {\n\tdata: EntityStoreAssets;\n\tisCompleted: BaseStoreAssets;\n}\n\nexport const { actions, reducers, selectors } = createStoreAssets('state', [\n\t{\n\t\tsubSlice: 'data',\n\t\tgenerator: createEntityAdapterStoreAssets,\n\t\tselectId: (item) => item,\n\t},\n\t{\n\t\tsubSlice: 'isCompleted',\n\t\tgenerator: createBaseStoreAssets,\n\t},\n]);\n\n@Injectable()\nexport class StoreStateService extends NgxStoreService {\n\tconstructor() {\n\t\tsuper(selectors);\n\t}\n\n\tsetWithError(): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.data,\n\t\t\tthrowError(() => new Error('This is an error')),\n\t\t\tthis.store\n\t\t).pipe(switchMap(() => throwError(() => new Error('This is an error'))));\n\t}\n\n\tsetData(payload: string[]): Observable {\n\t\treturn dispatchDataToStore(actions.data, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.data$)\n\t\t);\n\t}\n\n\tsetCompleted(payload: boolean): Observable {\n\t\treturn dispatchDataToStore(actions.isCompleted, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.isCompleted$)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TableCellTemplate.html":{"url":"interfaces/TableCellTemplate.html","title":"interface - TableCellTemplate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TableCellTemplate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/components/table/ngx-table.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cellClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cellTemplate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footerTemplate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headerTemplate\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cellClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cellClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cellTemplate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cellTemplate:     TemplateRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footerTemplate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footerTemplate:     TemplateRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headerTemplate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headerTemplate:     TemplateRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CdkTableModule } from '@angular/cdk/table';\nimport { NgTemplateOutlet, NgClass, NgComponentOutlet } from '@angular/common';\nimport {\n\tAfterContentChecked,\n\tChangeDetectionStrategy,\n\tChangeDetectorRef,\n\tComponent,\n\tHostBinding,\n\tInject,\n\tOnDestroy,\n\tOnInit,\n\tTemplateRef,\n\tWritableSignal,\n\tinject,\n\tsignal,\n\tinput,\n\tOutputEmitterRef,\n\toutput,\n\tcontentChildren,\n\tcontentChild,\n\teffect,\n\tInputSignal,\n\tlinkedSignal,\n\tcomputed,\n\tSignal,\n} from '@angular/core';\nimport {\n\tControlValueAccessor,\n\tFormControl,\n\tFormRecord,\n\tNG_VALUE_ACCESSOR,\n\tReactiveFormsModule,\n} from '@angular/forms';\nimport { isEmpty } from 'lodash';\nimport { Subject } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\n\nimport { NgxTreeGrid } from '../../directives';\nimport {\n\tNgxAriaSortPipe,\n\tNgxTableHasObserversPipe,\n\tNgxTableShowHeaderPipe,\n\tNgxTableSortIconPipe,\n} from '../../pipes';\nimport {\n\tHideHeaderRowOption,\n\tNgxTableConfiguration,\n\tNgxTableConfigurationToken,\n\tShowDetailRowOption,\n} from '../../tokens';\nimport { NgxTableCypressDataTags, NgxTableSortEvent } from '../../types';\nimport {\n\tgenerateNgxTableForm,\n\thandleNgxTableHeaderValueChanges,\n\thandleNgxTableValueChanges,\n\tresetNgxTableForm,\n\twriteNgxTableValue,\n} from '../../utils';\nimport { NgxAbstractTableCellDirective } from '../cell';\n\ninterface TableCellTemplate {\n\theaderTemplate?: TemplateRef;\n\tcellTemplate?: TemplateRef;\n\tfooterTemplate?: TemplateRef;\n\tcellClass?: string;\n}\n\n@Component({\n\tselector: 'ngx-table',\n\ttemplateUrl: './ngx-table.component.html',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tstyleUrls: ['./ngx-table.component.scss'],\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tmulti: true,\n\t\t\tuseExisting: NgxTableComponent,\n\t\t},\n\t],\n\timports: [\n\t\tCdkTableModule,\n\t\tNgTemplateOutlet,\n\t\tNgClass,\n\t\tReactiveFormsModule,\n\t\tNgxTableHasObserversPipe,\n\t\tNgxTableSortIconPipe,\n\t\tNgxTableShowHeaderPipe,\n\t\tNgxAriaSortPipe,\n\t\tNgxTreeGrid,\n\t\tNgComponentOutlet,\n\t],\n\thost: {\n\t\t'class.ngx-table-loading': 'loading()',\n\t},\n})\nexport class NgxTableComponent\n\timplements AfterContentChecked, ControlValueAccessor, OnInit, OnDestroy\n{\n\tprivate cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\t@Inject(NgxTableConfigurationToken)\n\tpublic readonly ngxTableConfiguration: NgxTableConfiguration = inject(\n\t\tNgxTableConfigurationToken,\n\t\t{ optional: true }\n\t);\n\n\t/**\n\t * Default class that will be put on the ngx-table component\n\t */\n\t@HostBinding('class') public readonly componentClass =\n\t\tthis.ngxTableConfiguration?.ngxTableClass || '';\n\n\t/**\n\t * A subject to handle the observables when the component gets destroyed\n\t */\n\tprivate readonly destroyed$ = new Subject();\n\t/**\n\t * onTouch function for the control value accessor\n\t */\n\tprivate onTouch: Function = () => {};\n\t/**\n\t * onChanged function for the control value accessor\n\t */\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tprivate onChanged: Function = (_: any) => {};\n\n\t/**\n\t * Whether or not the form was generated\n\t */\n\tprivate formGenerated: boolean = false;\n\t/**\n\t * The current sorting event\n\t */\n\tprotected currentSortingEvent: WritableSignal = linkedSignal(\n\t\t() => {\n\t\t\tthis.handleCurrentSort(this.currentSorting());\n\n\t\t\treturn this.currentSorting();\n\t\t}\n\t);\n\n\t/**\n\t * Keeps a record with the column and it's templates\n\t */\n\tprotected tableCellTemplateRecord: WritableSignal> = signal(\n\t\t{}\n\t);\n\t/**\n\t * Keeps a record of which columns are sortable\n\t */\n\tprotected sortableTableCellRecord: WritableSignal\n\t> = signal({});\n\t/**\n\t * Keeps a record of which cells have a cypress tag\n\t */\n\tprotected tableCypressRecord: WritableSignal> = signal(\n\t\t{}\n\t);\n\t/**\n\t * Keeps a record of which cells are editable\n\t */\n\tprotected editableTableCellRecord: WritableSignal\n\t> = signal({});\n\n\t/**\n\t * An object with all the open rows\n\t */\n\tprotected openedRows: WritableSignal> = linkedSignal(() => {\n\t\t// Wouter: If all detail rows should be shown by default, we add all indices to the open rows\n\t\tif (this.showDetailRow() === 'always') {\n\t\t\treturn this.data().reduce((previousValue, _, index) => {\n\t\t\t\treturn {\n\t\t\t\t\t...previousValue,\n\t\t\t\t\t[index]: true,\n\t\t\t\t};\n\t\t\t}, {});\n\t\t} else if (\n\t\t\t// Wouter: If the detail row should be shown on single item and there is only one item, we add the first index to the open rows\n\t\t\tthis.showDetailRow() === 'on-single-item' &&\n\t\t\tthis.data().length === 1\n\t\t) {\n\t\t\treturn { 0: true };\n\t\t} else {\n\t\t\t// Iben: If no detail row should be shown due to global config, we reset the open rows\n\t\t\treturn {};\n\t\t}\n\t});\n\n\t/**\n\t * A FormGroup that adds a control for each row\n\t */\n\tprotected readonly rowsFormGroup = new FormRecord>({});\n\n\t/**\n\t * A computed signal to see if we have a form\n\t */\n\tprotected readonly hasForm: Signal = computed(() => {\n\t\t// Iben: Setup the form when the data or selectable state changes\n\t\tif (this.data() && this.selectable()) {\n\t\t\t// Iben: If no form was generated, first generate the form we need\n\t\t\tif (!this.formGenerated) {\n\t\t\t\tgenerateNgxTableForm(this.rowsFormGroup, this.data(), this.selectableKey());\n\n\t\t\t\tthis.formGenerated = true;\n\t\t\t} else {\n\t\t\t\t// Iben: If a form was generated, reset it as required\n\t\t\t\tresetNgxTableForm(\n\t\t\t\t\tthis.rowsFormGroup,\n\t\t\t\t\tthis.data(),\n\t\t\t\t\tthis.selectableKey(),\n\t\t\t\t\tthis.resetFormOnNewData()\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn this.formGenerated;\n\t});\n\n\t/**\n\t * A control for the select all option in the header of the table\n\t */\n\tprotected readonly headerControl = new FormControl();\n\n\t/**\n\t * A control for when we use a radio button\n\t */\n\tprotected readonly radioControl = new FormControl();\n\n\t/**\n\t * A list of all defined columns\n\t */\n\tprotected definedColumns: WritableSignal = linkedSignal(() => {\n\t\treturn [\n\t\t\t...(this.selectable() ? ['ngxTableSelectColumn'] : []),\n\t\t\t...(this.columns() || []),\n\t\t\t...(this.actions() || []),\n\t\t\t...(this.showOpenRowState() && this.detailRowTemplate()\n\t\t\t\t? ['ngxOpenRowStateColumn']\n\t\t\t\t: []),\n\t\t];\n\t});\n\n\t/**\n\t * Whether or not there was a footer template set somewhere in one of the cells\n\t */\n\tprotected hasFooterTemplates: WritableSignal = signal(false);\n\n\t/**\n\t * Whether or not there was a row selected\n\t */\n\tpublic selectedRow: WritableSignal = linkedSignal(() => {\n\t\t// Iben: Subscribe to the data changes\n\t\tthis.data();\n\n\t\t// Wouter: Deselect any row that was selected to prevent faulty class toggle.\n\t\treturn undefined;\n\t});\n\n\t/**\n\t * An array of table columns\n\t */\n\tprotected tableColumns: WritableSignal = linkedSignal(() => {\n\t\treturn [...(this.columns() || []), ...(this.actions() || [])];\n\t});\n\n\t/**\n\t * The currently focussed row\n\t */\n\tprotected focussedRow: string;\n\n\t/**\n\t * The currently focussed cell\n\t */\n\tprotected focussedCell: string;\n\n\t/**\n\t * A QueryList of all the table cell templates\n\t */\n\tprotected readonly tableCellTemplates = contentChildren(NgxAbstractTableCellDirective);\n\n\t/**\n\t * A template to provide a detail row\n\t */\n\tprotected readonly detailRowTemplate = contentChild>('detailRowTmpl');\n\n\t/**\n\t * A template to provide an empty view\n\t */\n\tprotected readonly emptyTemplate = contentChild>('emptyTmpl');\n\n\t/**\n\t * A template to provide a loading view\n\t */\n\tprotected readonly loadingTemplate = contentChild>('loadingTmpl');\n\n\t/**\n\t * A template to provide a checkbox template\n\t */\n\n\tprotected checkboxTemplate = contentChild>('checkboxTmpl');\n\n\t/**\n\t * A template to provide a radio button template\n\t */\n\n\tprotected radioTemplate = contentChild>('radioTmpl');\n\n\t/**\n\t * A template to provide a sort template\n\t */\n\n\tprotected sortTemplate = contentChild>('sortTmpl');\n\n\t/**\n\t * A template to provide a open state template\n\t */\n\tprotected readonly openRowStateTemplate = contentChild>('openRowStateTmpl');\n\n\t/**\n\t * A list of all column names we want to represent in the table\n\t */\n\tpublic readonly columns = input([]);\n\n\t/**\n\t * An optional list of all columns we wish to attribute to row actions, which are sorted to the end of the row by default\n\t */\n\tpublic readonly actions = input([]);\n\n\t/**\n\t * The data we wish to render in the table\n\t */\n\tpublic readonly data = input([]);\n\n\t/**\n\t * An optional property that defines whether multiple rows can be open at once.\n\t * By default, this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly allowMultipleOpenRows = input(\n\t\tthis.ngxTableConfiguration?.allowMultipleRowsOpen || false\n\t);\n\n\t/**\n\t * Whether or not rows in the table are selectable\n\t */\n\tpublic readonly selectable = input(false);\n\n\t/**\n\t * In case the rows are selectable, we can pass a key we want to use as return value instead of the index of the row\n\t */\n\tpublic readonly selectableKey = input();\n\n\t/**\n\t * In case the rows are selectable, we pass whether we want a radio button or a checkbox. By default, this is a checkbox\n\t */\n\tpublic readonly selectableType = input('checkbox');\n\n\t/**\n\t * In case the rows are selectable, we can determine whether we want to reset the form based on new data. Setting this to false will add new controls to the FormGroup; but will not remove the earlier controls from the form.\n\t * This is a useful feature for when the data is being filtered or new data is added through a load more mechanic\n\t *\n\t * By default, this is true. This default cannot be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly resetFormOnNewData = input(true);\n\n\t/**\n\t *\n\t * The current sorting event.\n\t */\n\tpublic currentSorting: InputSignal = input();\n\n\t/**\n\t * An optional property to define whether we want to add a class to the currently opened row.\n\t * By default this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly showSelectedOpenRow = input(\n\t\tthis.ngxTableConfiguration?.showSelectedOpenRow || false\n\t);\n\n\t/**\n\t * An optional class to add to the rows of the table\n\t */\n\tpublic readonly rowClass = input();\n\n\t/**\n\t * An optional key that can be used in the data in order to highlight a row. If this property is present and true, the highlight class will be provided.\n\t * By default, this key is ngx-highlight. The default can be overwritten in the NgxTableConfiguration\n\t */\n\tpublic readonly highlightKey = input(\n\t\tthis.ngxTableConfiguration?.highlightKey || 'ngx-highlight'\n\t);\n\n\t/**\n\t * An optional property to define whether we want to show a visual indicator of the open and closed state of a detail row.\n\t * By default this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly showOpenRowState = input(\n\t\tthis.ngxTableConfiguration?.showOpenRowState || false\n\t);\n\n\t/**\n\t * An optional property to define the default open state of the detail row.\n\t * By default this is 'on-click'. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly showDetailRow = input(\n\t\tthis.ngxTableConfiguration?.showDetailRow || 'on-click'\n\t);\n\n\t/**\n\t * An optional property to define whether we want to emit the row when there's only one item in the table and the showDetailRow is set to `on-single-item`\n\t * By default this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly emitValueOnSingleItem = input(\n\t\tthis.ngxTableConfiguration?.showDetailRow === 'on-single-item' &&\n\t\t\tthis.ngxTableConfiguration?.emitValueOnSingleItem\n\t);\n\n\t/**\n\t * An optional key to open a row by default upon rendering.\n\t */\n\tpublic defaultRowOpen: InputSignal = input();\n\n\t/**\n\t * An optional property to define whether we want the header to be hidden in certain cases.\n\t * By default this is never. The default can be overwritten in the NgxTableConfiguration\n\t */\n\tpublic readonly hideHeaderWhen = input(\n\t\tthis.ngxTableConfiguration?.hideHeaderWhen || 'never'\n\t);\n\n\t/**\n\t * The loading state of our table\n\t */\n\tpublic loading = input(false);\n\n\t/**\n\t * An optional set of data we pass if the loading state is shown\n\t */\n\tpublic loadingData = input();\n\n\t/**\n\t * An optional set of data we pass if the empty state is shown\n\t */\n\tpublic emptyData = input();\n\n\t/**\n\t * Returns the data of the row that was clicked\n\t */\n\tpublic rowClicked: OutputEmitterRef = output();\n\n\tconstructor() {\n\t\teffect(() => {\n\t\t\tconst openedIndex = this.defaultRowOpen();\n\t\t\t// Wouter: The function findIndex is most likely to be used. It returns\n\t\t\t// -1 if the index was not found.\n\t\t\tif (openedIndex  {\n\t\t\t\tthis.handleRowClicked(this.data()[openedIndex], openedIndex);\n\t\t\t\tthis.cdRef.markForCheck();\n\t\t\t});\n\t\t});\n\n\t\t// Iben: If there's only one item in the data and we open the detail row by default, we emit the row clicked value\n\t\teffect(() => {\n\t\t\tif (\n\t\t\t\tthis.emitValueOnSingleItem() &&\n\t\t\t\tthis.data()?.length === 1 &&\n\t\t\t\tthis.showDetailRow() === 'on-single-item'\n\t\t\t) {\n\t\t\t\tthis.handleRowClicked(this.data()[0], 0);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * WriteValue method for the value accessor\n\t *\n\t * @param value - The value patched to the control\n\t */\n\tpublic writeValue(value: string[] | unknown): void {\n\t\t// Iben: In case we're using radio buttons, we set the radio control and early exit\n\t\tif (this.selectableType() === 'radio') {\n\t\t\tthis.radioControl.patchValue(value, { emitEvent: false });\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Reset the form\n\t\tthis.rowsFormGroup.reset({}, { emitEvent: false });\n\n\t\t// Iben: Early exit if the value is empty or not an array\n\t\tif (!Array.isArray(value) || value.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Patch the value to the form\n\t\tthis.rowsFormGroup.patchValue(writeNgxTableValue(value, this.selectableKey()), {\n\t\t\temitEvent: false,\n\t\t});\n\n\t\t// Wouter: Some rows are not selected, so uncheck the header checkbox\n\t\tif (\n\t\t\tObject.values(this.rowsFormGroup.controls).some(\n\t\t\t\t(control: FormControl) => !control?.value\n\t\t\t)\n\t\t) {\n\t\t\tthis.headerControl.patchValue(false, { emitEvent: false });\n\t\t\treturn;\n\t\t}\n\n\t\t// Wouter: Set the header checkbox to `checked`, because all rows are selected\n\t\tthis.headerControl.patchValue(true, { emitEvent: false });\n\t}\n\n\t/**\n\t * Register the onChange function\n\t */\n\tpublic registerOnChange(fn: any): void {\n\t\tthis.onChanged = fn;\n\t}\n\n\t/**\n\t * Register the onTouched function\n\t */\n\tpublic registerOnTouched(fn: any): void {\n\t\tthis.onTouch = fn;\n\t}\n\n\t/**\n\t * Handle the disabled state of the form\n\t *\n\t * @param  isDisabled - Whether or not the form is disabled\n\t */\n\tpublic setDisabledState?(isDisabled: boolean): void {\n\t\tif (isDisabled) {\n\t\t\tthis.rowsFormGroup.disable({ emitEvent: false });\n\t\t\tthis.headerControl.disable({ emitEvent: false });\n\t\t\tthis.radioControl.disable({ emitEvent: false });\n\t\t} else {\n\t\t\tthis.rowsFormGroup.enable({ emitEvent: false });\n\t\t\tthis.headerControl.enable({ emitEvent: false });\n\t\t\tthis.radioControl.enable({ emitEvent: false });\n\t\t}\n\t}\n\n\t/**\n\t * Handle a click on a row\n\t *\n\t * @param row - The data of the row that was clicked\n\t * @param index - The index of the row that was clicked\n\t */\n\tpublic handleRowClicked(row: any, index: number) {\n\t\t// Iben: Emit a row click event\n\t\tthis.rowClicked.emit(row);\n\n\t\t// Iben: Handle the selected open row if needed\n\t\tif (this.showSelectedOpenRow()) {\n\t\t\tif (this.selectedRow() === index) {\n\t\t\t\t// Benoit: If you close the selected row, unselect that row\n\t\t\t\tthis.selectedRow.set(undefined);\n\t\t\t} else {\n\t\t\t\tthis.selectedRow.set(index);\n\t\t\t}\n\t\t}\n\t\tthis.handleRowState(index, !this.openedRows()[index] ? 'open' : 'close');\n\t}\n\n\t/**\n\t * Handle the expanded state of a row\n\t *\n\t * @param index - The index of the row\n\t * @param action - Whether the row needs to be opened or closed\n\t */\n\tpublic handleRowState(index: number, action: 'open' | 'close'): void {\n\t\t// Iben: If there's no detail row we early exit\n\t\tif (!this.detailRowTemplate()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Wouter: When the detail row should be shown due to global config, we add the index to the open rows\n\t\tif (\n\t\t\tthis.showDetailRow() === 'always' ||\n\t\t\t(this.showDetailRow() === 'on-single-item' && this.data.length === 1)\n\t\t) {\n\t\t\tthis.openedRows.update((value) => ({ ...value, 0: true }));\n\t\t\t// Iben: Depending on whether we allow multiple rows to be open at the same time, we toggle the open rows accordingly\n\t\t}\n\t\t// Iben: Depending on whether we allow multiple rows to be open at the same time, we toggle the open rows accordingly\n\t\telse if (this.allowMultipleOpenRows()) {\n\t\t\tthis.openedRows.update((value) => ({\n\t\t\t\t...value,\n\t\t\t\tindex: action === 'open',\n\t\t\t}));\n\t\t} else {\n\t\t\tthis.openedRows.set(action === 'open' ? { [index]: true } : {});\n\t\t}\n\t}\n\n\t/**\n\t * Assigns the templates of each cell to the correct columns\n\t */\n\tprivate handleTableCellTemplates(): void {\n\t\t// Iben: Reset the provided records\n\t\tthis.tableCellTemplateRecord.set({});\n\t\tthis.sortableTableCellRecord.set({});\n\t\tthis.tableCypressRecord.set({});\n\t\tthis.editableTableCellRecord.set({});\n\n\t\t// Iben: Loop over all provided table cell templates\n\t\tArray.from(this.tableCellTemplates()).forEach((tableCellTemplate) => {\n\t\t\t// Iben: Early exit in case for some reason the template is undefined\n\t\t\tif (!tableCellTemplate) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Iben: Add the template to the template record for easy access in the table template\n\t\t\tconst {\n\t\t\t\tcolumn: columnInput,\n\t\t\t\theaderTemplate,\n\t\t\t\tcellTemplate,\n\t\t\t\tfooterTemplate,\n\t\t\t\tsortable: sortableInput,\n\t\t\t\tcellClass,\n\t\t\t\tcypressDataTags: cypressDataTagsInput,\n\t\t\t\teditable: editableInput,\n\t\t\t} = tableCellTemplate;\n\t\t\tconst column = columnInput();\n\t\t\tconst sortable = sortableInput();\n\t\t\tconst cypressDataTags = cypressDataTagsInput();\n\t\t\tconst editable = editableInput();\n\n\t\t\tthis.tableCellTemplateRecord.update((value) => {\n\t\t\t\treturn {\n\t\t\t\t\t...value,\n\t\t\t\t\t[column]: {\n\t\t\t\t\t\theaderTemplate,\n\t\t\t\t\t\tcellTemplate,\n\t\t\t\t\t\tfooterTemplate,\n\t\t\t\t\t\tcellClass,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// Iben: If the column is sortable, we add it to the sortable record\n\t\t\tif (sortable) {\n\t\t\t\tthis.sortableTableCellRecord.update((value) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\t[column]: tableCellTemplate,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Iben: If the column has cypress tags, we add them to the record\n\t\t\tif (cypressDataTags) {\n\t\t\t\tthis.tableCypressRecord.update((value) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\t[column]: cypressDataTags,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Iben: If the cell is editable, we add it to the record\n\t\t\tif (editable) {\n\t\t\t\tthis.editableTableCellRecord.update((value) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\t[column]: tableCellTemplate,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Check if at least one template has a footer template, so that we know whether or not we have to render the footer row\n\t\tthis.hasFooterTemplates.set(\n\t\t\tArray.from(this.tableCellTemplates()).some((cellTemplate) =>\n\t\t\t\tBoolean(cellTemplate.footerTemplate)\n\t\t\t)\n\t\t);\n\n\t\t// Iben:\n\t\tthis.handleCurrentSort(this.currentSortingEvent());\n\n\t\t// Iben: Detect changes to update the view\n\t\tthis.cdRef.detectChanges();\n\t}\n\n\t/**\n\t * Respond to a click on the sort of a column\n\t *\n\t * @param column - The column we clicked on\n\t */\n\tpublic handleSort(column: string): void {\n\t\t// Iben: If the column is not sortable we early exit\n\t\tif (!this.sortableTableCellRecord()[column]) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Loop over the sortable columns and reset all columns that don't match with the clicked column\n\t\tObject.entries(this.sortableTableCellRecord()).forEach(([cellName, cell]) => {\n\t\t\tif (cellName === column) {\n\t\t\t\tthis.sortableTableCellRecord()[column].handleSort();\n\t\t\t} else {\n\t\t\t\tcell.resetSortDirection();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic selectRow(index: number): void {\n\t\tconst selectableKey = this.selectableKey();\n\t\tthis.rowsFormGroup\n\t\t\t.get(selectableKey ? `${this.data()[index][selectableKey]}` : `${index}`)\n\t\t\t.patchValue(true);\n\t}\n\n\t/**\n\t * Handle the changes in sort events\n\t *\n\t * @param event - The new sorting event\n\t */\n\tprivate handleCurrentSort(event: NgxTableSortEvent): void {\n\t\t// Iben: Early exit if the sortable cell record is empty or if the cell already has the sortDirection of the event\n\t\tif (\n\t\t\tisEmpty(\n\t\t\t\tthis.sortableTableCellRecord() ||\n\t\t\t\t\t(event &&\n\t\t\t\t\t\tthis.sortableTableCellRecord()[event.column].sortDirection ===\n\t\t\t\t\t\t\tevent.direction)\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: We reset all the sort directions by default, so all of them are unsorted.\n\t\tObject.values(this.sortableTableCellRecord()).forEach((cell) => cell.resetSortDirection());\n\n\t\t// Iben: If there's no sort event passed, we early exit\n\t\tif (!event) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: In case there was a sorting provided and we set the sorting to the provided column and direction\n\t\tthis.sortableTableCellRecord()[event.column].setSortDirection(event.direction);\n\t}\n\n\t/**\n\t * Setup the columns array\n\t */\n\tprivate handleRowColumns(): void {\n\t\t// Iben: Make sure that the select option, the open row state and the defined actions are correctly placed\n\t\tconst columns = this.columns();\n\t\tconst actions = this.actions();\n\t\tthis.definedColumns.set([\n\t\t\t...(this.selectable() ? ['ngxTableSelectColumn'] : []),\n\t\t\t...(columns || []),\n\t\t\t...(actions || []),\n\t\t\t...(this.showOpenRowState() && this.detailRowTemplate()\n\t\t\t\t? ['ngxOpenRowStateColumn']\n\t\t\t\t: []),\n\t\t]);\n\n\t\t// Iben: Set the actual table columns\n\t\tthis.tableColumns.set([...(columns || []), ...(actions || [])]);\n\t}\n\n\t// Lifecycle methods\n\t// ==============================\n\tpublic ngAfterContentChecked(): void {\n\t\t// Iben: Run with content check so that we can dynamically add templates/columns\n\t\tthis.handleRowColumns();\n\t\tthis.handleTableCellTemplates();\n\t}\n\n\tpublic ngOnInit() {\n\t\t// Iben: Subscribe to the form to handle the selectable behavior\n\t\tthis.rowsFormGroup.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\t// Iben: If not all items are selected, we uncheck the headerControl without emitting a value to prevent an infinite loop in the next subscription\n\t\t\t\t\tthis.headerControl.setValue(\n\t\t\t\t\t\tObject.values(value).every((selected) => selected),\n\t\t\t\t\t\t{ emitEvent: false }\n\t\t\t\t\t);\n\n\t\t\t\t\t// Iben: Emit the current selection and mark the form as touched\\\n\t\t\t\t\tthis.onChanged(handleNgxTableValueChanges(value));\n\t\t\t\t\tthis.onTouch();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Listen to the radio control and update the value accordingly\n\t\tthis.radioControl.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\tthis.onChanged(value);\n\t\t\t\t\tthis.onTouch();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Subscribe to the headerControl to handle multiSelect behaviour\n\t\tthis.headerControl.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((selected) => {\n\t\t\t\t\t// Iben: Select all items when this control is selected, if not, unselect them all\n\t\t\t\t\tif (selected) {\n\t\t\t\t\t\tthis.rowsFormGroup.patchValue(\n\t\t\t\t\t\t\thandleNgxTableHeaderValueChanges(this.rowsFormGroup)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.rowsFormGroup.reset();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\tpublic ngOnDestroy() {\n\t\tthis.destroyed$.next(null);\n\t\tthis.destroyed$.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestDisplayContentComponent.html":{"url":"components/TestDisplayContentComponent.html","title":"component - TestDisplayContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestDisplayContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-data\n            \n\n\n            \n                imports\n                \n                                NgxDisplayContentDirective\n                \n            \n\n\n\n            \n                template\n                Content\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                conditions\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                conditions\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        conditions\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:41\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        conditions\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Content'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestDisplayContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestErrorComponent.html":{"url":"components/TestErrorComponent.html","title":"component - TestErrorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestErrorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-error\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Error\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:13\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:13\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:8\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Error'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestErrorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestErrorDataComponent.html":{"url":"components/TestErrorDataComponent.html","title":"component - TestErrorDataComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestErrorDataComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-data-error\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Error {{data()}}\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:13\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:13\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:8\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Error {{data()}}'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestErrorDataComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestLoadingComponent.html":{"url":"components/TestLoadingComponent.html","title":"component - TestLoadingComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestLoadingComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-loading\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Loading\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:13\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:13\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:8\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Loading'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestLoadingComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestOfflineComponent.html":{"url":"components/TestOfflineComponent.html","title":"component - TestOfflineComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestOfflineComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-offline\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Offline\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:13\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:13\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:8\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Offline'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestOfflineComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestOverrideDisplayContentComponent.html":{"url":"components/TestOverrideDisplayContentComponent.html","title":"component - TestOverrideDisplayContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestOverrideDisplayContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-override-data\n            \n\n\n            \n                imports\n                \n                                NgxDisplayContentDirective\n                            CommonModule\n                \n            \n\n\n\n            \n                template\n                \n\tContent\n\n\nCustom loading\n\t\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                conditions\n                            \n                            \n                                    Readonly\n                                errorData\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                conditions\n                            \n                            \n                                errorData\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        conditions\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:62\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        errorData\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:63\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        conditions\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        errorData\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\tContentCustom loading\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestOverrideDisplayContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/TransformPipe.html":{"url":"pipes/TransformPipe.html","title":"pipe - TransformPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  TransformPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe to pass a transformer function to. By using this setup, we can use functions without causing rerender issues\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        transform\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: any, transformer: Function)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts:17\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TransformerType\n                            \n                        \n                    \n\n            \n                \n                        Transforms a value based on a provided transform function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided value we wish to transform\n\n\n                                            \n                                        \n                                        \n                                                transformer\n                                            \n                                                            Function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA provided transform function\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     TransformerType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        TransformPipe\nThe TransformPipe will transform a given value with the provided transform-function.\nHow to use\nExample :\n  {{ value | transform: toUpperCase }}\nWith a given value 'my text', will result in the following:\nExample :MY TEXT\n    \n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * A pipe to pass a transformer function to. By using this setup, we can use functions without causing rerender issues\n */\n@Pipe({\n\tname: 'transform',\n\tstandalone: true,\n})\nexport class TransformPipe implements PipeTransform {\n\t/**\n\t * Transforms a value based on a provided transform function\n\t *\n\t * @param value - The provided value we wish to transform\n\t * @param transformer - A provided transform function\n\t */\n\tpublic transform(value: any, transformer: Function): TransformerType {\n\t\t// Iben: If no transformer is passed, we return the original value\n\t\tif (!transformer) {\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: Transform the value and return\n\t\treturn transformer(value);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TranslationLoaderActionEntity.html":{"url":"interfaces/TranslationLoaderActionEntity.html","title":"interface - TranslationLoaderActionEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TranslationLoaderActionEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.types.ts\n        \n\n\n            \n                Description\n            \n            \n                A translation loading action, in which we indicate whether a file has been loaded or not\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TranslationLoaderActionEntity {\n\tid: string;\n\tstate: keyof typeof TranslationLoaderActionStateEnum;\n}\n\n/**\n * The state of a translation loading action\n */\nenum TranslationLoaderActionStateEnum {\n\tLOADING = 'LOADING',\n\tLOADED = 'LOADED',\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/cdk : 20.2.0\n        \n            @angular/common : 20.2.1\n        \n            @angular/compiler : 20.2.1\n        \n            @angular/core : 20.2.1\n        \n            @angular/forms : 20.2.1\n        \n            @angular/platform-browser : 20.2.1\n        \n            @angular/platform-browser-dynamic : 20.2.1\n        \n            @angular/router : 20.2.1\n        \n            @ibenvandeveire/ngx-core : 20.1.0\n        \n            @ibenvandeveire/types-authentication : ^1.0.0\n        \n            @ngrx/effects : 20.0.0\n        \n            @ngrx/entity : 20.0.0\n        \n            @ngrx/signals : 20.0.0\n        \n            @ngrx/store : 20.0.0\n        \n            @ngx-translate/core : 17.0.0\n        \n            date-fns : ^4.1.0\n        \n            deepmerge-ts : ^7.1.5\n        \n            lodash : ^4.17.21\n        \n            markerjs-live : ^1.2.1\n        \n            markerjs2 : ^2.32.4\n        \n            obj-clean : ^3.0.1\n        \n            rxjs : ~7.8.0\n        \n            uuid : ^11.1.0\n        \n            vanilla-cookieconsent : ^3.1.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NgxTableSortDirection   (libs/.../sort-direction.enum.ts)\n                        \n                        \n                            TranslationLoaderActionStateEnum   (libs/.../i18n-loading.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/angular/layout/src/lib/enums/sort-direction.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NgxTableSortDirection\n                    \n                \n                        \n                            \n                                 ASCENDING\n                            \n                        \n                        \n                            \n                                Value : ASCENDING\n                            \n                        \n                        \n                            \n                                 DESCENDING\n                            \n                        \n                        \n                            \n                                Value : DESCENDING\n                            \n                        \n            \n        \n\n    libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.types.ts\n    \n        \n            \n                \n                    \n                        \n                        TranslationLoaderActionStateEnum\n                    \n                \n                    \n                        \n                            The state of a translation loading action\n\n                        \n                    \n                        \n                            \n                                 LOADING\n                            \n                        \n                        \n                            \n                                Value : LOADING\n                            \n                        \n                        \n                            \n                                 LOADED\n                            \n                        \n                        \n                            \n                                Value : LOADED\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            authentication   (libs/.../authentication.ts)\n                        \n                        \n                            core   (libs/.../core.ts)\n                        \n                        \n                            NgxAuthenticatedHttpInterceptor   (libs/.../authentication.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/javascript/types/authentication/src/lib/authentication.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        authentication\n                        \n                    \n                \n            \n            \n                \nauthentication()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    libs/javascript/core/src/lib/core.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        core\n                        \n                    \n                \n            \n            \n                \ncore()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    libs/angular/authentication/src/lib/interceptors/authentication/authentication.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NgxAuthenticatedHttpInterceptor\n                        \n                    \n                \n            \n            \n                \nNgxAuthenticatedHttpInterceptor(request: HttpRequest, next: HttpHandlerFn)\n                \n            \n\n\n\n\n            \n                \n                        An interceptor that will handle any request that needs to be authenticated\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        HttpRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided request\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        HttpHandlerFn\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe HttpHandler\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n@ibenvandeveire open-source\n@ibenvandeveire open source is a mono-repo providing several of Angular and non-Angular based packages created and maintained by Iben Van de Veire.\nInstallation\nTo setup this project, clone the repo and run npm i to install the dependencies.\nDocumentation\nYou can find the documentation for all of the packages on the Wiki.\nFor more in depth documentation relating to individual components of each package, please consult the Compodoc Documentation\nPackages\n\nutils (@ibenvandeveire/ngx-utils) :\n\nThis Angular package provides several independent utilities to facilitate common use-cases for users and developers.\n\n\nforms (@ibenvandeveire/ngx-forms):\n\nThis Angular package provides multiple utilities for complex form use-cases.\n\n\nstore (@ibenvandeveire/ngx-store):\n\nThis Angular package provides several utils and abstractions to improve the Redux workflow\n\n\ni18n (@ibenvandeveire/ngx-i18n):\n\nThis Angular package provides a lazy-loaded modular approach to translations.\n\n\ncookies (@ibenvandeveire/ngx-cookies):\n\nThis Angular package provides a quick and easy wrapper for CookieConsent V3.\n\n\nlayout (@ibenvandeveire/ngx-layout):\n\nThis Angular package is a collection of Angular components related to layout.\n\n\ntour (@ibenvandeveire/ngx-inform):\n\nThis Angular package provides the tools to build a guided walkthrough of one or more pages, tooltips, modals etc.\n\n\ncore (@ibenvandeveire/ngx-core):\n\nThis Angular package provides the core functionalities for the other packages.\n\n\nrxjs-utils (@ibenvandeveire/rxjs-utils):\n\nThis package provides the common use-cases for RXJS based projects.\n\n\n\nYou can find detailed explanations in their respective README’s.\nContributions\nIn order to contribute to this repository you must:\n\nStart a new branch from main named either fix/PACKAGE/FEATURE-NAME or feat/PACKAGE/FEATURE-NAME.\nCommit all code regarding the fix or feature to this branch, but do not include a version bump. Your commit message should start with either fix(PACKAGE) or feat(PACKAGE) for a fix or feature respectively.\nOpen a PR and add the correct package label, an enhancement or bug tag, the project and milestone.\n\nContributors\n\nBenoît Dossoine\nDenis Valcke\nIben Van de Veire\nWouter Heirstrate\nAbdurrahman Ekinci\nIan Emsens\nFemke Reunes\n\nLicense\nMIT License\nCopyright (c) 2023 Studio Hyperdrive\nCopyright (c) 2025 Iben Van de Veire\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2023 Studio Hyperdrive\nCopyright (c) 2025 Iben Van de Veire\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    19 Components\n                \n            \n        \n        \n            \n                \n                    \n                    41 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    24 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Pipes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    87 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
